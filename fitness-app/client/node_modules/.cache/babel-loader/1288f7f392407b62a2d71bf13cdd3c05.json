{"ast":null,"code":"// import logo from './logo.svg';\n// import './App.css';\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// // export default App;\n// import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   createHttpLink,\n// } from '@apollo/client';\n// import { setContext } from '@apollo/client/link/context';\n// // import SearchBooks from './pages/SearchBooks';\n// // import SavedBooks from './pages/SavedBooks';\n// import Navbar from './components/Navbar';\n// //Construct our main GraphQL API endpoint\n// const httpLink = createHttpLink({\n//   uri: '/graphql',\n// });\n// //Construct request middleware that will attach the JWT token to every request as an `authorization` header\n// const authLink = setContext((_, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   const token = localStorage.getItem('id_token');\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `Bearer ${token}` : '',\n//     },\n//   };\n// });\n// const client = new ApolloClient({\n//   // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n// function App() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Router>\n//         <>\n//           <Navbar />\n//           <Switch>\n//              <Route exact path=\"/\" component={Navbar} />\n//             {/* <Route exact path=\"/saved\" component={SavedBooks} /> */}\n//             <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} /> \n//           </Switch>\n//         </>\n//       </Router>\n//     </ApolloProvider>\n//   );\n// }\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/jarma/school/challenges/Project3_Final/fitness-app/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// // export default App;\n// import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   createHttpLink,\n// } from '@apollo/client';\n// import { setContext } from '@apollo/client/link/context';\n\n// // import SearchBooks from './pages/SearchBooks';\n// // import SavedBooks from './pages/SavedBooks';\n// import Navbar from './components/Navbar';\n\n// //Construct our main GraphQL API endpoint\n// const httpLink = createHttpLink({\n//   uri: '/graphql',\n// });\n\n// //Construct request middleware that will attach the JWT token to every request as an `authorization` header\n// const authLink = setContext((_, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   const token = localStorage.getItem('id_token');\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `Bearer ${token}` : '',\n//     },\n//   };\n// });\n\n// const client = new ApolloClient({\n//   // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n\n// function App() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Router>\n//         <>\n//           <Navbar />\n//           <Switch>\n//              <Route exact path=\"/\" component={Navbar} />\n//             {/* <Route exact path=\"/saved\" component={SavedBooks} /> */}\n//             <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} /> \n//           </Switch>\n//         </>\n//       </Router>\n//     </ApolloProvider>\n//   );\n// }\n\n// export default App;"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}