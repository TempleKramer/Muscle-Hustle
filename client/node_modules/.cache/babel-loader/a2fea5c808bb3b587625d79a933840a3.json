{"ast":null,"code":"import{__rest}from\"tslib\";import{ApolloLink}from\"../core/index.js\";import{Observable}from\"../../utilities/index.js\";export function setContext(setter){return new ApolloLink(function(operation,forward){var request=__rest(operation,[]);return new Observable(function(observer){var handle;var closed=false;Promise.resolve(request).then(function(req){return setter(req,operation.getContext());}).then(operation.setContext).then(function(){if(closed)return;handle=forward(operation).subscribe({next:observer.next.bind(observer),error:observer.error.bind(observer),complete:observer.complete.bind(observer)});}).catch(observer.error.bind(observer));return function(){closed=true;if(handle)handle.unsubscribe();};});});}","map":{"version":3,"mappings":"0BAAA,OAASA,UAAT,KAAgE,kBAAhE,CACA,OAASC,UAAT,KAAmD,0BAAnD,CAOA,MAAM,SAAUC,WAAV,CAAqBC,MAArB,CAA0C,CAC9C,MAAO,IAAIH,WAAJ,CAAe,SAACI,SAAD,CAAuBC,OAAvB,CAAwC,CAC5D,GAAWC,QAAO,QAAKF,SAAL,CAAZ,EAAY,CAAlB,CAEA,MAAO,IAAIH,WAAJ,CAAe,kBAAQ,CAC5B,GAAIM,OAAJ,CACA,GAAIC,OAAM,CAAG,KAAb,CACAC,OAAO,CAACC,OAAR,CAAgBJ,OAAhB,EACGK,IADH,CACQ,aAAG,CAAI,aAAM,CAACC,GAAD,CAAMR,SAAS,CAACS,UAAV,EAAN,CAAN,CAAmC,CADlD,EAEGF,IAFH,CAEQP,SAAS,CAACF,UAFlB,EAGGS,IAHH,CAGQ,WAEJ,GAAIH,MAAJ,CAAY,OACZD,MAAM,CAAGF,OAAO,CAACD,SAAD,CAAP,CAAmBU,SAAnB,CAA6B,CACpCC,IAAI,CAAEC,QAAQ,CAACD,IAAT,CAAcE,IAAd,CAAmBD,QAAnB,CAD8B,CAEpCE,KAAK,CAAEF,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAF6B,CAGpCG,QAAQ,CAAEH,QAAQ,CAACG,QAAT,CAAkBF,IAAlB,CAAuBD,QAAvB,CAH0B,CAA7B,CAAT,CAKD,CAXH,EAYGI,KAZH,CAYSJ,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAZT,EAcA,MAAO,YACLR,MAAM,CAAG,IAAT,CACA,GAAID,MAAJ,CAAYA,MAAM,CAACc,WAAP,GACb,CAHD,CAID,CArBM,CAAP,CAsBD,CAzBM,CAAP,CA0BD","names":["ApolloLink","Observable","setContext","setter","operation","forward","request","handle","closed","Promise","resolve","then","req","getContext","subscribe","next","observer","bind","error","complete","catch","unsubscribe"],"sourceRoot":"","sources":["../../../src/link/context/index.ts"],"sourcesContent":["import { ApolloLink, Operation, GraphQLRequest, NextLink } from '../core';\nimport { Observable, ObservableSubscription } from '../../utilities';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}