{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import objectValues from\"../polyfills/objectValues.mjs\";import keyMap from\"../jsutils/keyMap.mjs\";import inspect from\"../jsutils/inspect.mjs\";import mapValue from\"../jsutils/mapValue.mjs\";import invariant from\"../jsutils/invariant.mjs\";import devAssert from\"../jsutils/devAssert.mjs\";import{Kind}from\"../language/kinds.mjs\";import{TokenKind}from\"../language/tokenKind.mjs\";import{dedentBlockStringValue}from\"../language/blockString.mjs\";import{isTypeDefinitionNode,isTypeExtensionNode}from\"../language/predicates.mjs\";import{assertValidSDLExtension}from\"../validation/validate.mjs\";import{getDirectiveValues}from\"../execution/values.mjs\";import{assertSchema,GraphQLSchema}from\"../type/schema.mjs\";import{specifiedScalarTypes,isSpecifiedScalarType}from\"../type/scalars.mjs\";import{introspectionTypes,isIntrospectionType}from\"../type/introspection.mjs\";import{GraphQLDirective,GraphQLDeprecatedDirective,GraphQLSpecifiedByDirective}from\"../type/directives.mjs\";import{isScalarType,isObjectType,isInterfaceType,isUnionType,isListType,isNonNullType,isEnumType,isInputObjectType,GraphQLList,GraphQLNonNull,GraphQLScalarType,GraphQLObjectType,GraphQLInterfaceType,GraphQLUnionType,GraphQLEnumType,GraphQLInputObjectType}from\"../type/definition.mjs\";import{valueFromAST}from\"./valueFromAST.mjs\";/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */export function extendSchema(schema,documentAST,options){assertSchema(schema);documentAST!=null&&documentAST.kind===Kind.DOCUMENT||devAssert(0,'Must provide valid Document AST.');if((options===null||options===void 0?void 0:options.assumeValid)!==true&&(options===null||options===void 0?void 0:options.assumeValidSDL)!==true){assertValidSDLExtension(documentAST,schema);}var schemaConfig=schema.toConfig();var extendedConfig=extendSchemaImpl(schemaConfig,documentAST,options);return schemaConfig===extendedConfig?schema:new GraphQLSchema(extendedConfig);}/**\n * @internal\n */export function extendSchemaImpl(schemaConfig,documentAST,options){var _schemaDef,_schemaDef$descriptio,_schemaDef2,_options$assumeValid;// Collect the type definitions and extensions found in the document.\nvar typeDefs=[];var typeExtensionsMap=Object.create(null);// New directives and types are separate because a directives and types can\n// have the same name. For example, a type named \"skip\".\nvar directiveDefs=[];var schemaDef;// Schema extensions are collected which may add additional operation types.\nvar schemaExtensions=[];for(var _i2=0,_documentAST$definiti2=documentAST.definitions;_i2<_documentAST$definiti2.length;_i2++){var def=_documentAST$definiti2[_i2];if(def.kind===Kind.SCHEMA_DEFINITION){schemaDef=def;}else if(def.kind===Kind.SCHEMA_EXTENSION){schemaExtensions.push(def);}else if(isTypeDefinitionNode(def)){typeDefs.push(def);}else if(isTypeExtensionNode(def)){var extendedTypeName=def.name.value;var existingTypeExtensions=typeExtensionsMap[extendedTypeName];typeExtensionsMap[extendedTypeName]=existingTypeExtensions?existingTypeExtensions.concat([def]):[def];}else if(def.kind===Kind.DIRECTIVE_DEFINITION){directiveDefs.push(def);}}// If this document contains no new types, extensions, or directives then\n// return the same unmodified GraphQLSchema instance.\nif(Object.keys(typeExtensionsMap).length===0&&typeDefs.length===0&&directiveDefs.length===0&&schemaExtensions.length===0&&schemaDef==null){return schemaConfig;}var typeMap=Object.create(null);for(var _i4=0,_schemaConfig$types2=schemaConfig.types;_i4<_schemaConfig$types2.length;_i4++){var existingType=_schemaConfig$types2[_i4];typeMap[existingType.name]=extendNamedType(existingType);}for(var _i6=0;_i6<typeDefs.length;_i6++){var _stdTypeMap$name;var typeNode=typeDefs[_i6];var name=typeNode.name.value;typeMap[name]=(_stdTypeMap$name=stdTypeMap[name])!==null&&_stdTypeMap$name!==void 0?_stdTypeMap$name:buildType(typeNode);}var operationTypes=_objectSpread(_objectSpread({// Get the extended root operation types.\nquery:schemaConfig.query&&replaceNamedType(schemaConfig.query),mutation:schemaConfig.mutation&&replaceNamedType(schemaConfig.mutation),subscription:schemaConfig.subscription&&replaceNamedType(schemaConfig.subscription)},schemaDef&&getOperationTypes([schemaDef])),getOperationTypes(schemaExtensions));// Then produce and return a Schema config with these types.\nreturn _objectSpread(_objectSpread({description:(_schemaDef=schemaDef)===null||_schemaDef===void 0?void 0:(_schemaDef$descriptio=_schemaDef.description)===null||_schemaDef$descriptio===void 0?void 0:_schemaDef$descriptio.value},operationTypes),{},{types:objectValues(typeMap),directives:[].concat(schemaConfig.directives.map(replaceDirective),directiveDefs.map(buildDirective)),extensions:undefined,astNode:(_schemaDef2=schemaDef)!==null&&_schemaDef2!==void 0?_schemaDef2:schemaConfig.astNode,extensionASTNodes:schemaConfig.extensionASTNodes.concat(schemaExtensions),assumeValid:(_options$assumeValid=options===null||options===void 0?void 0:options.assumeValid)!==null&&_options$assumeValid!==void 0?_options$assumeValid:false});// Below are functions used for producing this schema that have closed over\n// this scope and have access to the schema, cache, and newly defined types.\nfunction replaceType(type){if(isListType(type)){// $FlowFixMe[incompatible-return]\nreturn new GraphQLList(replaceType(type.ofType));}if(isNonNullType(type)){// $FlowFixMe[incompatible-return]\nreturn new GraphQLNonNull(replaceType(type.ofType));}return replaceNamedType(type);}function replaceNamedType(type){// Note: While this could make early assertions to get the correctly\n// typed values, that would throw immediately while type system\n// validation with validateSchema() will produce more actionable results.\nreturn typeMap[type.name];}function replaceDirective(directive){var config=directive.toConfig();return new GraphQLDirective(_objectSpread(_objectSpread({},config),{},{args:mapValue(config.args,extendArg)}));}function extendNamedType(type){if(isIntrospectionType(type)||isSpecifiedScalarType(type)){// Builtin types are not extended.\nreturn type;}if(isScalarType(type)){return extendScalarType(type);}if(isObjectType(type)){return extendObjectType(type);}if(isInterfaceType(type)){return extendInterfaceType(type);}if(isUnionType(type)){return extendUnionType(type);}if(isEnumType(type)){return extendEnumType(type);}// istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\nif(isInputObjectType(type)){return extendInputObjectType(type);}// istanbul ignore next (Not reachable. All possible types have been considered)\nfalse||invariant(0,'Unexpected type: '+inspect(type));}function extendInputObjectType(type){var _typeExtensionsMap$co;var config=type.toConfig();var extensions=(_typeExtensionsMap$co=typeExtensionsMap[config.name])!==null&&_typeExtensionsMap$co!==void 0?_typeExtensionsMap$co:[];return new GraphQLInputObjectType(_objectSpread(_objectSpread({},config),{},{fields:function fields(){return _objectSpread(_objectSpread({},mapValue(config.fields,function(field){return _objectSpread(_objectSpread({},field),{},{type:replaceType(field.type)});})),buildInputFieldMap(extensions));},extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendEnumType(type){var _typeExtensionsMap$ty;var config=type.toConfig();var extensions=(_typeExtensionsMap$ty=typeExtensionsMap[type.name])!==null&&_typeExtensionsMap$ty!==void 0?_typeExtensionsMap$ty:[];return new GraphQLEnumType(_objectSpread(_objectSpread({},config),{},{values:_objectSpread(_objectSpread({},config.values),buildEnumValueMap(extensions)),extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendScalarType(type){var _typeExtensionsMap$co2;var config=type.toConfig();var extensions=(_typeExtensionsMap$co2=typeExtensionsMap[config.name])!==null&&_typeExtensionsMap$co2!==void 0?_typeExtensionsMap$co2:[];var specifiedByUrl=config.specifiedByUrl;for(var _i8=0;_i8<extensions.length;_i8++){var _getSpecifiedByUrl;var extensionNode=extensions[_i8];specifiedByUrl=(_getSpecifiedByUrl=getSpecifiedByUrl(extensionNode))!==null&&_getSpecifiedByUrl!==void 0?_getSpecifiedByUrl:specifiedByUrl;}return new GraphQLScalarType(_objectSpread(_objectSpread({},config),{},{specifiedByUrl:specifiedByUrl,extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendObjectType(type){var _typeExtensionsMap$co3;var config=type.toConfig();var extensions=(_typeExtensionsMap$co3=typeExtensionsMap[config.name])!==null&&_typeExtensionsMap$co3!==void 0?_typeExtensionsMap$co3:[];return new GraphQLObjectType(_objectSpread(_objectSpread({},config),{},{interfaces:function interfaces(){return[].concat(type.getInterfaces().map(replaceNamedType),buildInterfaces(extensions));},fields:function fields(){return _objectSpread(_objectSpread({},mapValue(config.fields,extendField)),buildFieldMap(extensions));},extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendInterfaceType(type){var _typeExtensionsMap$co4;var config=type.toConfig();var extensions=(_typeExtensionsMap$co4=typeExtensionsMap[config.name])!==null&&_typeExtensionsMap$co4!==void 0?_typeExtensionsMap$co4:[];return new GraphQLInterfaceType(_objectSpread(_objectSpread({},config),{},{interfaces:function interfaces(){return[].concat(type.getInterfaces().map(replaceNamedType),buildInterfaces(extensions));},fields:function fields(){return _objectSpread(_objectSpread({},mapValue(config.fields,extendField)),buildFieldMap(extensions));},extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendUnionType(type){var _typeExtensionsMap$co5;var config=type.toConfig();var extensions=(_typeExtensionsMap$co5=typeExtensionsMap[config.name])!==null&&_typeExtensionsMap$co5!==void 0?_typeExtensionsMap$co5:[];return new GraphQLUnionType(_objectSpread(_objectSpread({},config),{},{types:function types(){return[].concat(type.getTypes().map(replaceNamedType),buildUnionTypes(extensions));},extensionASTNodes:config.extensionASTNodes.concat(extensions)}));}function extendField(field){return _objectSpread(_objectSpread({},field),{},{type:replaceType(field.type),// $FlowFixMe[incompatible-call]\nargs:mapValue(field.args,extendArg)});}function extendArg(arg){return _objectSpread(_objectSpread({},arg),{},{type:replaceType(arg.type)});}function getOperationTypes(nodes){var opTypes={};for(var _i10=0;_i10<nodes.length;_i10++){var _node$operationTypes;var node=nodes[_i10];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar operationTypesNodes=(_node$operationTypes=node.operationTypes)!==null&&_node$operationTypes!==void 0?_node$operationTypes:[];for(var _i12=0;_i12<operationTypesNodes.length;_i12++){var operationType=operationTypesNodes[_i12];opTypes[operationType.operation]=getNamedType(operationType.type);}}// Note: While this could make early assertions to get the correctly\n// typed values below, that would throw immediately while type system\n// validation with validateSchema() will produce more actionable results.\nreturn opTypes;}function getNamedType(node){var _stdTypeMap$name2;var name=node.name.value;var type=(_stdTypeMap$name2=stdTypeMap[name])!==null&&_stdTypeMap$name2!==void 0?_stdTypeMap$name2:typeMap[name];if(type===undefined){throw new Error(\"Unknown type: \\\"\".concat(name,\"\\\".\"));}return type;}function getWrappedType(node){if(node.kind===Kind.LIST_TYPE){return new GraphQLList(getWrappedType(node.type));}if(node.kind===Kind.NON_NULL_TYPE){return new GraphQLNonNull(getWrappedType(node.type));}return getNamedType(node);}function buildDirective(node){var locations=node.locations.map(function(_ref){var value=_ref.value;return value;});return new GraphQLDirective({name:node.name.value,description:getDescription(node,options),locations:locations,isRepeatable:node.repeatable,args:buildArgumentMap(node.arguments),astNode:node});}function buildFieldMap(nodes){var fieldConfigMap=Object.create(null);for(var _i14=0;_i14<nodes.length;_i14++){var _node$fields;var node=nodes[_i14];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar nodeFields=(_node$fields=node.fields)!==null&&_node$fields!==void 0?_node$fields:[];for(var _i16=0;_i16<nodeFields.length;_i16++){var field=nodeFields[_i16];fieldConfigMap[field.name.value]={// Note: While this could make assertions to get the correctly typed\n// value, that would throw immediately while type system validation\n// with validateSchema() will produce more actionable results.\ntype:getWrappedType(field.type),description:getDescription(field,options),args:buildArgumentMap(field.arguments),deprecationReason:getDeprecationReason(field),astNode:field};}}return fieldConfigMap;}function buildArgumentMap(args){// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar argsNodes=args!==null&&args!==void 0?args:[];var argConfigMap=Object.create(null);for(var _i18=0;_i18<argsNodes.length;_i18++){var arg=argsNodes[_i18];// Note: While this could make assertions to get the correctly typed\n// value, that would throw immediately while type system validation\n// with validateSchema() will produce more actionable results.\nvar type=getWrappedType(arg.type);argConfigMap[arg.name.value]={type:type,description:getDescription(arg,options),defaultValue:valueFromAST(arg.defaultValue,type),deprecationReason:getDeprecationReason(arg),astNode:arg};}return argConfigMap;}function buildInputFieldMap(nodes){var inputFieldMap=Object.create(null);for(var _i20=0;_i20<nodes.length;_i20++){var _node$fields2;var node=nodes[_i20];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar fieldsNodes=(_node$fields2=node.fields)!==null&&_node$fields2!==void 0?_node$fields2:[];for(var _i22=0;_i22<fieldsNodes.length;_i22++){var field=fieldsNodes[_i22];// Note: While this could make assertions to get the correctly typed\n// value, that would throw immediately while type system validation\n// with validateSchema() will produce more actionable results.\nvar type=getWrappedType(field.type);inputFieldMap[field.name.value]={type:type,description:getDescription(field,options),defaultValue:valueFromAST(field.defaultValue,type),deprecationReason:getDeprecationReason(field),astNode:field};}}return inputFieldMap;}function buildEnumValueMap(nodes){var enumValueMap=Object.create(null);for(var _i24=0;_i24<nodes.length;_i24++){var _node$values;var node=nodes[_i24];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar valuesNodes=(_node$values=node.values)!==null&&_node$values!==void 0?_node$values:[];for(var _i26=0;_i26<valuesNodes.length;_i26++){var value=valuesNodes[_i26];enumValueMap[value.name.value]={description:getDescription(value,options),deprecationReason:getDeprecationReason(value),astNode:value};}}return enumValueMap;}function buildInterfaces(nodes){var interfaces=[];for(var _i28=0;_i28<nodes.length;_i28++){var _node$interfaces;var node=nodes[_i28];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar interfacesNodes=(_node$interfaces=node.interfaces)!==null&&_node$interfaces!==void 0?_node$interfaces:[];for(var _i30=0;_i30<interfacesNodes.length;_i30++){var type=interfacesNodes[_i30];// Note: While this could make assertions to get the correctly typed\n// values below, that would throw immediately while type system\n// validation with validateSchema() will produce more actionable\n// results.\ninterfaces.push(getNamedType(type));}}return interfaces;}function buildUnionTypes(nodes){var types=[];for(var _i32=0;_i32<nodes.length;_i32++){var _node$types;var node=nodes[_i32];// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar typeNodes=(_node$types=node.types)!==null&&_node$types!==void 0?_node$types:[];for(var _i34=0;_i34<typeNodes.length;_i34++){var type=typeNodes[_i34];// Note: While this could make assertions to get the correctly typed\n// values below, that would throw immediately while type system\n// validation with validateSchema() will produce more actionable\n// results.\ntypes.push(getNamedType(type));}}return types;}function buildType(astNode){var _typeExtensionsMap$na;var name=astNode.name.value;var description=getDescription(astNode,options);var extensionNodes=(_typeExtensionsMap$na=typeExtensionsMap[name])!==null&&_typeExtensionsMap$na!==void 0?_typeExtensionsMap$na:[];switch(astNode.kind){case Kind.OBJECT_TYPE_DEFINITION:{var extensionASTNodes=extensionNodes;var allNodes=[astNode].concat(extensionASTNodes);return new GraphQLObjectType({name:name,description:description,interfaces:function interfaces(){return buildInterfaces(allNodes);},fields:function fields(){return buildFieldMap(allNodes);},astNode:astNode,extensionASTNodes:extensionASTNodes});}case Kind.INTERFACE_TYPE_DEFINITION:{var _extensionASTNodes=extensionNodes;var _allNodes=[astNode].concat(_extensionASTNodes);return new GraphQLInterfaceType({name:name,description:description,interfaces:function interfaces(){return buildInterfaces(_allNodes);},fields:function fields(){return buildFieldMap(_allNodes);},astNode:astNode,extensionASTNodes:_extensionASTNodes});}case Kind.ENUM_TYPE_DEFINITION:{var _extensionASTNodes2=extensionNodes;var _allNodes2=[astNode].concat(_extensionASTNodes2);return new GraphQLEnumType({name:name,description:description,values:buildEnumValueMap(_allNodes2),astNode:astNode,extensionASTNodes:_extensionASTNodes2});}case Kind.UNION_TYPE_DEFINITION:{var _extensionASTNodes3=extensionNodes;var _allNodes3=[astNode].concat(_extensionASTNodes3);return new GraphQLUnionType({name:name,description:description,types:function types(){return buildUnionTypes(_allNodes3);},astNode:astNode,extensionASTNodes:_extensionASTNodes3});}case Kind.SCALAR_TYPE_DEFINITION:{var _extensionASTNodes4=extensionNodes;return new GraphQLScalarType({name:name,description:description,specifiedByUrl:getSpecifiedByUrl(astNode),astNode:astNode,extensionASTNodes:_extensionASTNodes4});}case Kind.INPUT_OBJECT_TYPE_DEFINITION:{var _extensionASTNodes5=extensionNodes;var _allNodes4=[astNode].concat(_extensionASTNodes5);return new GraphQLInputObjectType({name:name,description:description,fields:function fields(){return buildInputFieldMap(_allNodes4);},astNode:astNode,extensionASTNodes:_extensionASTNodes5});}}// istanbul ignore next (Not reachable. All possible type definition nodes have been considered)\nfalse||invariant(0,'Unexpected type definition node: '+inspect(astNode));}}var stdTypeMap=keyMap(specifiedScalarTypes.concat(introspectionTypes),function(type){return type.name;});/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */function getDeprecationReason(node){var deprecated=getDirectiveValues(GraphQLDeprecatedDirective,node);return deprecated===null||deprecated===void 0?void 0:deprecated.reason;}/**\n * Given a scalar node, returns the string value for the specifiedByUrl.\n */function getSpecifiedByUrl(node){var specifiedBy=getDirectiveValues(GraphQLSpecifiedByDirective,node);return specifiedBy===null||specifiedBy===void 0?void 0:specifiedBy.url;}/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */export function getDescription(node,options){if(node.description){return node.description.value;}if((options===null||options===void 0?void 0:options.commentDescriptions)===true){var rawValue=getLeadingCommentBlock(node);if(rawValue!==undefined){return dedentBlockStringValue('\\n'+rawValue);}}}function getLeadingCommentBlock(node){var loc=node.loc;if(!loc){return;}var comments=[];var token=loc.startToken.prev;while(token!=null&&token.kind===TokenKind.COMMENT&&token.next&&token.prev&&token.line+1===token.next.line&&token.line!==token.prev.line){var value=String(token.value);comments.push(value);token=token.prev;}return comments.length>0?comments.reverse().join('\\n'):undefined;}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","objectValues","keyMap","inspect","mapValue","invariant","devAssert","Kind","TokenKind","dedentBlockStringValue","isTypeDefinitionNode","isTypeExtensionNode","assertValidSDLExtension","getDirectiveValues","assertSchema","GraphQLSchema","specifiedScalarTypes","isSpecifiedScalarType","introspectionTypes","isIntrospectionType","GraphQLDirective","GraphQLDeprecatedDirective","GraphQLSpecifiedByDirective","isScalarType","isObjectType","isInterfaceType","isUnionType","isListType","isNonNullType","isEnumType","isInputObjectType","GraphQLList","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","valueFromAST","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaConfig","toConfig","extendedConfig","extendSchemaImpl","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","typeExtensionsMap","create","directiveDefs","schemaDef","schemaExtensions","_i2","_documentAST$definiti2","definitions","def","SCHEMA_DEFINITION","SCHEMA_EXTENSION","extendedTypeName","name","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","typeMap","_i4","_schemaConfig$types2","types","existingType","extendNamedType","_i6","_stdTypeMap$name","typeNode","stdTypeMap","buildType","operationTypes","query","replaceNamedType","mutation","subscription","getOperationTypes","description","directives","map","replaceDirective","buildDirective","extensions","undefined","astNode","extensionASTNodes","replaceType","type","ofType","directive","config","args","extendArg","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","_typeExtensionsMap$co","fields","field","buildInputFieldMap","_typeExtensionsMap$ty","values","buildEnumValueMap","_typeExtensionsMap$co2","specifiedByUrl","_i8","_getSpecifiedByUrl","extensionNode","getSpecifiedByUrl","_typeExtensionsMap$co3","interfaces","getInterfaces","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","_typeExtensionsMap$co5","getTypes","buildUnionTypes","arg","nodes","opTypes","_i10","_node$operationTypes","node","operationTypesNodes","_i12","operationType","operation","getNamedType","_stdTypeMap$name2","Error","getWrappedType","LIST_TYPE","NON_NULL_TYPE","locations","_ref","getDescription","isRepeatable","repeatable","buildArgumentMap","fieldConfigMap","_i14","_node$fields","nodeFields","_i16","deprecationReason","getDeprecationReason","argsNodes","argConfigMap","_i18","defaultValue","inputFieldMap","_i20","_node$fields2","fieldsNodes","_i22","enumValueMap","_i24","_node$values","valuesNodes","_i26","_i28","_node$interfaces","interfacesNodes","_i30","_i32","_node$types","typeNodes","_i34","_typeExtensionsMap$na","extensionNodes","OBJECT_TYPE_DEFINITION","allNodes","INTERFACE_TYPE_DEFINITION","_extensionASTNodes","_allNodes","ENUM_TYPE_DEFINITION","_extensionASTNodes2","_allNodes2","UNION_TYPE_DEFINITION","_extensionASTNodes3","_allNodes3","SCALAR_TYPE_DEFINITION","_extensionASTNodes4","INPUT_OBJECT_TYPE_DEFINITION","_extensionASTNodes5","_allNodes4","deprecated","reason","specifiedBy","url","commentDescriptions","rawValue","getLeadingCommentBlock","loc","comments","token","startToken","prev","COMMENT","next","line","String","reverse","join"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/extendSchema.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"../language/blockString.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../language/predicates.mjs\";\nimport { assertValidSDLExtension } from \"../validation/validate.mjs\";\nimport { getDirectiveValues } from \"../execution/values.mjs\";\nimport { assertSchema, GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedScalarTypes, isSpecifiedScalarType } from \"../type/scalars.mjs\";\nimport { introspectionTypes, isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective } from \"../type/directives.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  var schemaConfig = schema.toConfig();\n  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  var typeDefs = [];\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var def = _documentAST$definiti2[_i2];\n\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      var extendedTypeName = def.name.value;\n      var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  var typeMap = Object.create(null);\n\n  for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {\n    var existingType = _schemaConfig$types2[_i4];\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {\n    var _stdTypeMap$name;\n\n    var typeNode = typeDefs[_i6];\n    var name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n\n  var operationTypes = _objectSpread(_objectSpread({\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)\n  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.\n\n\n  return _objectSpread(_objectSpread({\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value\n  }, operationTypes), {}, {\n    types: objectValues(typeMap),\n    directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),\n    extensions: undefined,\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread(_objectSpread({}, field), {}, {\n            type: replaceType(field.type)\n          });\n        })), buildInputFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {\n      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    var specifiedByUrl = config.specifiedByUrl;\n\n    for (var _i8 = 0; _i8 < extensions.length; _i8++) {\n      var _getSpecifiedByUrl;\n\n      var extensionNode = extensions[_i8];\n      specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;\n    }\n\n    return new GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {\n      specifiedByUrl: specifiedByUrl,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {\n      types: function types() {\n        return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendField(field) {\n    return _objectSpread(_objectSpread({}, field), {}, {\n      type: replaceType(field.type),\n      // $FlowFixMe[incompatible-call]\n      args: mapValue(field.args, extendArg)\n    });\n  }\n\n  function extendArg(arg) {\n    return _objectSpread(_objectSpread({}, arg), {}, {\n      type: replaceType(arg.type)\n    });\n  }\n\n  function getOperationTypes(nodes) {\n    var opTypes = {};\n\n    for (var _i10 = 0; _i10 < nodes.length; _i10++) {\n      var _node$operationTypes;\n\n      var node = nodes[_i10];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n      for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {\n        var operationType = operationTypesNodes[_i12];\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    } // Note: While this could make early assertions to get the correctly\n    // typed values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    var name = node.name.value;\n    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(\"Unknown type: \\\"\".concat(name, \"\\\".\"));\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var locations = node.locations.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: getDescription(node, options),\n      locations: locations,\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    var fieldConfigMap = Object.create(null);\n\n    for (var _i14 = 0; _i14 < nodes.length; _i14++) {\n      var _node$fields;\n\n      var node = nodes[_i14];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n\n      for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {\n        var field = nodeFields[_i16];\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description: getDescription(field, options),\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var argsNodes = args !== null && args !== void 0 ? args : [];\n    var argConfigMap = Object.create(null);\n\n    for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {\n      var arg = argsNodes[_i18];\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      var type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type: type,\n        description: getDescription(arg, options),\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    var inputFieldMap = Object.create(null);\n\n    for (var _i20 = 0; _i20 < nodes.length; _i20++) {\n      var _node$fields2;\n\n      var node = nodes[_i20];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n\n      for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {\n        var field = fieldsNodes[_i22];\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        var type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type: type,\n          description: getDescription(field, options),\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    var enumValueMap = Object.create(null);\n\n    for (var _i24 = 0; _i24 < nodes.length; _i24++) {\n      var _node$values;\n\n      var node = nodes[_i24];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n\n      for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {\n        var value = valuesNodes[_i26];\n        enumValueMap[value.name.value] = {\n          description: getDescription(value, options),\n          deprecationReason: getDeprecationReason(value),\n          astNode: value\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    var interfaces = [];\n\n    for (var _i28 = 0; _i28 < nodes.length; _i28++) {\n      var _node$interfaces;\n\n      var node = nodes[_i28];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];\n\n      for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {\n        var type = interfacesNodes[_i30];\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        interfaces.push(getNamedType(type));\n      }\n    }\n\n    return interfaces;\n  }\n\n  function buildUnionTypes(nodes) {\n    var types = [];\n\n    for (var _i32 = 0; _i32 < nodes.length; _i32++) {\n      var _node$types;\n\n      var node = nodes[_i32];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];\n\n      for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {\n        var type = typeNodes[_i34];\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        types.push(getNamedType(type));\n      }\n    }\n\n    return types;\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    var name = astNode.name.value;\n    var description = getDescription(astNode, options);\n    var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var extensionASTNodes = extensionNodes;\n          var allNodes = [astNode].concat(extensionASTNodes);\n          return new GraphQLObjectType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes = extensionNodes;\n\n          var _allNodes = [astNode].concat(_extensionASTNodes);\n\n          return new GraphQLInterfaceType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(_allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(_allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes2 = extensionNodes;\n\n          var _allNodes2 = [astNode].concat(_extensionASTNodes2);\n\n          return new GraphQLEnumType({\n            name: name,\n            description: description,\n            values: buildEnumValueMap(_allNodes2),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes2\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes3 = extensionNodes;\n\n          var _allNodes3 = [astNode].concat(_extensionASTNodes3);\n\n          return new GraphQLUnionType({\n            name: name,\n            description: description,\n            types: function types() {\n              return buildUnionTypes(_allNodes3);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes3\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes4 = extensionNodes;\n          return new GraphQLScalarType({\n            name: name,\n            description: description,\n            specifiedByUrl: getSpecifiedByUrl(astNode),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes4\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes5 = extensionNodes;\n\n          var _allNodes4 = [astNode].concat(_extensionASTNodes5);\n\n          return new GraphQLInputObjectType({\n            name: name,\n            description: description,\n            fields: function fields() {\n              return buildInputFieldMap(_allNodes4);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes5\n          });\n        }\n    } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)\n\n\n    false || invariant(0, 'Unexpected type definition node: ' + inspect(astNode));\n  }\n}\nvar stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n  return type.name;\n});\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByUrl.\n */\n\n\nfunction getSpecifiedByUrl(node) {\n  var specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node);\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}\n/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return dedentBlockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token != null && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}