{"ast":null,"code":"import isPromise from\"./jsutils/isPromise.mjs\";import{parse}from\"./language/parser.mjs\";import{validate}from\"./validation/validate.mjs\";import{validateSchema}from\"./type/validate.mjs\";import{execute}from\"./execution/execute.mjs\";/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * contextValue:\n *    The context value is provided as an argument to resolver functions after\n *    field arguments. It is used to pass shared information useful at any point\n *    during executing this query, for example the currently logged in user and\n *    connections to databases or other services.\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n * typeResolver:\n *    A type resolver function to use when none is provided by the schema.\n *    If not provided, the default type resolver is used (which looks for a\n *    `__typename` field or alternatively calls the `isTypeOf` method).\n */export function graphql(argsOrSchema,source,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver){var _arguments=arguments;/* eslint-enable no-redeclare */ // Always return a Promise for a consistent API.\nreturn new Promise(function(resolve){return resolve(// Extract arguments from object args if provided.\n_arguments.length===1?graphqlImpl(argsOrSchema):graphqlImpl({schema:argsOrSchema,source:source,rootValue:rootValue,contextValue:contextValue,variableValues:variableValues,operationName:operationName,fieldResolver:fieldResolver,typeResolver:typeResolver}));});}/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */export function graphqlSync(argsOrSchema,source,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver){/* eslint-enable no-redeclare */ // Extract arguments from object args if provided.\nvar result=arguments.length===1?graphqlImpl(argsOrSchema):graphqlImpl({schema:argsOrSchema,source:source,rootValue:rootValue,contextValue:contextValue,variableValues:variableValues,operationName:operationName,fieldResolver:fieldResolver,typeResolver:typeResolver});// Assert that the execution was synchronous.\nif(isPromise(result)){throw new Error('GraphQL execution failed to complete synchronously.');}return result;}function graphqlImpl(args){var schema=args.schema,source=args.source,rootValue=args.rootValue,contextValue=args.contextValue,variableValues=args.variableValues,operationName=args.operationName,fieldResolver=args.fieldResolver,typeResolver=args.typeResolver;// Validate Schema\nvar schemaValidationErrors=validateSchema(schema);if(schemaValidationErrors.length>0){return{errors:schemaValidationErrors};}// Parse\nvar document;try{document=parse(source);}catch(syntaxError){return{errors:[syntaxError]};}// Validate\nvar validationErrors=validate(schema,document);if(validationErrors.length>0){return{errors:validationErrors};}// Execute\nreturn execute({schema:schema,document:document,rootValue:rootValue,contextValue:contextValue,variableValues:variableValues,operationName:operationName,fieldResolver:fieldResolver,typeResolver:typeResolver});}","map":{"version":3,"names":["isPromise","parse","validate","validateSchema","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","Error","args","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/graphql.mjs"],"sourcesContent":["import isPromise from \"./jsutils/isPromise.mjs\";\nimport { parse } from \"./language/parser.mjs\";\nimport { validate } from \"./validation/validate.mjs\";\nimport { validateSchema } from \"./type/validate.mjs\";\nimport { execute } from \"./execution/execute.mjs\";\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * contextValue:\n *    The context value is provided as an argument to resolver functions after\n *    field arguments. It is used to pass shared information useful at any point\n *    during executing this query, for example the currently logged in user and\n *    connections to databases or other services.\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n * typeResolver:\n *    A type resolver function to use when none is provided by the schema.\n *    If not provided, the default type resolver is used (which looks for a\n *    `__typename` field or alternatively calls the `isTypeOf` method).\n */\n\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n      schema: argsOrSchema,\n      source: source,\n      rootValue: rootValue,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver,\n      typeResolver: typeResolver\n    }));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n    schema: argsOrSchema,\n    source: source,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  }); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  var schema = args.schema,\n      source = args.source,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // Validate Schema\n\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute({\n    schema: schema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}