{"ast":null,"code":"import{maybe}from\"../globals/index.js\";export var canUseWeakMap=typeof WeakMap==='function'&&maybe(function(){return navigator.product;})!=='ReactNative';export var canUseWeakSet=typeof WeakSet==='function';export var canUseSymbol=typeof Symbol==='function'&&typeof Symbol.for==='function';export var canUseAsyncIteratorSymbol=canUseSymbol&&Symbol.asyncIterator;export var canUseDOM=typeof maybe(function(){return window.document.createElement;})===\"function\";var usingJSDOM=maybe(function(){return navigator.userAgent.indexOf(\"jsdom\")>=0;})||false;export var canUseLayoutEffect=canUseDOM&&!usingJSDOM;","map":{"version":3,"mappings":"AAAA,OAASA,KAAT,KAAsB,qBAAtB,CAEA,MAAO,IAAMC,cAAa,CACxB,MAAOC,QAAP,GAAmB,UAAnB,EACAF,KAAK,CAAC,WAAM,gBAAS,CAACG,OAAV,CAAiB,CAAxB,CAAL,GAAmC,aAF9B,CAIP,MAAO,IAAMC,cAAa,CAAG,MAAOC,QAAP,GAAmB,UAAzC,CAEP,MAAO,IAAMC,aAAY,CACvB,MAAOC,OAAP,GAAkB,UAAlB,EACA,MAAOA,OAAM,CAACC,GAAd,GAAsB,UAFjB,CAIP,MAAO,IAAMC,0BAAyB,CAAGH,YAAY,EAAIC,MAAM,CAACG,aAAzD,CAEP,MAAO,IAAMC,UAAS,CACpB,MAAOX,MAAK,CAAC,WAAM,aAAM,CAACY,QAAP,CAAgBC,aAAhB,CAA6B,CAApC,CAAZ,GAAsD,UADjD,CAGP,GAAMC,WAAU,CASdd,KAAK,CAAC,WAAM,gBAAS,CAACe,SAAV,CAAoBC,OAApB,CAA4B,OAA5B,GAAwC,CAAxC,CAAyC,CAAhD,CAAL,EAA0D,KAT5D,CAiBA,MAAO,IAAMC,mBAAkB,CAAGN,SAAS,EAAI,CAACG,UAAzC","names":["maybe","canUseWeakMap","WeakMap","product","canUseWeakSet","WeakSet","canUseSymbol","Symbol","for","canUseAsyncIteratorSymbol","asyncIterator","canUseDOM","document","createElement","usingJSDOM","userAgent","indexOf","canUseLayoutEffect"],"sourceRoot":"","sources":["../../../src/utilities/common/canUse.ts"],"sourcesContent":["import { maybe } from \"../globals\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === 'function' &&\n  maybe(() => navigator.product) !== 'ReactNative';\n\nexport const canUseWeakSet = typeof WeakSet === 'function';\n\nexport const canUseSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.for === 'function';\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = canUseDOM && !usingJSDOM;\n"]},"metadata":{},"sourceType":"module"}