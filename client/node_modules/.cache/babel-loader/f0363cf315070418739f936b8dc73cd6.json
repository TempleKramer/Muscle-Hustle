{"ast":null,"code":"import{useEffect,useState}from'react';export function useReactiveVar(rv){var value=rv();var setValue=useState(value)[1];useEffect(function(){var probablySameValue=rv();if(value!==probablySameValue){setValue(probablySameValue);}else{return rv.onNextChange(setValue);}},[value]);return value;}","map":{"version":3,"mappings":"AAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAGA,MAAM,SAAUC,eAAV,CAA4BC,EAA5B,CAA8C,CAClD,GAAMC,MAAK,CAAGD,EAAE,EAAhB,CAIA,GAAME,SAAQ,CAAGJ,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAAjB,CAKAJ,SAAS,CAAC,WACR,GAAMM,kBAAiB,CAAGH,EAAE,EAA5B,CACA,GAAIC,KAAK,GAAKE,iBAAd,CAAiC,CAG/BD,QAAQ,CAACC,iBAAD,CAAR,CACD,CAJD,IAIO,CACL,MAAOH,GAAE,CAACI,YAAH,CAAgBF,QAAhB,CAAP,CACD,CACF,CATQ,CASN,CAACD,KAAD,CATM,CAAT,CAWA,MAAOA,MAAP,CACD","names":["useEffect","useState","useReactiveVar","rv","value","setValue","probablySameValue","onNextChange"],"sourceRoot":"","sources":["../../../src/react/hooks/useReactiveVar.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const setValue = useState(value)[1];\n\n  // We subscribe to variable updates on initial mount and when the value has\n  // changed. This avoids a subtle bug in React.StrictMode where multiple\n  // listeners are added, leading to inconsistent updates.\n  useEffect(() => {\n    const probablySameValue = rv();\n    if (value !== probablySameValue) {\n      // If the value of rv has already changed, we don't need to listen for the\n      // next change, because we can report this change immediately.\n      setValue(probablySameValue);\n    } else {\n      return rv.onNextChange(setValue);\n    }\n  }, [value]);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}