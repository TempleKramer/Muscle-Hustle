{"ast":null,"code":"// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\nexport{getIntrospectionQuery}from\"./getIntrospectionQuery.mjs\";// Gets the target Operation from a Document.\nexport{getOperationAST}from\"./getOperationAST.mjs\";// Gets the Type for the target Operation AST.\nexport{getOperationRootType}from\"./getOperationRootType.mjs\";// Convert a GraphQLSchema to an IntrospectionQuery.\nexport{introspectionFromSchema}from\"./introspectionFromSchema.mjs\";// Build a GraphQLSchema from an introspection result.\nexport{buildClientSchema}from\"./buildClientSchema.mjs\";// Build a GraphQLSchema from GraphQL Schema language.\nexport{buildASTSchema,buildSchema}from\"./buildASTSchema.mjs\";// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport{extendSchema// @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n,getDescription}from\"./extendSchema.mjs\";// Sort a GraphQLSchema.\nexport{lexicographicSortSchema}from\"./lexicographicSortSchema.mjs\";// Print a GraphQLSchema to GraphQL Schema language.\nexport{printSchema,printType,printIntrospectionSchema}from\"./printSchema.mjs\";// Create a GraphQLType from a GraphQL language AST.\nexport{typeFromAST}from\"./typeFromAST.mjs\";// Create a JavaScript value from a GraphQL language AST with a type.\nexport{valueFromAST}from\"./valueFromAST.mjs\";// Create a JavaScript value from a GraphQL language AST without a type.\nexport{valueFromASTUntyped}from\"./valueFromASTUntyped.mjs\";// Create a GraphQL language AST from a JavaScript value.\nexport{astFromValue}from\"./astFromValue.mjs\";// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nexport{TypeInfo,visitWithTypeInfo}from\"./TypeInfo.mjs\";// Coerces a JavaScript value to a GraphQL type, or produces errors.\nexport{coerceInputValue}from\"./coerceInputValue.mjs\";// Concatenates multiple AST together.\nexport{concatAST}from\"./concatAST.mjs\";// Separates an AST into an AST per Operation.\nexport{separateOperations}from\"./separateOperations.mjs\";// Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\nexport{stripIgnoredCharacters}from\"./stripIgnoredCharacters.mjs\";// Comparators for types\nexport{isEqualType,isTypeSubTypeOf,doTypesOverlap}from\"./typeComparators.mjs\";// Asserts that a string is a valid GraphQL name\nexport{assertValidName,isValidNameError}from\"./assertValidName.mjs\";// Compares two GraphQLSchemas and detects breaking changes.\nexport{BreakingChangeType,DangerousChangeType,findBreakingChanges,findDangerousChanges}from\"./findBreakingChanges.mjs\";// @deprecated: Report all deprecated usage within a GraphQL document.\nexport{findDeprecatedUsages}from\"./findDeprecatedUsages.mjs\";","map":{"version":3,"names":["getIntrospectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","extendSchema","getDescription","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","visitWithTypeInfo","coerceInputValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/index.mjs"],"sourcesContent":["// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\nexport { getIntrospectionQuery } from \"./getIntrospectionQuery.mjs\";\n// Gets the target Operation from a Document.\nexport { getOperationAST } from \"./getOperationAST.mjs\"; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from \"./getOperationRootType.mjs\"; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from \"./introspectionFromSchema.mjs\"; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from \"./buildClientSchema.mjs\"; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from \"./buildASTSchema.mjs\";\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n, getDescription } from \"./extendSchema.mjs\"; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from \"./lexicographicSortSchema.mjs\"; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from \"./printSchema.mjs\"; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from \"./typeFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from \"./valueFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from \"./valueFromASTUntyped.mjs\"; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from \"./astFromValue.mjs\"; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from \"./TypeInfo.mjs\"; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from \"./coerceInputValue.mjs\"; // Concatenates multiple AST together.\n\nexport { concatAST } from \"./concatAST.mjs\"; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from \"./separateOperations.mjs\"; // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\n\nexport { stripIgnoredCharacters } from \"./stripIgnoredCharacters.mjs\"; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from \"./typeComparators.mjs\"; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from \"./assertValidName.mjs\"; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from \"./findBreakingChanges.mjs\";\n// @deprecated: Report all deprecated usage within a GraphQL document.\nexport { findDeprecatedUsages } from \"./findDeprecatedUsages.mjs\";\n"],"mappings":"AAAA;AACA;AACA,OAASA,qBAAT,KAAsC,6BAAtC,CACA;AACA,OAASC,eAAT,KAAgC,uBAAhC,CAAyD;AAEzD,OAASC,oBAAT,KAAqC,4BAArC,CAAmE;AAEnE,OAASC,uBAAT,KAAwC,+BAAxC,CAAyE;AAEzE,OAASC,iBAAT,KAAkC,yBAAlC,CAA6D;AAE7D,OAASC,cAAT,CAAyBC,WAAzB,KAA4C,sBAA5C,CACA;AACA,OAASC,YAAa;AACtB;AADA,CAEEC,cAFF,KAEwB,oBAFxB,CAE8C;AAE9C,OAASC,uBAAT,KAAwC,+BAAxC,CAAyE;AAEzE,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,wBAAjC,KAAiE,mBAAjE,CAAsF;AAEtF,OAASC,WAAT,KAA4B,mBAA5B,CAAiD;AAEjD,OAASC,YAAT,KAA6B,oBAA7B,CAAmD;AAEnD,OAASC,mBAAT,KAAoC,2BAApC,CAAiE;AAEjE,OAASC,YAAT,KAA6B,oBAA7B,CAAmD;AACnD;AAEA,OAASC,QAAT,CAAmBC,iBAAnB,KAA4C,gBAA5C,CAA8D;AAE9D,OAASC,gBAAT,KAAiC,wBAAjC,CAA2D;AAE3D,OAASC,SAAT,KAA0B,iBAA1B,CAA6C;AAE7C,OAASC,kBAAT,KAAmC,0BAAnC,CAA+D;AAC/D;AAEA,OAASC,sBAAT,KAAuC,8BAAvC,CAAuE;AAEvE,OAASC,WAAT,CAAsBC,eAAtB,CAAuCC,cAAvC,KAA6D,uBAA7D,CAAsF;AAEtF,OAASC,eAAT,CAA0BC,gBAA1B,KAAkD,uBAAlD,CAA2E;AAE3E,OAASC,kBAAT,CAA6BC,mBAA7B,CAAkDC,mBAAlD,CAAuEC,oBAAvE,KAAmG,2BAAnG,CACA;AACA,OAASC,oBAAT,KAAqC,4BAArC"},"metadata":{},"sourceType":"module"}