{"ast":null,"code":"export default function symbolObservablePonyfill(root){var result;var Symbol=root.Symbol;if(typeof Symbol==='function'){if(Symbol.observable){result=Symbol.observable;}else{if(typeof Symbol.for==='function'){// This just needs to be something that won't trample other user's Symbol.for use\n// It also will guide people to the source of their issues, if this is problematic.\n// META: It's a resource locator!\nresult=Symbol.for('https://github.com/benlesh/symbol-observable');}else{// Symbol.for didn't exist! The best we can do at this point is a totally \n// unique symbol. Note that the string argument here is a descriptor, not\n// an identifier. This symbol is unique.\nresult=Symbol('https://github.com/benlesh/symbol-observable');}try{Symbol.observable=result;}catch(err){// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n// if it is frozen assigning to it will throw. In this case, we don't care, because\n// they will need to use the returned value from the ponyfill.\n}}}else{result='@@observable';}return result;};","map":{"version":3,"names":["symbolObservablePonyfill","root","result","Symbol","observable","for","err"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/symbol-observable/es/ponyfill.js"],"sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\tif (typeof Symbol.for === 'function') {\n\t\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t\t// META: It's a resource locator!\n\t\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\t} else {\n\t\t\t\t// Symbol.for didn't exist! The best we can do at this point is a totally \n\t\t\t\t// unique symbol. Note that the string argument here is a descriptor, not\n\t\t\t\t// an identifier. This symbol is unique.\n\t\t\t\tresult = Symbol('https://github.com/benlesh/symbol-observable');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n"],"mappings":"AAAA,cAAe,SAASA,yBAAT,CAAkCC,IAAlC,CAAwC,CACtD,GAAIC,OAAJ,CACA,GAAIC,OAAM,CAAGF,IAAI,CAACE,MAAlB,CAEA,GAAI,MAAOA,OAAP,GAAkB,UAAtB,CAAkC,CACjC,GAAIA,MAAM,CAACC,UAAX,CAAuB,CACtBF,MAAM,CAAGC,MAAM,CAACC,UAAhB,CACA,CAFD,IAEO,CAEN,GAAI,MAAOD,OAAM,CAACE,GAAd,GAAsB,UAA1B,CAAsC,CACrC;AACA;AACA;AACAH,MAAM,CAAGC,MAAM,CAACE,GAAP,CAAW,8CAAX,CAAT,CACA,CALD,IAKO,CACN;AACA;AACA;AACAH,MAAM,CAAGC,MAAM,CAAC,8CAAD,CAAf,CACA,CACD,GAAI,CACHA,MAAM,CAACC,UAAP,CAAoBF,MAApB,CACA,CAAC,MAAOI,GAAP,CAAY,CACb;AACA;AACA;AACA,CACD,CACD,CAxBD,IAwBO,CACNJ,MAAM,CAAG,cAAT,CACA,CAED,MAAOA,OAAP,CACA"},"metadata":{},"sourceType":"module"}