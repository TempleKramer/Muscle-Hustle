{"ast":null,"code":"import isFinite from\"../polyfills/isFinite.mjs\";import objectValues from\"../polyfills/objectValues.mjs\";import inspect from\"../jsutils/inspect.mjs\";import invariant from\"../jsutils/invariant.mjs\";import isObjectLike from\"../jsutils/isObjectLike.mjs\";import safeArrayFrom from\"../jsutils/safeArrayFrom.mjs\";import{Kind}from\"../language/kinds.mjs\";import{GraphQLID}from\"../type/scalars.mjs\";import{isLeafType,isEnumType,isInputObjectType,isListType,isNonNullType}from\"../type/definition.mjs\";/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */export function astFromValue(value,type){if(isNonNullType(type)){var astValue=astFromValue(value,type.ofType);if((astValue===null||astValue===void 0?void 0:astValue.kind)===Kind.NULL){return null;}return astValue;}// only explicit null, not undefined, NaN\nif(value===null){return{kind:Kind.NULL};}// undefined\nif(value===undefined){return null;}// Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n// the value is not an array, convert the value using the list's item type.\nif(isListType(type)){var itemType=type.ofType;var items=safeArrayFrom(value);if(items!=null){var valuesNodes=[];for(var _i2=0;_i2<items.length;_i2++){var item=items[_i2];var itemNode=astFromValue(item,itemType);if(itemNode!=null){valuesNodes.push(itemNode);}}return{kind:Kind.LIST,values:valuesNodes};}return astFromValue(value,itemType);}// Populate the fields of the input object by creating ASTs from each value\n// in the JavaScript object according to the fields in the input type.\nif(isInputObjectType(type)){if(!isObjectLike(value)){return null;}var fieldNodes=[];for(var _i4=0,_objectValues2=objectValues(type.getFields());_i4<_objectValues2.length;_i4++){var field=_objectValues2[_i4];var fieldValue=astFromValue(value[field.name],field.type);if(fieldValue){fieldNodes.push({kind:Kind.OBJECT_FIELD,name:{kind:Kind.NAME,value:field.name},value:fieldValue});}}return{kind:Kind.OBJECT,fields:fieldNodes};}// istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\nif(isLeafType(type)){// Since value is an internally represented value, it must be serialized\n// to an externally represented value before converting into an AST.\nvar serialized=type.serialize(value);if(serialized==null){return null;}// Others serialize based on their corresponding JavaScript scalar types.\nif(typeof serialized==='boolean'){return{kind:Kind.BOOLEAN,value:serialized};}// JavaScript numbers can be Int or Float values.\nif(typeof serialized==='number'&&isFinite(serialized)){var stringNum=String(serialized);return integerStringRegExp.test(stringNum)?{kind:Kind.INT,value:stringNum}:{kind:Kind.FLOAT,value:stringNum};}if(typeof serialized==='string'){// Enum types use Enum literals.\nif(isEnumType(type)){return{kind:Kind.ENUM,value:serialized};}// ID types can use Int literals.\nif(type===GraphQLID&&integerStringRegExp.test(serialized)){return{kind:Kind.INT,value:serialized};}return{kind:Kind.STRING,value:serialized};}throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized),\".\"));}// istanbul ignore next (Not reachable. All possible input types have been considered)\nfalse||invariant(0,'Unexpected input type: '+inspect(type));}/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */var integerStringRegExp=/^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"names":["isFinite","objectValues","inspect","invariant","isObjectLike","safeArrayFrom","Kind","GraphQLID","isLeafType","isEnumType","isInputObjectType","isListType","isNonNullType","astFromValue","value","type","astValue","ofType","kind","NULL","undefined","itemType","items","valuesNodes","_i2","length","item","itemNode","push","LIST","values","fieldNodes","_i4","_objectValues2","getFields","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/astFromValue.mjs"],"sourcesContent":["import isFinite from \"../polyfills/isFinite.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var items = safeArrayFrom(value);\n\n    if (items != null) {\n      var valuesNodes = [];\n\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var item = items[_i2];\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number' && isFinite(serialized)) {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized), \".\"));\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}