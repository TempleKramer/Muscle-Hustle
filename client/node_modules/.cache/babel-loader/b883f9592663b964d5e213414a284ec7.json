{"ast":null,"code":"import{Source,isSource}from\"../language/source.mjs\";import{TokenKind}from\"../language/tokenKind.mjs\";import{Lexer,isPunctuatorTokenKind}from\"../language/lexer.mjs\";import{dedentBlockStringValue,getBlockStringIndentation}from\"../language/blockString.mjs\";/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n *\n * Becomes:\n *\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n *\n * SDL example:\n *\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n *\n * Becomes:\n *\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n */export function stripIgnoredCharacters(source){var sourceObj=isSource(source)?source:new Source(source);var body=sourceObj.body;var lexer=new Lexer(sourceObj);var strippedBody='';var wasLastAddedTokenNonPunctuator=false;while(lexer.advance().kind!==TokenKind.EOF){var currentToken=lexer.token;var tokenKind=currentToken.kind;/**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */var isNonPunctuator=!isPunctuatorTokenKind(currentToken.kind);if(wasLastAddedTokenNonPunctuator){if(isNonPunctuator||currentToken.kind===TokenKind.SPREAD){strippedBody+=' ';}}var tokenBody=body.slice(currentToken.start,currentToken.end);if(tokenKind===TokenKind.BLOCK_STRING){strippedBody+=dedentBlockString(tokenBody);}else{strippedBody+=tokenBody;}wasLastAddedTokenNonPunctuator=isNonPunctuator;}return strippedBody;}function dedentBlockString(blockStr){// skip leading and trailing triple quotations\nvar rawStr=blockStr.slice(3,-3);var body=dedentBlockStringValue(rawStr);if(getBlockStringIndentation(body)>0){body='\\n'+body;}var lastChar=body[body.length-1];var hasTrailingQuote=lastChar==='\"'&&body.slice(-4)!=='\\\\\"\"\"';if(hasTrailingQuote||lastChar==='\\\\'){body+='\\n';}return'\"\"\"'+body+'\"\"\"';}","map":{"version":3,"names":["Source","isSource","TokenKind","Lexer","isPunctuatorTokenKind","dedentBlockStringValue","getBlockStringIndentation","stripIgnoredCharacters","source","sourceObj","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","dedentBlockString","blockStr","rawStr","lastChar","length","hasTrailingQuote"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"sourcesContent":["import { Source, isSource } from \"../language/source.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"../language/lexer.mjs\";\nimport { dedentBlockStringValue, getBlockStringIndentation } from \"../language/blockString.mjs\";\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n *\n * Becomes:\n *\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n *\n * SDL example:\n *\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n *\n * Becomes:\n *\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n */\n\nexport function stripIgnoredCharacters(source) {\n  var sourceObj = isSource(source) ? source : new Source(source);\n  var body = sourceObj.body;\n  var lexer = new Lexer(sourceObj);\n  var strippedBody = '';\n  var wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    var currentToken = lexer.token;\n    var tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    var isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  var rawStr = blockStr.slice(3, -3);\n  var body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  var lastChar = body[body.length - 1];\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\n\n  if (hasTrailingQuote || lastChar === '\\\\') {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}\n"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,QAAjB,KAAiC,wBAAjC,CACA,OAASC,SAAT,KAA0B,2BAA1B,CACA,OAASC,KAAT,CAAgBC,qBAAhB,KAA6C,uBAA7C,CACA,OAASC,sBAAT,CAAiCC,yBAAjC,KAAkE,6BAAlE,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,uBAAT,CAAgCC,MAAhC,CAAwC,CAC7C,GAAIC,UAAS,CAAGR,QAAQ,CAACO,MAAD,CAAR,CAAmBA,MAAnB,CAA4B,GAAIR,OAAJ,CAAWQ,MAAX,CAA5C,CACA,GAAIE,KAAI,CAAGD,SAAS,CAACC,IAArB,CACA,GAAIC,MAAK,CAAG,GAAIR,MAAJ,CAAUM,SAAV,CAAZ,CACA,GAAIG,aAAY,CAAG,EAAnB,CACA,GAAIC,+BAA8B,CAAG,KAArC,CAEA,MAAOF,KAAK,CAACG,OAAN,GAAgBC,IAAhB,GAAyBb,SAAS,CAACc,GAA1C,CAA+C,CAC7C,GAAIC,aAAY,CAAGN,KAAK,CAACO,KAAzB,CACA,GAAIC,UAAS,CAAGF,YAAY,CAACF,IAA7B,CACA;AACJ;AACA;AACA;AACA,OAEI,GAAIK,gBAAe,CAAG,CAAChB,qBAAqB,CAACa,YAAY,CAACF,IAAd,CAA5C,CAEA,GAAIF,8BAAJ,CAAoC,CAClC,GAAIO,eAAe,EAAIH,YAAY,CAACF,IAAb,GAAsBb,SAAS,CAACmB,MAAvD,CAA+D,CAC7DT,YAAY,EAAI,GAAhB,CACD,CACF,CAED,GAAIU,UAAS,CAAGZ,IAAI,CAACa,KAAL,CAAWN,YAAY,CAACO,KAAxB,CAA+BP,YAAY,CAACQ,GAA5C,CAAhB,CAEA,GAAIN,SAAS,GAAKjB,SAAS,CAACwB,YAA5B,CAA0C,CACxCd,YAAY,EAAIe,iBAAiB,CAACL,SAAD,CAAjC,CACD,CAFD,IAEO,CACLV,YAAY,EAAIU,SAAhB,CACD,CAEDT,8BAA8B,CAAGO,eAAjC,CACD,CAED,MAAOR,aAAP,CACD,CAED,QAASe,kBAAT,CAA2BC,QAA3B,CAAqC,CACnC;AACA,GAAIC,OAAM,CAAGD,QAAQ,CAACL,KAAT,CAAe,CAAf,CAAkB,CAAC,CAAnB,CAAb,CACA,GAAIb,KAAI,CAAGL,sBAAsB,CAACwB,MAAD,CAAjC,CAEA,GAAIvB,yBAAyB,CAACI,IAAD,CAAzB,CAAkC,CAAtC,CAAyC,CACvCA,IAAI,CAAG,KAAOA,IAAd,CACD,CAED,GAAIoB,SAAQ,CAAGpB,IAAI,CAACA,IAAI,CAACqB,MAAL,CAAc,CAAf,CAAnB,CACA,GAAIC,iBAAgB,CAAGF,QAAQ,GAAK,GAAb,EAAoBpB,IAAI,CAACa,KAAL,CAAW,CAAC,CAAZ,IAAmB,OAA9D,CAEA,GAAIS,gBAAgB,EAAIF,QAAQ,GAAK,IAArC,CAA2C,CACzCpB,IAAI,EAAI,IAAR,CACD,CAED,MAAO,MAAQA,IAAR,CAAe,KAAtB,CACD"},"metadata":{},"sourceType":"module"}