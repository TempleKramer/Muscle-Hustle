{"ast":null,"code":"import{__assign,__spreadArray}from\"tslib\";import{visit}from\"graphql\";import{wrap}from\"optimism\";import{getFragmentDefinitions}from\"../../utilities/index.js\";export function createFragmentRegistry(){var fragments=[];for(var _i=0;_i<arguments.length;_i++){fragments[_i]=arguments[_i];}return new(FragmentRegistry.bind.apply(FragmentRegistry,__spreadArray([void 0],fragments,false)))();}var arrayLikeForEach=Array.prototype.forEach;var FragmentRegistry=function(){function FragmentRegistry(){var fragments=[];for(var _i=0;_i<arguments.length;_i++){fragments[_i]=arguments[_i];}this.registry=Object.create(null);this.resetCaches();if(fragments.length){this.register.apply(this,fragments);}}FragmentRegistry.prototype.register=function(){var _this=this;var definitions=new Map();arrayLikeForEach.call(arguments,function(doc){getFragmentDefinitions(doc).forEach(function(node){definitions.set(node.name.value,node);});});definitions.forEach(function(node,name){if(node!==_this.registry[name]){_this.registry[name]=node;_this.invalidate(name);}});return this;};FragmentRegistry.prototype.invalidate=function(name){};FragmentRegistry.prototype.resetCaches=function(){this.invalidate=(this.lookup=this.cacheUnaryMethod(\"lookup\")).dirty;this.transform=this.cacheUnaryMethod(\"transform\");this.findFragmentSpreads=this.cacheUnaryMethod(\"findFragmentSpreads\");};FragmentRegistry.prototype.cacheUnaryMethod=function(name){var registry=this;var originalMethod=FragmentRegistry.prototype[name];return wrap(function(){return originalMethod.apply(registry,arguments);},{makeCacheKey:function makeCacheKey(arg){return arg;}});};FragmentRegistry.prototype.lookup=function(fragmentName){return this.registry[fragmentName]||null;};FragmentRegistry.prototype.transform=function(document){var _this=this;var defined=new Map();getFragmentDefinitions(document).forEach(function(def){defined.set(def.name.value,def);});var unbound=new Set();var enqueue=function enqueue(spreadName){if(!defined.has(spreadName)){unbound.add(spreadName);}};var enqueueChildSpreads=function enqueueChildSpreads(node){return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);};enqueueChildSpreads(document);var missing=[];var map=Object.create(null);unbound.forEach(function(fragmentName){var knownFragmentDef=defined.get(fragmentName);if(knownFragmentDef){enqueueChildSpreads(map[fragmentName]=knownFragmentDef);}else{missing.push(fragmentName);var def=_this.lookup(fragmentName);if(def){enqueueChildSpreads(map[fragmentName]=def);}}});if(missing.length){var defsToAppend_1=[];missing.forEach(function(name){var def=map[name];if(def){defsToAppend_1.push(def);}});if(defsToAppend_1.length){document=__assign(__assign({},document),{definitions:document.definitions.concat(defsToAppend_1)});}}return document;};FragmentRegistry.prototype.findFragmentSpreads=function(root){var spreads=Object.create(null);visit(root,{FragmentSpread:function FragmentSpread(node){spreads[node.name.value]=node;}});return spreads;};return FragmentRegistry;}();","map":{"version":3,"mappings":"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","names":["visit","wrap","getFragmentDefinitions","createFragmentRegistry","fragments","FragmentRegistry","apply","__spreadArray","arrayLikeForEach","Array","prototype","forEach","Object","create","resetCaches","length","register","definitions","Map","call","arguments","doc","set","node","name","value","_this","registry","invalidate","lookup","cacheUnaryMethod","dirty","transform","findFragmentSpreads","originalMethod","makeCacheKey","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","keys","missing","map","knownFragmentDef","get","push","defsToAppend_1","concat","root","spreads","FragmentSpread"],"sourceRoot":"","sources":["../../../src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  visit,\n} from \"graphql\";\n\nimport { wrap } from \"optimism\";\n\nimport { FragmentMap, getFragmentDefinitions } from \"../../utilities\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nconst { forEach: arrayLikeForEach } = Array.prototype;\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call static method FragmentRegistry.from(...) instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  public register(): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    arrayLikeForEach.call(arguments, (doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach(node => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    this.invalidate = (\n      this.lookup = this.cacheUnaryMethod(\"lookup\")\n    ).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(\"transform\");\n    this.findFragmentSpreads = this.cacheUnaryMethod(\"findFragmentSpreads\");\n  }\n\n  private cacheUnaryMethod<TName extends keyof Pick<FragmentRegistry,\n    | \"lookup\"\n    | \"transform\"\n    | \"findFragmentSpreads\"\n  >>(name: TName) {\n    const registry = this;\n    const originalMethod = FragmentRegistry.prototype[name];\n    return wrap(function () {\n      return originalMethod.apply(registry, arguments);\n    }, {\n      makeCacheKey: arg => arg,\n    });\n  }\n\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach(def => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) => Object.keys(\n      this.findFragmentSpreads(node)\n    ).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach(fragmentName => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach(name => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"]},"metadata":{},"sourceType":"module"}