{"ast":null,"code":"var toString=Object.prototype.toString;export function cloneDeep(value){return cloneDeepHelper(value);}function cloneDeepHelper(val,seen){switch(toString.call(val)){case\"[object Array]\":{seen=seen||new Map();if(seen.has(val))return seen.get(val);var copy_1=val.slice(0);seen.set(val,copy_1);copy_1.forEach(function(child,i){copy_1[i]=cloneDeepHelper(child,seen);});return copy_1;}case\"[object Object]\":{seen=seen||new Map();if(seen.has(val))return seen.get(val);var copy_2=Object.create(Object.getPrototypeOf(val));seen.set(val,copy_2);Object.keys(val).forEach(function(key){copy_2[key]=cloneDeepHelper(val[key],seen);});return copy_2;}default:return val;}}","map":{"version":3,"mappings":"AAAQ,YAAQ,CAAKA,MAAM,CAACC,SAAP,CAAgBC,QAA7B,CAKR,MAAM,SAAUC,UAAV,CAAuBC,KAAvB,CAA+B,CACnC,MAAOC,gBAAe,CAACD,KAAD,CAAtB,CACD,CAED,QAASC,gBAAT,CAA4BC,GAA5B,CAAoCC,IAApC,CAAwD,CACtD,OAAQL,QAAQ,CAACM,IAAT,CAAcF,GAAd,CAAR,EACA,IAAK,gBAAL,CAAuB,CACrBC,IAAI,CAAGA,IAAI,EAAI,GAAIE,IAAJ,EAAf,CACA,GAAIF,IAAI,CAACG,GAAL,CAASJ,GAAT,CAAJ,CAAmB,MAAOC,KAAI,CAACI,GAAL,CAASL,GAAT,CAAP,CACnB,GAAMM,OAAI,CAAeN,GAAW,CAACO,KAAZ,CAAkB,CAAlB,CAAzB,CACAN,IAAI,CAACO,GAAL,CAASR,GAAT,CAAcM,MAAd,EACAA,MAAI,CAACG,OAAL,CAAa,SAAUC,KAAV,CAAiBC,CAAjB,CAAkB,CAC7BL,MAAI,CAACK,CAAD,CAAJ,CAAUZ,eAAe,CAACW,KAAD,CAAQT,IAAR,CAAzB,CACD,CAFD,EAGA,MAAOK,OAAP,CACD,CAED,IAAK,iBAAL,CAAwB,CACtBL,IAAI,CAAGA,IAAI,EAAI,GAAIE,IAAJ,EAAf,CACA,GAAIF,IAAI,CAACG,GAAL,CAASJ,GAAT,CAAJ,CAAmB,MAAOC,KAAI,CAACI,GAAL,CAASL,GAAT,CAAP,CAGnB,GAAMY,OAAI,CAAGlB,MAAM,CAACmB,MAAP,CAAcnB,MAAM,CAACoB,cAAP,CAAsBd,GAAtB,CAAd,CAAb,CACAC,IAAI,CAACO,GAAL,CAASR,GAAT,CAAcY,MAAd,EACAlB,MAAM,CAACqB,IAAP,CAAYf,GAAZ,EAAiBS,OAAjB,CAAyB,aAAG,CAC1BG,MAAI,CAACI,GAAD,CAAJ,CAAYjB,eAAe,CAAEC,GAAW,CAACgB,GAAD,CAAb,CAAoBf,IAApB,CAA3B,CACD,CAFD,EAGA,MAAOW,OAAP,CACD,CAED,QACE,MAAOZ,IAAP,CA1BF,CA4BD","names":["Object","prototype","toString","cloneDeep","value","cloneDeepHelper","val","seen","call","Map","has","get","copy_1","slice","set","forEach","child","i","copy_2","create","getPrototypeOf","keys","key"],"sourceRoot":"","sources":["../../../src/utilities/common/cloneDeep.ts"],"sourcesContent":["const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}