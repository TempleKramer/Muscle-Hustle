{"ast":null,"code":"import inspect from\"../jsutils/inspect.mjs\";import{isNode}from\"./ast.mjs\";/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */export var QueryDocumentKeys={Name:[],Document:['definitions'],OperationDefinition:['name','variableDefinitions','directives','selectionSet'],VariableDefinition:['variable','type','defaultValue','directives'],Variable:['name'],SelectionSet:['selections'],Field:['alias','name','arguments','directives','selectionSet'],Argument:['name','value'],FragmentSpread:['name','directives'],InlineFragment:['typeCondition','directives','selectionSet'],FragmentDefinition:['name',// Note: fragment variable definitions are experimental and may be changed\n// or removed in the future.\n'variableDefinitions','typeCondition','directives','selectionSet'],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:['values'],ObjectValue:['fields'],ObjectField:['name','value'],Directive:['name','arguments'],NamedType:['name'],ListType:['type'],NonNullType:['type'],SchemaDefinition:['description','directives','operationTypes'],OperationTypeDefinition:['type'],ScalarTypeDefinition:['description','name','directives'],ObjectTypeDefinition:['description','name','interfaces','directives','fields'],FieldDefinition:['description','name','arguments','type','directives'],InputValueDefinition:['description','name','type','defaultValue','directives'],InterfaceTypeDefinition:['description','name','interfaces','directives','fields'],UnionTypeDefinition:['description','name','directives','types'],EnumTypeDefinition:['description','name','directives','values'],EnumValueDefinition:['description','name','directives'],InputObjectTypeDefinition:['description','name','directives','fields'],DirectiveDefinition:['description','name','arguments','locations'],SchemaExtension:['directives','operationTypes'],ScalarTypeExtension:['name','directives'],ObjectTypeExtension:['name','interfaces','directives','fields'],InterfaceTypeExtension:['name','interfaces','directives','fields'],UnionTypeExtension:['name','directives','types'],EnumTypeExtension:['name','directives','values'],InputObjectTypeExtension:['name','directives','fields']};export var BREAK=Object.freeze({});/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */export function visit(root,visitor){var visitorKeys=arguments.length>2&&arguments[2]!==undefined?arguments[2]:QueryDocumentKeys;/* eslint-disable no-undef-init */var stack=undefined;var inArray=Array.isArray(root);var keys=[root];var index=-1;var edits=[];var node=undefined;var key=undefined;var parent=undefined;var path=[];var ancestors=[];var newRoot=root;/* eslint-enable no-undef-init */do{index++;var isLeaving=index===keys.length;var isEdited=isLeaving&&edits.length!==0;if(isLeaving){key=ancestors.length===0?undefined:path[path.length-1];node=parent;parent=ancestors.pop();if(isEdited){if(inArray){node=node.slice();}else{var clone={};for(var _i2=0,_Object$keys2=Object.keys(node);_i2<_Object$keys2.length;_i2++){var k=_Object$keys2[_i2];clone[k]=node[k];}node=clone;}var editOffset=0;for(var ii=0;ii<edits.length;ii++){var editKey=edits[ii][0];var editValue=edits[ii][1];if(inArray){editKey-=editOffset;}if(inArray&&editValue===null){node.splice(editKey,1);editOffset++;}else{node[editKey]=editValue;}}}index=stack.index;keys=stack.keys;edits=stack.edits;inArray=stack.inArray;stack=stack.prev;}else{key=parent?inArray?index:keys[index]:undefined;node=parent?parent[key]:newRoot;if(node===null||node===undefined){continue;}if(parent){path.push(key);}}var result=void 0;if(!Array.isArray(node)){if(!isNode(node)){throw new Error(\"Invalid AST Node: \".concat(inspect(node),\".\"));}var visitFn=getVisitFn(visitor,node.kind,isLeaving);if(visitFn){result=visitFn.call(visitor,node,key,parent,path,ancestors);if(result===BREAK){break;}if(result===false){if(!isLeaving){path.pop();continue;}}else if(result!==undefined){edits.push([key,result]);if(!isLeaving){if(isNode(result)){node=result;}else{path.pop();continue;}}}}}if(result===undefined&&isEdited){edits.push([key,node]);}if(isLeaving){path.pop();}else{var _visitorKeys$node$kin;stack={inArray:inArray,index:index,keys:keys,edits:edits,prev:stack};inArray=Array.isArray(node);keys=inArray?node:(_visitorKeys$node$kin=visitorKeys[node.kind])!==null&&_visitorKeys$node$kin!==void 0?_visitorKeys$node$kin:[];index=-1;edits=[];if(parent){ancestors.push(parent);}parent=node;}}while(stack!==undefined);if(edits.length!==0){newRoot=edits[edits.length-1][1];}return newRoot;}/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */export function visitInParallel(visitors){var skipping=new Array(visitors.length);return{enter:function enter(node){for(var i=0;i<visitors.length;i++){if(skipping[i]==null){var fn=getVisitFn(visitors[i],node.kind,/* isLeaving */false);if(fn){var result=fn.apply(visitors[i],arguments);if(result===false){skipping[i]=node;}else if(result===BREAK){skipping[i]=BREAK;}else if(result!==undefined){return result;}}}}},leave:function leave(node){for(var i=0;i<visitors.length;i++){if(skipping[i]==null){var fn=getVisitFn(visitors[i],node.kind,/* isLeaving */true);if(fn){var result=fn.apply(visitors[i],arguments);if(result===BREAK){skipping[i]=BREAK;}else if(result!==undefined&&result!==false){return result;}}}else if(skipping[i]===node){skipping[i]=null;}}}};}/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */export function getVisitFn(visitor,kind,isLeaving){var kindVisitor=visitor[kind];if(kindVisitor){if(!isLeaving&&typeof kindVisitor==='function'){// { Kind() {} }\nreturn kindVisitor;}var kindSpecificVisitor=isLeaving?kindVisitor.leave:kindVisitor.enter;if(typeof kindSpecificVisitor==='function'){// { Kind: { enter() {}, leave() {} } }\nreturn kindSpecificVisitor;}}else{var specificVisitor=isLeaving?visitor.leave:visitor.enter;if(specificVisitor){if(typeof specificVisitor==='function'){// { enter() {}, leave() {} }\nreturn specificVisitor;}var specificKindVisitor=specificVisitor[kind];if(typeof specificKindVisitor==='function'){// { enter: { Kind() {} }, leave: { Kind() {} } }\nreturn specificKindVisitor;}}}}","map":{"version":3,"names":["inspect","isNode","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","Object","freeze","visit","root","visitor","visitorKeys","arguments","length","undefined","stack","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","newRoot","isLeaving","isEdited","pop","slice","clone","_i2","_Object$keys2","k","editOffset","ii","editKey","editValue","splice","prev","push","result","Error","concat","visitFn","getVisitFn","kind","call","_visitorKeys$node$kin","visitInParallel","visitors","skipping","enter","i","fn","apply","leave","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/language/visitor.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport { isNode } from \"./ast.mjs\";\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(\"Invalid AST Node: \".concat(inspect(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}