{"ast":null,"code":"import inspect from\"../jsutils/inspect.mjs\";import memoize3 from\"../jsutils/memoize3.mjs\";import invariant from\"../jsutils/invariant.mjs\";import devAssert from\"../jsutils/devAssert.mjs\";import isPromise from\"../jsutils/isPromise.mjs\";import isObjectLike from\"../jsutils/isObjectLike.mjs\";import safeArrayFrom from\"../jsutils/safeArrayFrom.mjs\";import promiseReduce from\"../jsutils/promiseReduce.mjs\";import promiseForObject from\"../jsutils/promiseForObject.mjs\";import{addPath,pathToArray}from\"../jsutils/Path.mjs\";import{GraphQLError}from\"../error/GraphQLError.mjs\";import{locatedError}from\"../error/locatedError.mjs\";import{Kind}from\"../language/kinds.mjs\";import{assertValidSchema}from\"../type/validate.mjs\";import{SchemaMetaFieldDef,TypeMetaFieldDef,TypeNameMetaFieldDef}from\"../type/introspection.mjs\";import{GraphQLIncludeDirective,GraphQLSkipDirective}from\"../type/directives.mjs\";import{isNamedType,isObjectType,isAbstractType,isLeafType,isListType,isNonNullType}from\"../type/definition.mjs\";import{typeFromAST}from\"../utilities/typeFromAST.mjs\";import{getOperationRootType}from\"../utilities/getOperationRootType.mjs\";import{getVariableValues,getArgumentValues,getDirectiveValues}from\"./values.mjs\";/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */ /**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */export function execute(argsOrSchema,document,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver){/* eslint-enable no-redeclare */ // Extract arguments from object args if provided.\nreturn arguments.length===1?executeImpl(argsOrSchema):executeImpl({schema:argsOrSchema,document:document,rootValue:rootValue,contextValue:contextValue,variableValues:variableValues,operationName:operationName,fieldResolver:fieldResolver,typeResolver:typeResolver});}/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */export function executeSync(args){var result=executeImpl(args);// Assert that the execution was synchronous.\nif(isPromise(result)){throw new Error('GraphQL execution failed to complete synchronously.');}return result;}function executeImpl(args){var schema=args.schema,document=args.document,rootValue=args.rootValue,contextValue=args.contextValue,variableValues=args.variableValues,operationName=args.operationName,fieldResolver=args.fieldResolver,typeResolver=args.typeResolver;// If arguments are missing or incorrect, throw an error.\nassertValidExecutionArguments(schema,document,variableValues);// If a valid execution context cannot be created due to incorrect arguments,\n// a \"Response\" with only errors is returned.\nvar exeContext=buildExecutionContext(schema,document,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver);// Return early errors if execution context failed.\nif(Array.isArray(exeContext)){return{errors:exeContext};}// Return a Promise that will eventually resolve to the data described by\n// The \"Response\" section of the GraphQL specification.\n//\n// If errors are encountered while executing a GraphQL field, only that\n// field and its descendants will be omitted, and sibling fields will still\n// be executed. An execution which encounters errors will still result in a\n// resolved Promise.\nvar data=executeOperation(exeContext,exeContext.operation,rootValue);return buildResponse(exeContext,data);}/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */function buildResponse(exeContext,data){if(isPromise(data)){return data.then(function(resolved){return buildResponse(exeContext,resolved);});}return exeContext.errors.length===0?{data:data}:{errors:exeContext.errors,data:data};}/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */export function assertValidExecutionArguments(schema,document,rawVariableValues){document||devAssert(0,'Must provide document.');// If the schema used for execution is invalid, throw an error.\nassertValidSchema(schema);// Variables, if provided, must be an object.\nrawVariableValues==null||isObjectLike(rawVariableValues)||devAssert(0,'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');}/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */export function buildExecutionContext(schema,document,rootValue,contextValue,rawVariableValues,operationName,fieldResolver,typeResolver){var _definition$name,_operation$variableDe;var operation;var fragments=Object.create(null);for(var _i2=0,_document$definitions2=document.definitions;_i2<_document$definitions2.length;_i2++){var definition=_document$definitions2[_i2];switch(definition.kind){case Kind.OPERATION_DEFINITION:if(operationName==null){if(operation!==undefined){return[new GraphQLError('Must provide operation name if query contains multiple operations.')];}operation=definition;}else if(((_definition$name=definition.name)===null||_definition$name===void 0?void 0:_definition$name.value)===operationName){operation=definition;}break;case Kind.FRAGMENT_DEFINITION:fragments[definition.name.value]=definition;break;}}if(!operation){if(operationName!=null){return[new GraphQLError(\"Unknown operation named \\\"\".concat(operationName,\"\\\".\"))];}return[new GraphQLError('Must provide an operation.')];}// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar variableDefinitions=(_operation$variableDe=operation.variableDefinitions)!==null&&_operation$variableDe!==void 0?_operation$variableDe:[];var coercedVariableValues=getVariableValues(schema,variableDefinitions,rawVariableValues!==null&&rawVariableValues!==void 0?rawVariableValues:{},{maxErrors:50});if(coercedVariableValues.errors){return coercedVariableValues.errors;}return{schema:schema,fragments:fragments,rootValue:rootValue,contextValue:contextValue,operation:operation,variableValues:coercedVariableValues.coerced,fieldResolver:fieldResolver!==null&&fieldResolver!==void 0?fieldResolver:defaultFieldResolver,typeResolver:typeResolver!==null&&typeResolver!==void 0?typeResolver:defaultTypeResolver,errors:[]};}/**\n * Implements the \"Evaluating operations\" section of the spec.\n */function executeOperation(exeContext,operation,rootValue){var type=getOperationRootType(exeContext.schema,operation);var fields=collectFields(exeContext,type,operation.selectionSet,Object.create(null),Object.create(null));var path=undefined;// Errors from sub-fields of a NonNull type may propagate to the top level,\n// at which point we still log the error and null the parent field, which\n// in this case is the entire response.\ntry{var result=operation.operation==='mutation'?executeFieldsSerially(exeContext,type,rootValue,path,fields):executeFields(exeContext,type,rootValue,path,fields);if(isPromise(result)){return result.then(undefined,function(error){exeContext.errors.push(error);return Promise.resolve(null);});}return result;}catch(error){exeContext.errors.push(error);return null;}}/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */function executeFieldsSerially(exeContext,parentType,sourceValue,path,fields){return promiseReduce(Object.keys(fields),function(results,responseName){var fieldNodes=fields[responseName];var fieldPath=addPath(path,responseName,parentType.name);var result=resolveField(exeContext,parentType,sourceValue,fieldNodes,fieldPath);if(result===undefined){return results;}if(isPromise(result)){return result.then(function(resolvedResult){results[responseName]=resolvedResult;return results;});}results[responseName]=result;return results;},Object.create(null));}/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */function executeFields(exeContext,parentType,sourceValue,path,fields){var results=Object.create(null);var containsPromise=false;for(var _i4=0,_Object$keys2=Object.keys(fields);_i4<_Object$keys2.length;_i4++){var responseName=_Object$keys2[_i4];var fieldNodes=fields[responseName];var fieldPath=addPath(path,responseName,parentType.name);var result=resolveField(exeContext,parentType,sourceValue,fieldNodes,fieldPath);if(result!==undefined){results[responseName]=result;if(isPromise(result)){containsPromise=true;}}}// If there are no promises, we can just return the object\nif(!containsPromise){return results;}// Otherwise, results is a map from field name to the result of resolving that\n// field, which is possibly a promise. Return a promise that will return this\n// same map, but with any promises replaced with the values they resolved to.\nreturn promiseForObject(results);}/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */export function collectFields(exeContext,runtimeType,selectionSet,fields,visitedFragmentNames){for(var _i6=0,_selectionSet$selecti2=selectionSet.selections;_i6<_selectionSet$selecti2.length;_i6++){var selection=_selectionSet$selecti2[_i6];switch(selection.kind){case Kind.FIELD:{if(!shouldIncludeNode(exeContext,selection)){continue;}var name=getFieldEntryKey(selection);if(!fields[name]){fields[name]=[];}fields[name].push(selection);break;}case Kind.INLINE_FRAGMENT:{if(!shouldIncludeNode(exeContext,selection)||!doesFragmentConditionMatch(exeContext,selection,runtimeType)){continue;}collectFields(exeContext,runtimeType,selection.selectionSet,fields,visitedFragmentNames);break;}case Kind.FRAGMENT_SPREAD:{var fragName=selection.name.value;if(visitedFragmentNames[fragName]||!shouldIncludeNode(exeContext,selection)){continue;}visitedFragmentNames[fragName]=true;var fragment=exeContext.fragments[fragName];if(!fragment||!doesFragmentConditionMatch(exeContext,fragment,runtimeType)){continue;}collectFields(exeContext,runtimeType,fragment.selectionSet,fields,visitedFragmentNames);break;}}}return fields;}/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */function shouldIncludeNode(exeContext,node){var skip=getDirectiveValues(GraphQLSkipDirective,node,exeContext.variableValues);if((skip===null||skip===void 0?void 0:skip.if)===true){return false;}var include=getDirectiveValues(GraphQLIncludeDirective,node,exeContext.variableValues);if((include===null||include===void 0?void 0:include.if)===false){return false;}return true;}/**\n * Determines if a fragment is applicable to the given type.\n */function doesFragmentConditionMatch(exeContext,fragment,type){var typeConditionNode=fragment.typeCondition;if(!typeConditionNode){return true;}var conditionalType=typeFromAST(exeContext.schema,typeConditionNode);if(conditionalType===type){return true;}if(isAbstractType(conditionalType)){return exeContext.schema.isSubType(conditionalType,type);}return false;}/**\n * Implements the logic to compute the key of a given field's entry\n */function getFieldEntryKey(node){return node.alias?node.alias.value:node.name.value;}/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */function resolveField(exeContext,parentType,source,fieldNodes,path){var _fieldDef$resolve;var fieldNode=fieldNodes[0];var fieldName=fieldNode.name.value;var fieldDef=getFieldDef(exeContext.schema,parentType,fieldName);if(!fieldDef){return;}var returnType=fieldDef.type;var resolveFn=(_fieldDef$resolve=fieldDef.resolve)!==null&&_fieldDef$resolve!==void 0?_fieldDef$resolve:exeContext.fieldResolver;var info=buildResolveInfo(exeContext,fieldDef,fieldNodes,parentType,path);// Get the resolve function, regardless of if its result is normal or abrupt (error).\ntry{// Build a JS object of arguments from the field.arguments AST, using the\n// variables scope to fulfill any variable references.\n// TODO: find a way to memoize, in case this field is within a List type.\nvar args=getArgumentValues(fieldDef,fieldNodes[0],exeContext.variableValues);// The resolve function's optional third argument is a context value that\n// is provided to every resolve function within an execution. It is commonly\n// used to represent an authenticated user, or request-specific caches.\nvar _contextValue=exeContext.contextValue;var result=resolveFn(source,args,_contextValue,info);var completed;if(isPromise(result)){completed=result.then(function(resolved){return completeValue(exeContext,returnType,fieldNodes,info,path,resolved);});}else{completed=completeValue(exeContext,returnType,fieldNodes,info,path,result);}if(isPromise(completed)){// Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n// to take a second callback for the error case.\nreturn completed.then(undefined,function(rawError){var error=locatedError(rawError,fieldNodes,pathToArray(path));return handleFieldError(error,returnType,exeContext);});}return completed;}catch(rawError){var error=locatedError(rawError,fieldNodes,pathToArray(path));return handleFieldError(error,returnType,exeContext);}}/**\n * @internal\n */export function buildResolveInfo(exeContext,fieldDef,fieldNodes,parentType,path){// The resolve function's optional fourth argument is a collection of\n// information about the current execution state.\nreturn{fieldName:fieldDef.name,fieldNodes:fieldNodes,returnType:fieldDef.type,parentType:parentType,path:path,schema:exeContext.schema,fragments:exeContext.fragments,rootValue:exeContext.rootValue,operation:exeContext.operation,variableValues:exeContext.variableValues};}function handleFieldError(error,returnType,exeContext){// If the field type is non-nullable, then it is resolved without any\n// protection from errors, however it still properly locates the error.\nif(isNonNullType(returnType)){throw error;}// Otherwise, error protection is applied, logging the error and resolving\n// a null value for this field if one is encountered.\nexeContext.errors.push(error);return null;}/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */function completeValue(exeContext,returnType,fieldNodes,info,path,result){// If result is an Error, throw a located error.\nif(result instanceof Error){throw result;}// If field type is NonNull, complete for inner type, and throw field error\n// if result is null.\nif(isNonNullType(returnType)){var completed=completeValue(exeContext,returnType.ofType,fieldNodes,info,path,result);if(completed===null){throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name,\".\").concat(info.fieldName,\".\"));}return completed;}// If result value is null or undefined then return null.\nif(result==null){return null;}// If field type is List, complete each item in the list with the inner type\nif(isListType(returnType)){return completeListValue(exeContext,returnType,fieldNodes,info,path,result);}// If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n// returning null if serialization is not possible.\nif(isLeafType(returnType)){return completeLeafValue(returnType,result);}// If field type is an abstract type, Interface or Union, determine the\n// runtime Object type and complete for that type.\nif(isAbstractType(returnType)){return completeAbstractValue(exeContext,returnType,fieldNodes,info,path,result);}// If field type is Object, execute and complete all sub-selections.\n// istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\nif(isObjectType(returnType)){return completeObjectValue(exeContext,returnType,fieldNodes,info,path,result);}// istanbul ignore next (Not reachable. All possible output types have been considered)\nfalse||invariant(0,'Cannot complete value of unexpected output type: '+inspect(returnType));}/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */function completeListValue(exeContext,returnType,fieldNodes,info,path,result){// This is specified as a simple map, however we're optimizing the path\n// where the list contains no Promises by avoiding creating another Promise.\nvar itemType=returnType.ofType;var containsPromise=false;var completedResults=safeArrayFrom(result,function(item,index){// No need to modify the info object containing the path,\n// since from here on it is not ever accessed by resolver functions.\nvar itemPath=addPath(path,index,undefined);try{var completedItem;if(isPromise(item)){completedItem=item.then(function(resolved){return completeValue(exeContext,itemType,fieldNodes,info,itemPath,resolved);});}else{completedItem=completeValue(exeContext,itemType,fieldNodes,info,itemPath,item);}if(isPromise(completedItem)){containsPromise=true;// Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n// to take a second callback for the error case.\nreturn completedItem.then(undefined,function(rawError){var error=locatedError(rawError,fieldNodes,pathToArray(itemPath));return handleFieldError(error,itemType,exeContext);});}return completedItem;}catch(rawError){var error=locatedError(rawError,fieldNodes,pathToArray(itemPath));return handleFieldError(error,itemType,exeContext);}});if(completedResults==null){throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name,\".\").concat(info.fieldName,\"\\\".\"));}return containsPromise?Promise.all(completedResults):completedResults;}/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */function completeLeafValue(returnType,result){var serializedResult=returnType.serialize(result);if(serializedResult===undefined){throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType),\"\\\" but \")+\"received: \".concat(inspect(result)));}return serializedResult;}/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */function completeAbstractValue(exeContext,returnType,fieldNodes,info,path,result){var _returnType$resolveTy;var resolveTypeFn=(_returnType$resolveTy=returnType.resolveType)!==null&&_returnType$resolveTy!==void 0?_returnType$resolveTy:exeContext.typeResolver;var contextValue=exeContext.contextValue;var runtimeType=resolveTypeFn(result,contextValue,info,returnType);if(isPromise(runtimeType)){return runtimeType.then(function(resolvedRuntimeType){return completeObjectValue(exeContext,ensureValidRuntimeType(resolvedRuntimeType,exeContext,returnType,fieldNodes,info,result),fieldNodes,info,path,result);});}return completeObjectValue(exeContext,ensureValidRuntimeType(runtimeType,exeContext,returnType,fieldNodes,info,result),fieldNodes,info,path,result);}function ensureValidRuntimeType(runtimeTypeOrName,exeContext,returnType,fieldNodes,info,result){if(runtimeTypeOrName==null){throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name,\"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name,\".\").concat(info.fieldName,\"\\\". Either the \\\"\").concat(returnType.name,\"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"),fieldNodes);}// FIXME: temporary workaround until support for passing object types would be removed in v16.0.0\nvar runtimeTypeName=isNamedType(runtimeTypeOrName)?runtimeTypeOrName.name:runtimeTypeOrName;if(typeof runtimeTypeName!=='string'){throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name,\"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name,\".\").concat(info.fieldName,\"\\\" with \")+\"value \".concat(inspect(result),\", received \\\"\").concat(inspect(runtimeTypeOrName),\"\\\".\"));}var runtimeType=exeContext.schema.getType(runtimeTypeName);if(runtimeType==null){throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name,\"\\\" was resolve to a type \\\"\").concat(runtimeTypeName,\"\\\" that does not exist inside schema.\"),fieldNodes);}if(!isObjectType(runtimeType)){throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name,\"\\\" was resolve to a non-object type \\\"\").concat(runtimeTypeName,\"\\\".\"),fieldNodes);}if(!exeContext.schema.isSubType(returnType,runtimeType)){throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name,\"\\\" is not a possible type for \\\"\").concat(returnType.name,\"\\\".\"),fieldNodes);}return runtimeType;}/**\n * Complete an Object value by executing all sub-selections.\n */function completeObjectValue(exeContext,returnType,fieldNodes,info,path,result){// If there is an isTypeOf predicate function, call it with the\n// current result. If isTypeOf returns false, then raise an error rather\n// than continuing execution.\nif(returnType.isTypeOf){var isTypeOf=returnType.isTypeOf(result,exeContext.contextValue,info);if(isPromise(isTypeOf)){return isTypeOf.then(function(resolvedIsTypeOf){if(!resolvedIsTypeOf){throw invalidReturnTypeError(returnType,result,fieldNodes);}return collectAndExecuteSubfields(exeContext,returnType,fieldNodes,path,result);});}if(!isTypeOf){throw invalidReturnTypeError(returnType,result,fieldNodes);}}return collectAndExecuteSubfields(exeContext,returnType,fieldNodes,path,result);}function invalidReturnTypeError(returnType,result,fieldNodes){return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name,\"\\\" but got: \").concat(inspect(result),\".\"),fieldNodes);}function collectAndExecuteSubfields(exeContext,returnType,fieldNodes,path,result){// Collect sub-fields to execute to complete this value.\nvar subFieldNodes=collectSubfields(exeContext,returnType,fieldNodes);return executeFields(exeContext,returnType,result,path,subFieldNodes);}/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */var collectSubfields=memoize3(_collectSubfields);function _collectSubfields(exeContext,returnType,fieldNodes){var subFieldNodes=Object.create(null);var visitedFragmentNames=Object.create(null);for(var _i8=0;_i8<fieldNodes.length;_i8++){var node=fieldNodes[_i8];if(node.selectionSet){subFieldNodes=collectFields(exeContext,returnType,node.selectionSet,subFieldNodes,visitedFragmentNames);}}return subFieldNodes;}/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */export var defaultTypeResolver=function defaultTypeResolver(value,contextValue,info,abstractType){// First, look for `__typename`.\nif(isObjectLike(value)&&typeof value.__typename==='string'){return value.__typename;}// Otherwise, test each possible type.\nvar possibleTypes=info.schema.getPossibleTypes(abstractType);var promisedIsTypeOfResults=[];for(var i=0;i<possibleTypes.length;i++){var type=possibleTypes[i];if(type.isTypeOf){var isTypeOfResult=type.isTypeOf(value,contextValue,info);if(isPromise(isTypeOfResult)){promisedIsTypeOfResults[i]=isTypeOfResult;}else if(isTypeOfResult){return type.name;}}}if(promisedIsTypeOfResults.length){return Promise.all(promisedIsTypeOfResults).then(function(isTypeOfResults){for(var _i9=0;_i9<isTypeOfResults.length;_i9++){if(isTypeOfResults[_i9]){return possibleTypes[_i9].name;}}});}};/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */export var defaultFieldResolver=function defaultFieldResolver(source,args,contextValue,info){// ensure source is a value for which property access is acceptable.\nif(isObjectLike(source)||typeof source==='function'){var property=source[info.fieldName];if(typeof property==='function'){return source[info.fieldName](args,contextValue,info);}return property;}};/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */export function getFieldDef(schema,parentType,fieldName){if(fieldName===SchemaMetaFieldDef.name&&schema.getQueryType()===parentType){return SchemaMetaFieldDef;}else if(fieldName===TypeMetaFieldDef.name&&schema.getQueryType()===parentType){return TypeMetaFieldDef;}else if(fieldName===TypeNameMetaFieldDef.name){return TypeNameMetaFieldDef;}return parentType.getFields()[fieldName];}","map":{"version":3,"names":["inspect","memoize3","invariant","devAssert","isPromise","isObjectLike","safeArrayFrom","promiseReduce","promiseForObject","addPath","pathToArray","GraphQLError","locatedError","Kind","assertValidSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","isNamedType","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","typeFromAST","getOperationRootType","getVariableValues","getArgumentValues","getDirectiveValues","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","arguments","length","executeImpl","schema","executeSync","args","result","Error","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","rawVariableValues","_definition$name","_operation$variableDe","fragments","Object","create","_i2","_document$definitions2","definitions","definition","kind","OPERATION_DEFINITION","undefined","name","value","FRAGMENT_DEFINITION","concat","variableDefinitions","coercedVariableValues","maxErrors","coerced","defaultFieldResolver","defaultTypeResolver","type","fields","collectFields","selectionSet","path","executeFieldsSerially","executeFields","error","push","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","_i4","_Object$keys2","runtimeType","visitedFragmentNames","_i6","_selectionSet$selecti2","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isSubType","alias","source","_fieldDef$resolve","fieldNode","fieldName","fieldDef","getFieldDef","returnType","resolveFn","info","buildResolveInfo","_contextValue","completed","completeValue","rawError","handleFieldError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","itemPath","completedItem","all","serializedResult","serialize","_returnType$resolveTy","resolveTypeFn","resolveType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","runtimeTypeName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","_i8","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","_i9","property","getQueryType","getFields"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport memoize3 from \"../jsutils/memoize3.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport isPromise from \"../jsutils/isPromise.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport promiseReduce from \"../jsutils/promiseReduce.mjs\";\nimport promiseForObject from \"../jsutils/promiseForObject.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from \"../type/directives.mjs\";\nimport { isNamedType, isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from \"./values.mjs\";\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  var result = executeImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var _definition$name, _operation$variableDe;\n\n  var operation;\n  var fragments = Object.create(null);\n\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  var coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var returnType = fieldDef.type;\n  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (rawError) {\n        var error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    var error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n\n  false || invariant(0, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = safeArrayFrom(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var itemPath = addPath(path, index, undefined);\n\n    try {\n      var completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then(function (resolved) {\n          return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);\n        });\n      } else {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, function (rawError) {\n          var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n\n  if (completedResults == null) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\".\"));\n  }\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n\n  if (serializedResult === undefined) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n\n  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  if (runtimeTypeOrName == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\". Either the \\\"\").concat(returnType.name, \"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0\n\n\n  var runtimeTypeName = isNamedType(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeTypeOrName), \"\\\".\"));\n  }\n\n  var runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a type \\\"\").concat(runtimeTypeName, \"\\\" that does not exist inside schema.\"), fieldNodes);\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a non-object type \\\"\").concat(runtimeTypeName, \"\\\".\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}