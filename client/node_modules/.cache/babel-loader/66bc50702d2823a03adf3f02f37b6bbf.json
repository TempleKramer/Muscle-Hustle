{"ast":null,"code":"import objectValues from\"../polyfills/objectValues.mjs\";import keyMap from\"../jsutils/keyMap.mjs\";import inspect from\"../jsutils/inspect.mjs\";import invariant from\"../jsutils/invariant.mjs\";import{Kind}from\"../language/kinds.mjs\";import{isLeafType,isInputObjectType,isListType,isNonNullType}from\"../type/definition.mjs\";/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */export function valueFromAST(valueNode,type,variables){if(!valueNode){// When there is no node, then there is also no value.\n// Importantly, this is different from returning the value null.\nreturn;}if(valueNode.kind===Kind.VARIABLE){var variableName=valueNode.name.value;if(variables==null||variables[variableName]===undefined){// No valid return value.\nreturn;}var variableValue=variables[variableName];if(variableValue===null&&isNonNullType(type)){return;// Invalid: intentionally return no value.\n}// Note: This does no further checking that this variable is correct.\n// This assumes that this query has been validated and the variable\n// usage here is of the correct type.\nreturn variableValue;}if(isNonNullType(type)){if(valueNode.kind===Kind.NULL){return;// Invalid: intentionally return no value.\n}return valueFromAST(valueNode,type.ofType,variables);}if(valueNode.kind===Kind.NULL){// This is explicitly returning the value null.\nreturn null;}if(isListType(type)){var itemType=type.ofType;if(valueNode.kind===Kind.LIST){var coercedValues=[];for(var _i2=0,_valueNode$values2=valueNode.values;_i2<_valueNode$values2.length;_i2++){var itemNode=_valueNode$values2[_i2];if(isMissingVariable(itemNode,variables)){// If an array contains a missing variable, it is either coerced to\n// null or if the item type is non-null, it considered invalid.\nif(isNonNullType(itemType)){return;// Invalid: intentionally return no value.\n}coercedValues.push(null);}else{var itemValue=valueFromAST(itemNode,itemType,variables);if(itemValue===undefined){return;// Invalid: intentionally return no value.\n}coercedValues.push(itemValue);}}return coercedValues;}var coercedValue=valueFromAST(valueNode,itemType,variables);if(coercedValue===undefined){return;// Invalid: intentionally return no value.\n}return[coercedValue];}if(isInputObjectType(type)){if(valueNode.kind!==Kind.OBJECT){return;// Invalid: intentionally return no value.\n}var coercedObj=Object.create(null);var fieldNodes=keyMap(valueNode.fields,function(field){return field.name.value;});for(var _i4=0,_objectValues2=objectValues(type.getFields());_i4<_objectValues2.length;_i4++){var field=_objectValues2[_i4];var fieldNode=fieldNodes[field.name];if(!fieldNode||isMissingVariable(fieldNode.value,variables)){if(field.defaultValue!==undefined){coercedObj[field.name]=field.defaultValue;}else if(isNonNullType(field.type)){return;// Invalid: intentionally return no value.\n}continue;}var fieldValue=valueFromAST(fieldNode.value,field.type,variables);if(fieldValue===undefined){return;// Invalid: intentionally return no value.\n}coercedObj[field.name]=fieldValue;}return coercedObj;}// istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\nif(isLeafType(type)){// Scalars and Enums fulfill parsing a literal value via parseLiteral().\n// Invalid values represent a failure to parse correctly, in which case\n// no value is returned.\nvar result;try{result=type.parseLiteral(valueNode,variables);}catch(_error){return;// Invalid: intentionally return no value.\n}if(result===undefined){return;// Invalid: intentionally return no value.\n}return result;}// istanbul ignore next (Not reachable. All possible input types have been considered)\nfalse||invariant(0,'Unexpected input type: '+inspect(type));}// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\nfunction isMissingVariable(valueNode,variables){return valueNode.kind===Kind.VARIABLE&&(variables==null||variables[valueNode.name.value]===undefined);}","map":{"version":3,"names":["objectValues","keyMap","inspect","invariant","Kind","isLeafType","isInputObjectType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","_i2","_valueNode$values2","values","length","itemNode","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","_i4","_objectValues2","getFields","fieldNode","defaultValue","fieldValue","result","parseLiteral","_error"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/valueFromAST.mjs"],"sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n\n      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {\n        var itemNode = _valueNode$values2[_i2];\n\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}