{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */export function UniqueDirectiveNamesRule(context){var knownDirectiveNames=Object.create(null);var schema=context.getSchema();return{DirectiveDefinition:function DirectiveDefinition(node){var directiveName=node.name.value;if(schema!==null&&schema!==void 0&&schema.getDirective(directiveName)){context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName,\"\\\" already exists in the schema. It cannot be redefined.\"),node.name));return;}if(knownDirectiveNames[directiveName]){context.reportError(new GraphQLError(\"There can be only one directive named \\\"@\".concat(directiveName,\"\\\".\"),[knownDirectiveNames[directiveName],node.name]));}else{knownDirectiveNames[directiveName]=node.name;}return false;}};}","map":{"version":3,"names":["GraphQLError","UniqueDirectiveNamesRule","context","knownDirectiveNames","Object","create","schema","getSchema","DirectiveDefinition","node","directiveName","name","value","getDirective","reportError","concat"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  var knownDirectiveNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    DirectiveDefinition: function DirectiveDefinition(node) {\n      var directiveName = node.name.value;\n\n      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" already exists in the schema. It cannot be redefined.\"), node.name));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new GraphQLError(\"There can be only one directive named \\\"@\".concat(directiveName, \"\\\".\"), [knownDirectiveNames[directiveName], node.name]));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,yBAAT,CAAkCC,OAAlC,CAA2C,CAChD,GAAIC,oBAAmB,CAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B,CACA,GAAIC,OAAM,CAAGJ,OAAO,CAACK,SAAR,EAAb,CACA,MAAO,CACLC,mBAAmB,CAAE,QAASA,oBAAT,CAA6BC,IAA7B,CAAmC,CACtD,GAAIC,cAAa,CAAGD,IAAI,CAACE,IAAL,CAAUC,KAA9B,CAEA,GAAIN,MAAM,GAAK,IAAX,EAAmBA,MAAM,GAAK,IAAK,EAAnC,EAAwCA,MAAM,CAACO,YAAP,CAAoBH,aAApB,CAA5C,CAAgF,CAC9ER,OAAO,CAACY,WAAR,CAAoB,GAAId,aAAJ,CAAiB,gBAAgBe,MAAhB,CAAuBL,aAAvB,CAAsC,0DAAtC,CAAjB,CAAoHD,IAAI,CAACE,IAAzH,CAApB,EACA,OACD,CAED,GAAIR,mBAAmB,CAACO,aAAD,CAAvB,CAAwC,CACtCR,OAAO,CAACY,WAAR,CAAoB,GAAId,aAAJ,CAAiB,4CAA4Ce,MAA5C,CAAmDL,aAAnD,CAAkE,KAAlE,CAAjB,CAA2F,CAACP,mBAAmB,CAACO,aAAD,CAApB,CAAqCD,IAAI,CAACE,IAA1C,CAA3F,CAApB,EACD,CAFD,IAEO,CACLR,mBAAmB,CAACO,aAAD,CAAnB,CAAqCD,IAAI,CAACE,IAA1C,CACD,CAED,MAAO,MAAP,CACD,CAhBI,CAAP,CAkBD"},"metadata":{},"sourceType":"module"}