{"ast":null,"code":"/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */export default function naturalCompare(aStr,bStr){var aIdx=0;var bIdx=0;while(aIdx<aStr.length&&bIdx<bStr.length){var aChar=aStr.charCodeAt(aIdx);var bChar=bStr.charCodeAt(bIdx);if(isDigit(aChar)&&isDigit(bChar)){var aNum=0;do{++aIdx;aNum=aNum*10+aChar-DIGIT_0;aChar=aStr.charCodeAt(aIdx);}while(isDigit(aChar)&&aNum>0);var bNum=0;do{++bIdx;bNum=bNum*10+bChar-DIGIT_0;bChar=bStr.charCodeAt(bIdx);}while(isDigit(bChar)&&bNum>0);if(aNum<bNum){return-1;}if(aNum>bNum){return 1;}}else{if(aChar<bChar){return-1;}if(aChar>bChar){return 1;}++aIdx;++bIdx;}}return aStr.length-bStr.length;}var DIGIT_0=48;var DIGIT_9=57;function isDigit(code){return!isNaN(code)&&DIGIT_0<=code&&code<=DIGIT_9;}","map":{"version":3,"names":["naturalCompare","aStr","bStr","aIdx","bIdx","length","aChar","charCodeAt","bChar","isDigit","aNum","DIGIT_0","bNum","DIGIT_9","code","isNaN"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/jsutils/naturalCompare.mjs"],"sourcesContent":["/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport default function naturalCompare(aStr, bStr) {\n  var aIdx = 0;\n  var bIdx = 0;\n\n  while (aIdx < aStr.length && bIdx < bStr.length) {\n    var aChar = aStr.charCodeAt(aIdx);\n    var bChar = bStr.charCodeAt(bIdx);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      var aNum = 0;\n\n      do {\n        ++aIdx;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIdx);\n      } while (isDigit(aChar) && aNum > 0);\n\n      var bNum = 0;\n\n      do {\n        ++bIdx;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIdx);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIdx;\n      ++bIdx;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nvar DIGIT_0 = 48;\nvar DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASA,eAAT,CAAwBC,IAAxB,CAA8BC,IAA9B,CAAoC,CACjD,GAAIC,KAAI,CAAG,CAAX,CACA,GAAIC,KAAI,CAAG,CAAX,CAEA,MAAOD,IAAI,CAAGF,IAAI,CAACI,MAAZ,EAAsBD,IAAI,CAAGF,IAAI,CAACG,MAAzC,CAAiD,CAC/C,GAAIC,MAAK,CAAGL,IAAI,CAACM,UAAL,CAAgBJ,IAAhB,CAAZ,CACA,GAAIK,MAAK,CAAGN,IAAI,CAACK,UAAL,CAAgBH,IAAhB,CAAZ,CAEA,GAAIK,OAAO,CAACH,KAAD,CAAP,EAAkBG,OAAO,CAACD,KAAD,CAA7B,CAAsC,CACpC,GAAIE,KAAI,CAAG,CAAX,CAEA,EAAG,CACD,EAAEP,IAAF,CACAO,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAYJ,KAAZ,CAAoBK,OAA3B,CACAL,KAAK,CAAGL,IAAI,CAACM,UAAL,CAAgBJ,IAAhB,CAAR,CACD,CAJD,MAISM,OAAO,CAACH,KAAD,CAAP,EAAkBI,IAAI,CAAG,CAJlC,EAMA,GAAIE,KAAI,CAAG,CAAX,CAEA,EAAG,CACD,EAAER,IAAF,CACAQ,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAYJ,KAAZ,CAAoBG,OAA3B,CACAH,KAAK,CAAGN,IAAI,CAACK,UAAL,CAAgBH,IAAhB,CAAR,CACD,CAJD,MAISK,OAAO,CAACD,KAAD,CAAP,EAAkBI,IAAI,CAAG,CAJlC,EAMA,GAAIF,IAAI,CAAGE,IAAX,CAAiB,CACf,MAAO,CAAC,CAAR,CACD,CAED,GAAIF,IAAI,CAAGE,IAAX,CAAiB,CACf,MAAO,EAAP,CACD,CACF,CAxBD,IAwBO,CACL,GAAIN,KAAK,CAAGE,KAAZ,CAAmB,CACjB,MAAO,CAAC,CAAR,CACD,CAED,GAAIF,KAAK,CAAGE,KAAZ,CAAmB,CACjB,MAAO,EAAP,CACD,CAED,EAAEL,IAAF,CACA,EAAEC,IAAF,CACD,CACF,CAED,MAAOH,KAAI,CAACI,MAAL,CAAcH,IAAI,CAACG,MAA1B,CACD,CACD,GAAIM,QAAO,CAAG,EAAd,CACA,GAAIE,QAAO,CAAG,EAAd,CAEA,QAASJ,QAAT,CAAiBK,IAAjB,CAAuB,CACrB,MAAO,CAACC,KAAK,CAACD,IAAD,CAAN,EAAgBH,OAAO,EAAIG,IAA3B,EAAmCA,IAAI,EAAID,OAAlD,CACD"},"metadata":{},"sourceType":"module"}