{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\jarma\\\\school\\\\challenges\\\\Project3_Final\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";// export default App;\nimport React from'react';import'bootstrap/dist/css/bootstrap.min.css';import{BrowserRouter as Router,Switch,Route}from'react-router-dom';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import Saved from'./components/saved';import Search from'./components/search';import Homepage from'./components/homepage/homepage.js';import Navbar from'./components/Navbar';//Construct our main GraphQL API endpoint\nvar httpLink=createHttpLink({uri:'/graphql'});//Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/React.createElement(ApolloProvider,{client:client},/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Navbar,null),/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/\",component:Homepage}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/saved\",component:Saved}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/search\",component:Search}),/*#__PURE__*/React.createElement(Route,{render:function render(){return/*#__PURE__*/React.createElement(\"h1\",{className:\"display-2\"},\"Wrong page!\");}})))));}export default App;","map":{"version":3,"names":["React","BrowserRouter","Router","Switch","Route","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","Saved","Search","Homepage","Navbar","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/App.js"],"sourcesContent":["\n// export default App;\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport Saved from './components/saved';\nimport Search from './components/search';\n\nimport Homepage from './components/homepage/homepage.js';\nimport Navbar from './components/Navbar';\n\n//Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n//Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n             <Route exact path=\"/\" component={Homepage} />\n             <Route exact path=\"/saved\" component={Saved} />\n             <Route exact path=\"/search\" component={Search} />\n\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} /> \n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;"],"mappings":"uLACA;AACA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAO,sCAAP,CACA,OAASC,aAAa,GAAIC,OAA1B,CAAkCC,MAAlC,CAA0CC,KAA1C,KAAuD,kBAAvD,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,cAHF,CAIEC,cAJF,KAKO,gBALP,CAMA,OAASC,UAAT,KAA2B,6BAA3B,CACA,MAAOC,MAAP,KAAkB,oBAAlB,CACA,MAAOC,OAAP,KAAmB,qBAAnB,CAEA,MAAOC,SAAP,KAAqB,mCAArB,CACA,MAAOC,OAAP,KAAmB,qBAAnB,CAEA;AACA,GAAMC,SAAQ,CAAGN,cAAc,CAAC,CAC9BO,GAAG,CAAE,UADyB,CAAD,CAA/B,CAIA;AACA,GAAMC,SAAQ,CAAGP,UAAU,CAAC,SAACQ,CAAD,MAAoB,IAAdC,QAAc,MAAdA,OAAc,CAC9C;AACA,GAAMC,MAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA;AACA,MAAO,CACLH,OAAO,gCACFA,OADE,MAELI,aAAa,CAAEH,KAAK,kBAAaA,KAAb,EAAuB,EAFtC,EADF,CAAP,CAMD,CAV0B,CAA3B,CAYA,GAAMI,OAAM,CAAG,GAAIlB,aAAJ,CAAiB,CAC9B;AACAmB,IAAI,CAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CAFwB,CAG9BY,KAAK,CAAE,GAAIpB,cAAJ,EAHuB,CAAjB,CAAf,CAMA,QAASqB,IAAT,EAAe,CACb,mBACE,oBAAC,cAAD,EAAgB,MAAM,CAAEJ,MAAxB,eACE,oBAAC,MAAD,mBACE,qDACE,oBAAC,MAAD,MADF,cAEE,oBAAC,MAAD,mBACG,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEX,QAAjC,EADH,cAEG,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,QAAlB,CAA2B,SAAS,CAAEF,KAAtC,EAFH,cAGG,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,SAAlB,CAA4B,SAAS,CAAEC,MAAvC,EAHH,cAKE,oBAAC,KAAD,EAAO,MAAM,CAAE,qCAAM,0BAAI,SAAS,CAAC,WAAd,gBAAN,EAAf,EALF,CAFF,CADF,CADF,CADF,CAgBD,CAED,cAAegB,IAAf"},"metadata":{},"sourceType":"module"}