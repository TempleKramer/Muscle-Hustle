{"ast":null,"code":"import{useMemo,useRef}from'react';import useMounted from'./useMounted';import useWillUnmount from'./useWillUnmount';/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */var MAX_DELAY_MS=Math.pow(2,31)-1;function setChainedTimeout(handleRef,fn,timeoutAtMs){var delayMs=timeoutAtMs-Date.now();handleRef.current=delayMs<=MAX_DELAY_MS?setTimeout(fn,delayMs):setTimeout(function(){return setChainedTimeout(handleRef,fn,timeoutAtMs);},MAX_DELAY_MS);}/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */export default function useTimeout(){var isMounted=useMounted();// types are confused between node and web here IDK\nvar handleRef=useRef();useWillUnmount(function(){return clearTimeout(handleRef.current);});return useMemo(function(){var clear=function clear(){return clearTimeout(handleRef.current);};function set(fn,delayMs){if(delayMs===void 0){delayMs=0;}if(!isMounted())return;clear();if(delayMs<=MAX_DELAY_MS){// For simplicity, if the timeout is short, just set a normal timeout.\nhandleRef.current=setTimeout(fn,delayMs);}else{setChainedTimeout(handleRef,fn,Date.now()+delayMs);}}return{set:set,clear:clear};},[]);}","map":{"version":3,"names":["useMemo","useRef","useMounted","useWillUnmount","MAX_DELAY_MS","Math","pow","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","clearTimeout","clear","set"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/@restart/hooks/esm/useTimeout.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,MAAlB,KAAgC,OAAhC,CACA,MAAOC,WAAP,KAAuB,cAAvB,CACA,MAAOC,eAAP,KAA2B,kBAA3B,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,GAAIC,aAAY,CAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAY,EAAZ,EAAkB,CAArC,CAEA,QAASC,kBAAT,CAA2BC,SAA3B,CAAsCC,EAAtC,CAA0CC,WAA1C,CAAuD,CACrD,GAAIC,QAAO,CAAGD,WAAW,CAAGE,IAAI,CAACC,GAAL,EAA5B,CACAL,SAAS,CAACM,OAAV,CAAoBH,OAAO,EAAIP,YAAX,CAA0BW,UAAU,CAACN,EAAD,CAAKE,OAAL,CAApC,CAAoDI,UAAU,CAAC,UAAY,CAC7F,MAAOR,kBAAiB,CAACC,SAAD,CAAYC,EAAZ,CAAgBC,WAAhB,CAAxB,CACD,CAFiF,CAE/EN,YAF+E,CAAlF,CAGD,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAGA,cAAe,SAASY,WAAT,EAAsB,CACnC,GAAIC,UAAS,CAAGf,UAAU,EAA1B,CAA8B;AAE9B,GAAIM,UAAS,CAAGP,MAAM,EAAtB,CACAE,cAAc,CAAC,UAAY,CACzB,MAAOe,aAAY,CAACV,SAAS,CAACM,OAAX,CAAnB,CACD,CAFa,CAAd,CAGA,MAAOd,QAAO,CAAC,UAAY,CACzB,GAAImB,MAAK,CAAG,QAASA,MAAT,EAAiB,CAC3B,MAAOD,aAAY,CAACV,SAAS,CAACM,OAAX,CAAnB,CACD,CAFD,CAIA,QAASM,IAAT,CAAaX,EAAb,CAAiBE,OAAjB,CAA0B,CACxB,GAAIA,OAAO,GAAK,IAAK,EAArB,CAAwB,CACtBA,OAAO,CAAG,CAAV,CACD,CAED,GAAI,CAACM,SAAS,EAAd,CAAkB,OAClBE,KAAK,GAEL,GAAIR,OAAO,EAAIP,YAAf,CAA6B,CAC3B;AACAI,SAAS,CAACM,OAAV,CAAoBC,UAAU,CAACN,EAAD,CAAKE,OAAL,CAA9B,CACD,CAHD,IAGO,CACLJ,iBAAiB,CAACC,SAAD,CAAYC,EAAZ,CAAgBG,IAAI,CAACC,GAAL,GAAaF,OAA7B,CAAjB,CACD,CACF,CAED,MAAO,CACLS,GAAG,CAAEA,GADA,CAELD,KAAK,CAAEA,KAFF,CAAP,CAID,CAzBa,CAyBX,EAzBW,CAAd,CA0BD"},"metadata":{},"sourceType":"module"}