{"ast":null,"code":"import naturalCompare from\"./naturalCompare.mjs\";/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */export default function suggestionList(input,options){var optionsByDistance=Object.create(null);var lexicalDistance=new LexicalDistance(input);var threshold=Math.floor(input.length*0.4)+1;for(var _i2=0;_i2<options.length;_i2++){var option=options[_i2];var distance=lexicalDistance.measure(option,threshold);if(distance!==undefined){optionsByDistance[option]=distance;}}return Object.keys(optionsByDistance).sort(function(a,b){var distanceDiff=optionsByDistance[a]-optionsByDistance[b];return distanceDiff!==0?distanceDiff:naturalCompare(a,b);});}/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */var LexicalDistance=/*#__PURE__*/function(){function LexicalDistance(input){this._input=input;this._inputLowerCase=input.toLowerCase();this._inputArray=stringToArray(this._inputLowerCase);this._rows=[new Array(input.length+1).fill(0),new Array(input.length+1).fill(0),new Array(input.length+1).fill(0)];}var _proto=LexicalDistance.prototype;_proto.measure=function measure(option,threshold){if(this._input===option){return 0;}var optionLowerCase=option.toLowerCase();// Any case change counts as a single edit\nif(this._inputLowerCase===optionLowerCase){return 1;}var a=stringToArray(optionLowerCase);var b=this._inputArray;if(a.length<b.length){var tmp=a;a=b;b=tmp;}var aLength=a.length;var bLength=b.length;if(aLength-bLength>threshold){return undefined;}var rows=this._rows;for(var j=0;j<=bLength;j++){rows[0][j]=j;}for(var i=1;i<=aLength;i++){var upRow=rows[(i-1)%3];var currentRow=rows[i%3];var smallestCell=currentRow[0]=i;for(var _j=1;_j<=bLength;_j++){var cost=a[i-1]===b[_j-1]?0:1;var currentCell=Math.min(upRow[_j]+1,// delete\ncurrentRow[_j-1]+1,// insert\nupRow[_j-1]+cost// substitute\n);if(i>1&&_j>1&&a[i-1]===b[_j-2]&&a[i-2]===b[_j-1]){// transposition\nvar doubleDiagonalCell=rows[(i-2)%3][_j-2];currentCell=Math.min(currentCell,doubleDiagonalCell+1);}if(currentCell<smallestCell){smallestCell=currentCell;}currentRow[_j]=currentCell;}// Early exit, since distance can't go smaller than smallest element of the previous row.\nif(smallestCell>threshold){return undefined;}}var distance=rows[aLength%3][bLength];return distance<=threshold?distance:undefined;};return LexicalDistance;}();function stringToArray(str){var strLength=str.length;var array=new Array(strLength);for(var i=0;i<strLength;++i){array[i]=str.charCodeAt(i);}return array;}","map":{"version":3,"names":["naturalCompare","suggestionList","input","options","optionsByDistance","Object","create","lexicalDistance","LexicalDistance","threshold","Math","floor","length","_i2","option","distance","measure","undefined","keys","sort","a","b","distanceDiff","_input","_inputLowerCase","toLowerCase","_inputArray","stringToArray","_rows","Array","fill","_proto","prototype","optionLowerCase","tmp","aLength","bLength","rows","j","i","upRow","currentRow","smallestCell","_j","cost","currentCell","min","doubleDiagonalCell","str","strLength","array","charCodeAt"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/jsutils/suggestionList.mjs"],"sourcesContent":["import naturalCompare from \"./naturalCompare.mjs\";\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var lexicalDistance = new LexicalDistance(input);\n  var threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    var distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nvar LexicalDistance = /*#__PURE__*/function () {\n  function LexicalDistance(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];\n  }\n\n  var _proto = LexicalDistance.prototype;\n\n  _proto.measure = function measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    var a = stringToArray(optionLowerCase);\n    var b = this._inputArray;\n\n    if (a.length < b.length) {\n      var tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    var aLength = a.length;\n    var bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    var rows = this._rows;\n\n    for (var j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (var i = 1; i <= aLength; i++) {\n      var upRow = rows[(i - 1) % 3];\n      var currentRow = rows[i % 3];\n      var smallestCell = currentRow[0] = i;\n\n      for (var _j = 1; _j <= bLength; _j++) {\n        var cost = a[i - 1] === b[_j - 1] ? 0 : 1;\n        var currentCell = Math.min(upRow[_j] + 1, // delete\n        currentRow[_j - 1] + 1, // insert\n        upRow[_j - 1] + cost // substitute\n        );\n\n        if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {\n          // transposition\n          var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[_j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    var distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  };\n\n  return LexicalDistance;\n}();\n\nfunction stringToArray(str) {\n  var strLength = str.length;\n  var array = new Array(strLength);\n\n  for (var i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}