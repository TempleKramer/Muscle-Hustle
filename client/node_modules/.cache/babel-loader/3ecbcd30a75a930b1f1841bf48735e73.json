{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretsshhhhh';\nconst expiration = '2h';\nmodule.exports = {\n  authMiddleware: function (_ref) {\n    let {\n      req\n    } = _ref;\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization; // [\"Bearer\", \"<tokenvalue>\"]\n\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n\n    if (!token) {\n      return req;\n    }\n\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    return req;\n  },\n  signToken: function (_ref2) {\n    let {\n      username,\n      email,\n      _id\n    } = _ref2;\n    const payload = {\n      username,\n      email,\n      _id\n    };\n    return jwt.sign({\n      data: payload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"names":["jwt","require","secret","expiration","module","exports","authMiddleware","req","token","body","query","headers","authorization","split","pop","trim","data","verify","maxAge","user","console","log","signToken","username","email","_id","payload","sign","expiresIn"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/fitness-app/client/src/utils/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretsshhhhh';\nconst expiration = '2h';\n\nmodule.exports = {\n  authMiddleware: function({ req }) {\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization;\n\n    // [\"Bearer\", \"<tokenvalue>\"]\n    if (req.headers.authorization) {\n      token = token\n        .split(' ')\n        .pop()\n        .trim();\n    }\n\n    if (!token) {\n      return req;\n    }\n\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    return req;\n  },\n  signToken: function({ username, email, _id }) {\n    const payload = { username, email, _id };\n\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\n  }\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMC,MAAM,GAAG,iBAAf;AACA,MAAMC,UAAU,GAAG,IAAnB;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfC,cAAc,EAAE,gBAAkB;IAAA,IAAT;MAAEC;IAAF,CAAS;IAChC;IACA,IAAIC,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASD,KAAT,IAAkBD,GAAG,CAACG,KAAJ,CAAUF,KAA5B,IAAqCD,GAAG,CAACI,OAAJ,CAAYC,aAA7D,CAFgC,CAIhC;;IACA,IAAIL,GAAG,CAACI,OAAJ,CAAYC,aAAhB,EAA+B;MAC7BJ,KAAK,GAAGA,KAAK,CACVK,KADK,CACC,GADD,EAELC,GAFK,GAGLC,IAHK,EAAR;IAID;;IAED,IAAI,CAACP,KAAL,EAAY;MACV,OAAOD,GAAP;IACD;;IAED,IAAI;MACF,MAAM;QAAES;MAAF,IAAWhB,GAAG,CAACiB,MAAJ,CAAWT,KAAX,EAAkBN,MAAlB,EAA0B;QAAEgB,MAAM,EAAEf;MAAV,CAA1B,CAAjB;MACAI,GAAG,CAACY,IAAJ,GAAWH,IAAX;IACD,CAHD,CAGE,MAAM;MACNI,OAAO,CAACC,GAAR,CAAY,eAAZ;IACD;;IAED,OAAOd,GAAP;EACD,CAzBc;EA0Bfe,SAAS,EAAE,iBAAmC;IAAA,IAA1B;MAAEC,QAAF;MAAYC,KAAZ;MAAmBC;IAAnB,CAA0B;IAC5C,MAAMC,OAAO,GAAG;MAAEH,QAAF;MAAYC,KAAZ;MAAmBC;IAAnB,CAAhB;IAEA,OAAOzB,GAAG,CAAC2B,IAAJ,CAAS;MAAEX,IAAI,EAAEU;IAAR,CAAT,EAA4BxB,MAA5B,EAAoC;MAAE0B,SAAS,EAAEzB;IAAb,CAApC,CAAP;EACD;AA9Bc,CAAjB"},"metadata":{},"sourceType":"module"}