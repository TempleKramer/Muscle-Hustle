{"ast":null,"code":"import{Observable}from\"./Observable.js\";export function asyncMap(observable,mapFn,catchFn){return new Observable(function(observer){var next=observer.next,error=observer.error,_complete=observer.complete;var activeCallbackCount=0;var completed=false;var promiseQueue={then:function then(callback){return new Promise(function(resolve){return resolve(callback());});}};function makeCallback(examiner,delegate){if(examiner){return function(arg){++activeCallbackCount;var both=function both(){return examiner(arg);};promiseQueue=promiseQueue.then(both,both).then(function(result){--activeCallbackCount;next&&next.call(observer,result);if(completed){handler.complete();}},function(error){--activeCallbackCount;throw error;}).catch(function(caught){error&&error.call(observer,caught);});};}else{return function(arg){return delegate&&delegate.call(observer,arg);};}}var handler={next:makeCallback(mapFn,next),error:makeCallback(catchFn,error),complete:function complete(){completed=true;if(!activeCallbackCount){_complete&&_complete.call(observer);}}};var sub=observable.subscribe(handler);return function(){return sub.unsubscribe();};});}","map":{"version":3,"mappings":"AAAA,OAASA,UAAT,KAAqC,iBAArC,CAIA,MAAM,SAAUC,SAAV,CACJC,UADI,CAEJC,KAFI,CAGJC,OAHI,CAGwC,CAE5C,MAAO,IAAIJ,WAAJ,CAAkB,kBAAQ,CACvB,QAAI,CAAsBK,QAAQ,KAAlC,CAAMC,KAAK,CAAeD,QAAQ,MAAlC,CAAaE,SAAQ,CAAKF,QAAQ,SAAlC,CACR,GAAIG,oBAAmB,CAAG,CAA1B,CACA,GAAIC,UAAS,CAAG,KAAhB,CACA,GAAIC,aAAY,CAAG,CAIjBC,IAAI,CAAJ,cAAKC,QAAL,CAAwB,CACtB,MAAO,IAAIC,QAAJ,CAAY,iBAAO,CAAI,cAAO,CAACD,QAAQ,EAAT,CAAP,CAAmB,CAA1C,CAAP,CACD,CANgB,CAAnB,CASA,QAASE,aAAT,CACEC,QADF,CAEEC,QAFF,CAEsC,CAEpC,GAAID,QAAJ,CAAc,CACZ,MAAO,cAAG,CACR,EAAEP,mBAAF,CACA,GAAMS,KAAI,CAAG,QAAPA,KAAO,GAAM,eAAQ,CAACC,GAAD,CAAR,CAAa,CAAhC,CACAR,YAAY,CAAGA,YAAY,CAACC,IAAb,CAAkBM,IAAlB,CAAwBA,IAAxB,EAA8BN,IAA9B,CACb,gBAAM,CACJ,EAAEH,mBAAF,CACAW,IAAI,EAAIA,IAAI,CAACC,IAAL,CAAUf,QAAV,CAAoBgB,MAApB,CAAR,CACA,GAAIZ,SAAJ,CAAe,CACba,OAAO,CAACf,QAAR,GACD,CACF,CAPY,CAQb,eAAK,CACH,EAAEC,mBAAF,CACA,KAAMF,MAAN,CACD,CAXY,EAYbiB,KAZa,CAYP,gBAAM,CACZjB,KAAK,EAAIA,KAAK,CAACc,IAAN,CAAWf,QAAX,CAAqBmB,MAArB,CAAT,CACD,CAdc,CAAf,CAeD,CAlBD,CAmBD,CApBD,IAoBO,CACL,MAAO,cAAG,CAAI,eAAQ,EAAIR,QAAQ,CAACI,IAAT,CAAcf,QAAd,CAAwBa,GAAxB,CAAZ,CAAwC,CAAtD,CACD,CACF,CAED,GAAMI,QAAO,CAAgB,CAC3BH,IAAI,CAAEL,YAAY,CAACX,KAAD,CAAQgB,IAAR,CADS,CAE3Bb,KAAK,CAAEQ,YAAY,CAACV,OAAD,CAAUE,KAAV,CAFQ,CAG3BC,QAAQ,qBACNE,SAAS,CAAG,IAAZ,CACA,GAAI,CAACD,mBAAL,CAA0B,CACxBD,SAAQ,EAAIA,SAAQ,CAACa,IAAT,CAAcf,QAAd,CAAZ,CACD,CACF,CAR0B,CAA7B,CAWA,GAAMoB,IAAG,CAAGvB,UAAU,CAACwB,SAAX,CAAqBJ,OAArB,CAAZ,CACA,MAAO,YAAM,UAAG,CAACK,WAAJ,GAAiB,CAA9B,CACD,CAvDM,CAAP,CAwDD","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","error","complete","activeCallbackCount","completed","promiseQueue","then","callback","Promise","makeCallback","examiner","delegate","both","arg","next","call","result","handler","catch","caught","sub","subscribe","unsubscribe"],"sourceRoot":"","sources":["../../../src/utilities/observables/asyncMap.ts"],"sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}