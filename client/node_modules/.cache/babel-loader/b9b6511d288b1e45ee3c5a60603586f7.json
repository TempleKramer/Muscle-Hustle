{"ast":null,"code":"import defineInspect from\"../jsutils/defineInspect.mjs\";/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */export var Location=/*#__PURE__*/function(){/**\n   * The character offset at which this Node begins.\n   */ /**\n   * The character offset at which this Node ends.\n   */ /**\n   * The Token at which this Node begins.\n   */ /**\n   * The Token at which this Node ends.\n   */ /**\n   * The Source document the AST represents.\n   */function Location(startToken,endToken,source){this.start=startToken.start;this.end=endToken.end;this.startToken=startToken;this.endToken=endToken;this.source=source;}var _proto=Location.prototype;_proto.toJSON=function toJSON(){return{start:this.start,end:this.end};};return Location;}();// Print a simplified form when appearing in `inspect` and `util.inspect`.\ndefineInspect(Location);/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */export var Token=/*#__PURE__*/function(){/**\n   * The kind of Token.\n   */ /**\n   * The character offset at which this Node begins.\n   */ /**\n   * The character offset at which this Node ends.\n   */ /**\n   * The 1-indexed line number on which this Token appears.\n   */ /**\n   * The 1-indexed column number at which this Token begins.\n   */ /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */ /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */function Token(kind,start,end,line,column,prev,value){this.kind=kind;this.start=start;this.end=end;this.line=line;this.column=column;this.value=value;this.prev=prev;this.next=null;}var _proto2=Token.prototype;_proto2.toJSON=function toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column};};return Token;}();// Print a simplified form when appearing in `inspect` and `util.inspect`.\ndefineInspect(Token);/**\n * @internal\n */export function isNode(maybeNode){return maybeNode!=null&&typeof maybeNode.kind==='string';}/**\n * The list of all possible AST node types.\n */","map":{"version":3,"names":["defineInspect","Location","startToken","endToken","source","start","end","_proto","prototype","toJSON","Token","kind","line","column","prev","value","next","_proto2","isNode","maybeNode"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/language/ast.mjs"],"sourcesContent":["import defineInspect from \"../jsutils/defineInspect.mjs\";\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport var Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n"],"mappings":"AAAA,MAAOA,cAAP,KAA0B,8BAA1B,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAIC,SAAQ,CAAG,aAAa,UAAY,CAC7C;AACF;AACA,KAH+C,CAK7C;AACF;AACA,KAP+C,CAS7C;AACF;AACA,KAX+C,CAa7C;AACF;AACA,KAf+C,CAiB7C;AACF;AACA,KACE,QAASA,SAAT,CAAkBC,UAAlB,CAA8BC,QAA9B,CAAwCC,MAAxC,CAAgD,CAC9C,KAAKC,KAAL,CAAaH,UAAU,CAACG,KAAxB,CACA,KAAKC,GAAL,CAAWH,QAAQ,CAACG,GAApB,CACA,KAAKJ,UAAL,CAAkBA,UAAlB,CACA,KAAKC,QAAL,CAAgBA,QAAhB,CACA,KAAKC,MAAL,CAAcA,MAAd,CACD,CAED,GAAIG,OAAM,CAAGN,QAAQ,CAACO,SAAtB,CAEAD,MAAM,CAACE,MAAP,CAAgB,QAASA,OAAT,EAAkB,CAChC,MAAO,CACLJ,KAAK,CAAE,KAAKA,KADP,CAELC,GAAG,CAAE,KAAKA,GAFL,CAAP,CAID,CALD,CAOA,MAAOL,SAAP,CACD,CAtCkC,EAA5B,CAsCF;AAELD,aAAa,CAACC,QAAD,CAAb,CACA;AACA;AACA;AACA,GAEA,MAAO,IAAIS,MAAK,CAAG,aAAa,UAAY,CAC1C;AACF;AACA,KAH4C,CAK1C;AACF;AACA,KAP4C,CAS1C;AACF;AACA,KAX4C,CAa1C;AACF;AACA,KAf4C,CAiB1C;AACF;AACA,KAnB4C,CAqB1C;AACF;AACA,KAvB4C,CAyB1C;AACF;AACA;AACA;AACA,KACE,QAASA,MAAT,CAAeC,IAAf,CAAqBN,KAArB,CAA4BC,GAA5B,CAAiCM,IAAjC,CAAuCC,MAAvC,CAA+CC,IAA/C,CAAqDC,KAArD,CAA4D,CAC1D,KAAKJ,IAAL,CAAYA,IAAZ,CACA,KAAKN,KAAL,CAAaA,KAAb,CACA,KAAKC,GAAL,CAAWA,GAAX,CACA,KAAKM,IAAL,CAAYA,IAAZ,CACA,KAAKC,MAAL,CAAcA,MAAd,CACA,KAAKE,KAAL,CAAaA,KAAb,CACA,KAAKD,IAAL,CAAYA,IAAZ,CACA,KAAKE,IAAL,CAAY,IAAZ,CACD,CAED,GAAIC,QAAO,CAAGP,KAAK,CAACF,SAApB,CAEAS,OAAO,CAACR,MAAR,CAAiB,QAASA,OAAT,EAAkB,CACjC,MAAO,CACLE,IAAI,CAAE,KAAKA,IADN,CAELI,KAAK,CAAE,KAAKA,KAFP,CAGLH,IAAI,CAAE,KAAKA,IAHN,CAILC,MAAM,CAAE,KAAKA,MAJR,CAAP,CAMD,CAPD,CASA,MAAOH,MAAP,CACD,CArD+B,EAAzB,CAqDF;AAELV,aAAa,CAACU,KAAD,CAAb,CACA;AACA;AACA,GAEA,MAAO,SAASQ,OAAT,CAAgBC,SAAhB,CAA2B,CAChC,MAAOA,UAAS,EAAI,IAAb,EAAqB,MAAOA,UAAS,CAACR,IAAjB,GAA0B,QAAtD,CACD,CACD;AACA;AACA"},"metadata":{},"sourceType":"module"}