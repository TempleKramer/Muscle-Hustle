{"ast":null,"code":"import{dep}from\"optimism\";import{Slot}from\"@wry/context\";export var cacheSlot=new Slot();var cacheInfoMap=new WeakMap();function getCacheInfo(cache){var info=cacheInfoMap.get(cache);if(!info){cacheInfoMap.set(cache,info={vars:new Set(),dep:dep()});}return info;}export function forgetCache(cache){getCacheInfo(cache).vars.forEach(function(rv){return rv.forgetCache(cache);});}export function recallCache(cache){getCacheInfo(cache).vars.forEach(function(rv){return rv.attachCache(cache);});}export function makeVar(value){var caches=new Set();var listeners=new Set();var rv=function rv(newValue){if(arguments.length>0){if(value!==newValue){value=newValue;caches.forEach(function(cache){getCacheInfo(cache).dep.dirty(rv);broadcast(cache);});var oldListeners=Array.from(listeners);listeners.clear();oldListeners.forEach(function(listener){return listener(value);});}}else{var cache=cacheSlot.getValue();if(cache){attach(cache);getCacheInfo(cache).dep(rv);}}return value;};rv.onNextChange=function(listener){listeners.add(listener);return function(){listeners.delete(listener);};};var attach=rv.attachCache=function(cache){caches.add(cache);getCacheInfo(cache).vars.add(rv);return rv;};rv.forgetCache=function(cache){return caches.delete(cache);};return rv;}function broadcast(cache){if(cache.broadcastWatches){cache.broadcastWatches();}}","map":{"version":3,"mappings":"AAAA,OAASA,GAAT,KAAkD,UAAlD,CACA,OAASC,IAAT,KAAqB,cAArB,CAeA,MAAO,IAAMC,UAAS,CAAG,GAAID,KAAJ,EAAlB,CAEP,GAAME,aAAY,CAAG,GAAIC,QAAJ,EAArB,CAKA,QAASC,aAAT,CAAsBC,KAAtB,CAA6C,CAC3C,GAAIC,KAAI,CAAGJ,YAAY,CAACK,GAAb,CAAiBF,KAAjB,CAAX,CACA,GAAI,CAACC,IAAL,CAAW,CACTJ,YAAY,CAACM,GAAb,CAAiBH,KAAjB,CAAwBC,IAAI,CAAG,CAC7BG,IAAI,CAAE,GAAIC,IAAJ,EADuB,CAE7BX,GAAG,CAAEA,GAAG,EAFqB,CAA/B,EAID,CACD,MAAOO,KAAP,CACD,CAED,MAAM,SAAUK,YAAV,CAAsBN,KAAtB,CAA6C,CACjDD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBG,OAAzB,CAAiC,YAAE,CAAI,SAAE,CAACD,WAAH,CAAeN,KAAf,EAAqB,CAA5D,EACD,CAUD,MAAM,SAAUQ,YAAV,CAAsBR,KAAtB,CAA6C,CACjDD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBG,OAAzB,CAAiC,YAAE,CAAI,SAAE,CAACE,WAAH,CAAeT,KAAf,EAAqB,CAA5D,EACD,CAED,MAAM,SAAUU,QAAV,CAAqBC,KAArB,CAA6B,CACjC,GAAMC,OAAM,CAAG,GAAIP,IAAJ,EAAf,CACA,GAAMQ,UAAS,CAAG,GAAIR,IAAJ,EAAlB,CAEA,GAAMS,GAAE,CAAmB,QAArBA,GAAqB,CAAUC,QAAV,CAAkB,CAC3C,GAAIC,SAAS,CAACC,MAAV,CAAmB,CAAvB,CAA0B,CACxB,GAAIN,KAAK,GAAKI,QAAd,CAAwB,CACtBJ,KAAK,CAAGI,QAAR,CACAH,MAAM,CAACL,OAAP,CAAe,eAAK,CAIlBR,YAAY,CAACC,KAAD,CAAZ,CAAoBN,GAApB,CAAwBwB,KAAxB,CAA8BJ,EAA9B,EAGAK,SAAS,CAACnB,KAAD,CAAT,CACD,CARD,EAUA,GAAMoB,aAAY,CAAGC,KAAK,CAACC,IAAN,CAAWT,SAAX,CAArB,CACAA,SAAS,CAACU,KAAV,GACAH,YAAY,CAACb,OAAb,CAAqB,kBAAQ,CAAI,eAAQ,CAACI,KAAD,CAAR,CAAe,CAAhD,EACD,CACF,CAjBD,IAiBO,CAIL,GAAMX,MAAK,CAAGJ,SAAS,CAAC4B,QAAV,EAAd,CACA,GAAIxB,KAAJ,CAAW,CACTyB,MAAM,CAACzB,KAAD,CAAN,CACAD,YAAY,CAACC,KAAD,CAAZ,CAAoBN,GAApB,CAAwBoB,EAAxB,EACD,CACF,CAED,MAAOH,MAAP,CACD,CA9BD,CAgCAG,EAAE,CAACY,YAAH,CAAkB,kBAAQ,CACxBb,SAAS,CAACc,GAAV,CAAcC,QAAd,EACA,MAAO,YACLf,SAAS,CAACgB,MAAV,CAAiBD,QAAjB,EACD,CAFD,CAGD,CALD,CAOA,GAAMH,OAAM,CAAGX,EAAE,CAACL,WAAH,CAAiB,eAAK,CACnCG,MAAM,CAACe,GAAP,CAAW3B,KAAX,EACAD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBuB,GAAzB,CAA6Bb,EAA7B,EACA,MAAOA,GAAP,CACD,CAJD,CAMAA,EAAE,CAACR,WAAH,CAAiB,eAAK,CAAI,aAAM,CAACuB,MAAP,CAAc7B,KAAd,EAAoB,CAA9C,CAEA,MAAOc,GAAP,CACD,CAQD,QAASK,UAAT,CAAmBnB,KAAnB,CAAuC,CACrC,GAAIA,KAAK,CAAC8B,gBAAV,CAA4B,CAC1B9B,KAAK,CAAC8B,gBAAN,GACD,CACF","names":["dep","Slot","cacheSlot","cacheInfoMap","WeakMap","getCacheInfo","cache","info","get","set","vars","Set","forgetCache","forEach","recallCache","attachCache","makeVar","value","caches","listeners","rv","newValue","arguments","length","dirty","broadcast","oldListeners","Array","from","clear","getValue","attach","onNextChange","add","listener","delete","broadcastWatches"],"sourceRoot":"","sources":["../../../src/cache/inmemory/reactiveVars.ts"],"sourcesContent":["import { dep, OptimisticDependencyFunction } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<ApolloCache<any>, {\n  vars: Set<ReactiveVar<any>>;\n  dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n}>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set,\n      dep: dep(),\n    });\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach(cache => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}