{"ast":null,"code":"import{__extends}from\"tslib\";var genericMessage=\"Invariant Violation\";var _a=Object.setPrototypeOf,setPrototypeOf=_a===void 0?function(obj,proto){obj.__proto__=proto;return obj;}:_a;var InvariantError=/** @class */function(_super){__extends(InvariantError,_super);function InvariantError(message){if(message===void 0){message=genericMessage;}var _this=_super.call(this,typeof message===\"number\"?genericMessage+\": \"+message+\" (see https://github.com/apollographql/invariant-packages)\":message)||this;_this.framesToPop=1;_this.name=genericMessage;setPrototypeOf(_this,InvariantError.prototype);return _this;}return InvariantError;}(Error);export{InvariantError};export function invariant(condition,message){if(!condition){throw new InvariantError(message);}}var verbosityLevels=[\"debug\",\"log\",\"warn\",\"error\",\"silent\"];var verbosityLevel=verbosityLevels.indexOf(\"log\");function wrapConsoleMethod(name){return function(){if(verbosityLevels.indexOf(name)>=verbosityLevel){// Default to console.log if this host environment happens not to provide\n// all the console.* methods we need.\nvar method=console[name]||console.log;return method.apply(console,arguments);}};}(function(invariant){invariant.debug=wrapConsoleMethod(\"debug\");invariant.log=wrapConsoleMethod(\"log\");invariant.warn=wrapConsoleMethod(\"warn\");invariant.error=wrapConsoleMethod(\"error\");})(invariant||(invariant={}));export function setVerbosity(level){var old=verbosityLevels[verbosityLevel];verbosityLevel=Math.max(0,verbosityLevels.indexOf(level));return old;}export default invariant;","map":{"version":3,"mappings":"6BAAA,GAAMA,eAAc,CAAG,qBAAvB,CAEE,OAIEC,MAAa,eAJf,eAAc,aAAG,SAAUC,GAAV,CAAoBC,KAApB,CAA8B,CAC7CD,GAAG,CAACE,SAAJ,CAAgBD,KAAhB,CACA,MAAOD,IAAP,CACD,CAHa,CAGbG,EAHD,CAMF,iDAAoCC,iCAGlC,wBAAYC,OAAZ,CAAqD,CAAzC,4CAAyC,CAArD,UACEC,iBACE,MAAOD,QAAP,GAAmB,QAAnB,CACOP,cAAc,KAAd,CAAmBO,OAAnB,CAA0B,4DADjC,CAEIA,OAHN,GAIC,IALH,CAFAE,kBAAc,CAAd,CACAA,WAAOT,cAAP,CAOEU,cAAc,CAACD,KAAD,CAAOE,cAAc,CAACC,SAAtB,CAAd,cACD,CACH,sBAAC,CAXD,CAAoCC,KAApC,yBAaA,MAAM,SAAUC,UAAV,CACJC,SADI,CAEJR,OAFI,CAEqB,CAEzB,GAAI,CAACQ,SAAL,CAAgB,CACd,KAAM,IAAIJ,eAAJ,CAAmBJ,OAAnB,CAAN,CACD,CACF,CAED,GAAMS,gBAAe,CAAG,CAAC,OAAD,CAAU,KAAV,CAAiB,MAAjB,CAAyB,OAAzB,CAAkC,QAAlC,CAAxB,CAGA,GAAIC,eAAc,CAAGD,eAAe,CAACE,OAAhB,CAAwB,KAAxB,CAArB,CAEA,QAASC,kBAAT,CAAwDC,IAAxD,CAA+D,CAC7D,MAAO,YACL,GAAIJ,eAAe,CAACE,OAAhB,CAAwBE,IAAxB,GAAiCH,cAArC,CAAqD,CACnD;AACA;AACA,GAAMI,OAAM,CAAGC,OAAO,CAACF,IAAD,CAAP,EAAiBE,OAAO,CAACC,GAAxC,CACA,MAAOF,OAAM,CAACG,KAAP,CAAaF,OAAb,CAAsBG,SAAtB,CAAP,CACD,CACqB,CAPxB,CAQD,CAED,UAAiBX,SAAjB,CAA0B,CACXA,gBAAQK,iBAAiB,CAAC,OAAD,CAAzB,CACAL,cAAMK,iBAAiB,CAAC,KAAD,CAAvB,CACAL,eAAOK,iBAAiB,CAAC,MAAD,CAAxB,CACAL,gBAAQK,iBAAiB,CAAC,OAAD,CAAzB,CACd,CALD,EAAiBL,SAAS,GAATA,SAAS,IAA1B,EAOA,MAAM,SAAUY,aAAV,CAAuBC,KAAvB,CAA4C,CAChD,GAAMC,IAAG,CAAGZ,eAAe,CAACC,cAAD,CAA3B,CACAA,cAAc,CAAGY,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYd,eAAe,CAACE,OAAhB,CAAwBS,KAAxB,CAAZ,CAAjB,CACA,MAAOC,IAAP,CACD,CAED,cAAed,UAAf","names":["genericMessage","Object","obj","proto","__proto__","_a","__extends","message","_super","_this","setPrototypeOf","InvariantError","prototype","Error","invariant","condition","verbosityLevels","verbosityLevel","indexOf","wrapConsoleMethod","name","method","console","log","apply","arguments","setVerbosity","level","old","Math","max"],"sourceRoot":"","sources":["../src/invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}