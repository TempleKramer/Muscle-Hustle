{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */export function LoneSchemaDefinitionRule(context){var _ref,_ref2,_oldSchema$astNode;var oldSchema=context.getSchema();var alreadyDefined=(_ref=(_ref2=(_oldSchema$astNode=oldSchema===null||oldSchema===void 0?void 0:oldSchema.astNode)!==null&&_oldSchema$astNode!==void 0?_oldSchema$astNode:oldSchema===null||oldSchema===void 0?void 0:oldSchema.getQueryType())!==null&&_ref2!==void 0?_ref2:oldSchema===null||oldSchema===void 0?void 0:oldSchema.getMutationType())!==null&&_ref!==void 0?_ref:oldSchema===null||oldSchema===void 0?void 0:oldSchema.getSubscriptionType();var schemaDefinitionsCount=0;return{SchemaDefinition:function SchemaDefinition(node){if(alreadyDefined){context.reportError(new GraphQLError('Cannot define a new schema within a schema extension.',node));return;}if(schemaDefinitionsCount>0){context.reportError(new GraphQLError('Must provide only one schema definition.',node));}++schemaDefinitionsCount;}};}","map":{"version":3,"names":["GraphQLError","LoneSchemaDefinitionRule","context","_ref","_ref2","_oldSchema$astNode","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  var oldSchema = context.getSchema();\n  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError('Cannot define a new schema within a schema extension.', node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError('Must provide only one schema definition.', node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,yBAAT,CAAkCC,OAAlC,CAA2C,CAChD,GAAIC,KAAJ,CAAUC,KAAV,CAAiBC,kBAAjB,CAEA,GAAIC,UAAS,CAAGJ,OAAO,CAACK,SAAR,EAAhB,CACA,GAAIC,eAAc,CAAG,CAACL,IAAI,CAAG,CAACC,KAAK,CAAG,CAACC,kBAAkB,CAAGC,SAAS,GAAK,IAAd,EAAsBA,SAAS,GAAK,IAAK,EAAzC,CAA6C,IAAK,EAAlD,CAAsDA,SAAS,CAACG,OAAtF,IAAmG,IAAnG,EAA2GJ,kBAAkB,GAAK,IAAK,EAAvI,CAA2IA,kBAA3I,CAAgKC,SAAS,GAAK,IAAd,EAAsBA,SAAS,GAAK,IAAK,EAAzC,CAA6C,IAAK,EAAlD,CAAsDA,SAAS,CAACI,YAAV,EAA/N,IAA6P,IAA7P,EAAqQN,KAAK,GAAK,IAAK,EAApR,CAAwRA,KAAxR,CAAgSE,SAAS,GAAK,IAAd,EAAsBA,SAAS,GAAK,IAAK,EAAzC,CAA6C,IAAK,EAAlD,CAAsDA,SAAS,CAACK,eAAV,EAA9V,IAA+X,IAA/X,EAAuYR,IAAI,GAAK,IAAK,EAArZ,CAAyZA,IAAzZ,CAAgaG,SAAS,GAAK,IAAd,EAAsBA,SAAS,GAAK,IAAK,EAAzC,CAA6C,IAAK,EAAlD,CAAsDA,SAAS,CAACM,mBAAV,EAA3e,CACA,GAAIC,uBAAsB,CAAG,CAA7B,CACA,MAAO,CACLC,gBAAgB,CAAE,QAASA,iBAAT,CAA0BC,IAA1B,CAAgC,CAChD,GAAIP,cAAJ,CAAoB,CAClBN,OAAO,CAACc,WAAR,CAAoB,GAAIhB,aAAJ,CAAiB,uDAAjB,CAA0Ee,IAA1E,CAApB,EACA,OACD,CAED,GAAIF,sBAAsB,CAAG,CAA7B,CAAgC,CAC9BX,OAAO,CAACc,WAAR,CAAoB,GAAIhB,aAAJ,CAAiB,0CAAjB,CAA6De,IAA7D,CAApB,EACD,CAED,EAAEF,sBAAF,CACD,CAZI,CAAP,CAcD"},"metadata":{},"sourceType":"module"}