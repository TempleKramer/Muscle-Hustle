{"ast":null,"code":"import{invariant}from\"../../utilities/globals/index.js\";import*as React from'react';import{getApolloContext}from\"./ApolloContext.js\";export var ApolloProvider=function ApolloProvider(_a){var client=_a.client,children=_a.children;var ApolloContext=getApolloContext();return React.createElement(ApolloContext.Consumer,null,function(context){if(context===void 0){context={};}if(client&&context.client!==client){context=Object.assign({},context,{client:client});}__DEV__?invariant(context.client,'ApolloProvider was not passed a client instance. Make '+'sure you pass in your client via the \"client\" prop.'):invariant(context.client,28);return React.createElement(ApolloContext.Provider,{value:context},children);});};","map":{"version":3,"mappings":"AAAA,OAASA,SAAT,KAA0B,kCAA1B,CAEA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAGA,OAASC,gBAAT,KAAiC,oBAAjC,CAOA,MAAO,IAAMC,eAAc,CAAuC,QAArDA,eAAqD,CAACC,EAAD,CAGjE,IAFCC,OAAM,WACNC,QAAQ,aAER,GAAMC,cAAa,CAAGL,gBAAgB,EAAtC,CACA,MACED,qBAACM,aAAa,CAACC,QAAf,CAAuB,IAAvB,CACG,SAACC,OAAD,CAAkB,CAAjB,gCAAiB,CACjB,GAAIJ,MAAM,EAAII,OAAO,CAACJ,MAAR,GAAmBA,MAAjC,CAAyC,CACvCI,OAAO,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBF,OAAlB,CAA2B,CAAEJ,MAAM,OAAR,CAA3B,CAAV,CACD,CAEDO,QACEZ,SAAQ,QACR,OADQ,CACR,yDACE,qDAFM,CADV,CAIEA,4BAJF,CAMA,MACEC,qBAACM,aAAa,CAACM,QAAf,CAAuB,CAACC,KAAK,CAAEL,OAAR,CAAvB,CACGH,QADH,CADF,CAKD,CAjBH,CADF,CAqBD,CA1BM","names":["invariant","React","getApolloContext","ApolloProvider","_a","client","children","ApolloContext","Consumer","context","Object","assign","__DEV__","Provider","value"],"sourceRoot":"","sources":["../../../src/react/context/ApolloProvider.tsx"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport * as React from 'react';\n\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children\n}) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any = {}) => {\n        if (client && context.client !== client) {\n          context = Object.assign({}, context, { client });\n        }\n\n        invariant(\n          context.client,\n          'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.'\n        );\n\n        return (\n          <ApolloContext.Provider value={context}>\n            {children}\n          </ApolloContext.Provider>\n        );\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}