{"ast":null,"code":"import inspect from\"../../jsutils/inspect.mjs\";import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{Kind}from\"../../language/kinds.mjs\";import{isNonNullType}from\"../../type/definition.mjs\";import{typeFromAST}from\"../../utilities/typeFromAST.mjs\";import{isTypeSubTypeOf}from\"../../utilities/typeComparators.mjs\";/**\n * Variables passed to field arguments conform to type\n */export function VariablesInAllowedPositionRule(context){var varDefMap=Object.create(null);return{OperationDefinition:{enter:function enter(){varDefMap=Object.create(null);},leave:function leave(operation){var usages=context.getRecursiveVariableUsages(operation);for(var _i2=0;_i2<usages.length;_i2++){var _ref2=usages[_i2];var node=_ref2.node;var type=_ref2.type;var defaultValue=_ref2.defaultValue;var varName=node.name.value;var varDef=varDefMap[varName];if(varDef&&type){// A var type is allowed if it is the same or more strict (e.g. is\n// a subtype of) than the expected type. It can be more strict if\n// the variable type is non-null when the expected type is nullable.\n// If both are list types, the variable item type can be more strict\n// than the expected item type (contravariant).\nvar schema=context.getSchema();var varType=typeFromAST(schema,varDef.type);if(varType&&!allowedVariableUsage(schema,varType,varDef.defaultValue,type,defaultValue)){var varTypeStr=inspect(varType);var typeStr=inspect(type);context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName,\"\\\" of type \\\"\").concat(varTypeStr,\"\\\" used in position expecting type \\\"\").concat(typeStr,\"\\\".\"),[varDef,node]));}}}}},VariableDefinition:function VariableDefinition(node){varDefMap[node.variable.name.value]=node;}};}/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */function allowedVariableUsage(schema,varType,varDefaultValue,locationType,locationDefaultValue){if(isNonNullType(locationType)&&!isNonNullType(varType)){var hasNonNullVariableDefaultValue=varDefaultValue!=null&&varDefaultValue.kind!==Kind.NULL;var hasLocationDefaultValue=locationDefaultValue!==undefined;if(!hasNonNullVariableDefaultValue&&!hasLocationDefaultValue){return false;}var nullableLocationType=locationType.ofType;return isTypeSubTypeOf(schema,varType,nullableLocationType);}return isTypeSubTypeOf(schema,varType,locationType);}","map":{"version":3,"names":["inspect","GraphQLError","Kind","isNonNullType","typeFromAST","isTypeSubTypeOf","VariablesInAllowedPositionRule","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_i2","length","_ref2","node","type","defaultValue","varName","name","value","varDef","schema","getSchema","varType","allowedVariableUsage","varTypeStr","typeStr","reportError","concat","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              var varTypeStr = inspect(varType);\n              var typeStr = inspect(type);\n              context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}