{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarma\\\\school\\\\challenges\\\\Project3_Final\\\\fitness-app\\\\client\\\\src\\\\App.js\";\n// import logo from './logo.svg';\n// import './App.css';\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// // export default App;\n// import React from 'react';\nimport React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Login } from \"./login\";\nimport { Register } from \"./register\"; // import 'bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   createHttpLink,\n// } from '@apollo/client';\n// import { setContext } from '@apollo/client/link/context';\n// import Navbar from './components/Navbar';\n// //Construct our main GraphQL API endpoint\n// const httpLink = createHttpLink({\n//   uri: '/graphql',\n// });\n// //Construct request middleware that will attach the JWT token to every request as an `authorization` header\n// const authLink = setContext((_, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   const token = localStorage.getItem('id_token');\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `Bearer ${token}` : '',\n//     },\n//   };\n// });\n// const client = new ApolloClient({\n//   // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n// function App() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Router>\n//         <>\n//           <Navbar />\n//           <Switch>\n//              <Route exact path=\"/\" component={Navbar} />\n//             {/* <Route exact path=\"/saved\" component={SavedBooks} /> */}\n//             <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} /> \n//           </Switch>\n//         </>\n//       </Router>\n//     </ApolloProvider>\n//   );\n// }\n// export default App;\n\nfunction App() {\n  const [currentForm, setCurrentForm] = useState('login');\n\n  const toggleForm = formName => {\n    setCurrentForm(formName);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, currentForm === \"login\" ? /*#__PURE__*/React.createElement(Login, {\n    onFormSwitch: toggleForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(Register, {\n    onFormSwitch: toggleForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 73\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","Login","Register","App","currentForm","setCurrentForm","toggleForm","formName"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/fitness-app/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// // export default App;\n// import React from 'react';\nimport React, { useState } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { Login } from \"./login\";\nimport { Register } from \"./register\";\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   createHttpLink,\n// } from '@apollo/client';\n// import { setContext } from '@apollo/client/link/context';\n\n// import Navbar from './components/Navbar';\n\n// //Construct our main GraphQL API endpoint\n// const httpLink = createHttpLink({\n//   uri: '/graphql',\n// });\n\n// //Construct request middleware that will attach the JWT token to every request as an `authorization` header\n// const authLink = setContext((_, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   const token = localStorage.getItem('id_token');\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `Bearer ${token}` : '',\n//     },\n//   };\n// });\n\n// const client = new ApolloClient({\n//   // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n\n// function App() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Router>\n//         <>\n//           <Navbar />\n//           <Switch>\n//              <Route exact path=\"/\" component={Navbar} />\n//             {/* <Route exact path=\"/saved\" component={SavedBooks} /> */}\n//             <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} /> \n//           </Switch>\n//         </>\n//       </Router>\n//     </ApolloProvider>\n//   );\n// }\n\n// export default App;\n\n\n\n\nfunction App() {\n  const [currentForm, setCurrentForm] = useState('login');\n\n  const toggleForm = (formName) => {\n    setCurrentForm(formName);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        currentForm === \"login\" ? <Login onFormSwitch={toggleForm} /> : <Register onFormSwitch={toggleForm} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,OAAD,CAA9C;;EAEA,MAAMM,UAAU,GAAIC,QAAD,IAAc;IAC/BF,cAAc,CAACE,QAAD,CAAd;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEIH,WAAW,KAAK,OAAhB,gBAA0B,oBAAC,KAAD;IAAO,YAAY,EAAEE,UAArB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAA1B,gBAAgE,oBAAC,QAAD;IAAU,YAAY,EAAEA,UAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFpE,CADF;AAOD;;AAED,eAAeH,GAAf"},"metadata":{},"sourceType":"module"}