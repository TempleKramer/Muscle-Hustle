{"ast":null,"code":"import devAssert from\"../jsutils/devAssert.mjs\";import{Kind}from\"../language/kinds.mjs\";import{parse}from\"../language/parser.mjs\";import{assertValidSDL}from\"../validation/validate.mjs\";import{GraphQLSchema}from\"../type/schema.mjs\";import{specifiedDirectives}from\"../type/directives.mjs\";import{extendSchemaImpl}from\"./extendSchema.mjs\";/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */export function buildASTSchema(documentAST,options){documentAST!=null&&documentAST.kind===Kind.DOCUMENT||devAssert(0,'Must provide valid Document AST.');if((options===null||options===void 0?void 0:options.assumeValid)!==true&&(options===null||options===void 0?void 0:options.assumeValidSDL)!==true){assertValidSDL(documentAST);}var emptySchemaConfig={description:undefined,types:[],directives:[],extensions:undefined,extensionASTNodes:[],assumeValid:false};var config=extendSchemaImpl(emptySchemaConfig,documentAST,options);if(config.astNode==null){for(var _i2=0,_config$types2=config.types;_i2<_config$types2.length;_i2++){var type=_config$types2[_i2];switch(type.name){// Note: While this could make early assertions to get the correctly\n// typed values below, that would throw immediately while type system\n// validation with validateSchema() will produce more actionable results.\ncase'Query':config.query=type;break;case'Mutation':config.mutation=type;break;case'Subscription':config.subscription=type;break;}}}var directives=config.directives;// If specified directives were not explicitly declared, add them.\nvar _loop=function _loop(_i4){var stdDirective=specifiedDirectives[_i4];if(directives.every(function(directive){return directive.name!==stdDirective.name;})){directives.push(stdDirective);}};for(var _i4=0;_i4<specifiedDirectives.length;_i4++){_loop(_i4);}return new GraphQLSchema(config);}/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */export function buildSchema(source,options){var document=parse(source,{noLocation:options===null||options===void 0?void 0:options.noLocation,allowLegacySDLEmptyFields:options===null||options===void 0?void 0:options.allowLegacySDLEmptyFields,allowLegacySDLImplementsInterfaces:options===null||options===void 0?void 0:options.allowLegacySDLImplementsInterfaces,experimentalFragmentVariables:options===null||options===void 0?void 0:options.experimentalFragmentVariables});return buildASTSchema(document,{commentDescriptions:options===null||options===void 0?void 0:options.commentDescriptions,assumeValidSDL:options===null||options===void 0?void 0:options.assumeValidSDL,assumeValid:options===null||options===void 0?void 0:options.assumeValid});}","map":{"version":3,"names":["devAssert","Kind","parse","assertValidSDL","GraphQLSchema","specifiedDirectives","extendSchemaImpl","buildASTSchema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","extensionASTNodes","config","astNode","_i2","_config$types2","length","type","name","query","mutation","subscription","_loop","_i4","stdDirective","every","directive","push","buildSchema","source","document","noLocation","allowLegacySDLEmptyFields","allowLegacySDLImplementsInterfaces","experimentalFragmentVariables","commentDescriptions"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/buildASTSchema.mjs"],"sourcesContent":["import devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { parse } from \"../language/parser.mjs\";\nimport { assertValidSDL } from \"../validation/validate.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedDirectives } from \"../type/directives.mjs\";\nimport { extendSchemaImpl } from \"./extendSchema.mjs\";\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDL(documentAST);\n  }\n\n  var emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: undefined,\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  var config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {\n      var type = _config$types2[_i2];\n\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  var directives = config.directives; // If specified directives were not explicitly declared, add them.\n\n  var _loop = function _loop(_i4) {\n    var stdDirective = specifiedDirectives[_i4];\n\n    if (directives.every(function (directive) {\n      return directive.name !== stdDirective.name;\n    })) {\n      directives.push(stdDirective);\n    }\n  };\n\n  for (var _i4 = 0; _i4 < specifiedDirectives.length; _i4++) {\n    _loop(_i4);\n  }\n\n  return new GraphQLSchema(config);\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  var document = parse(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,\n    allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,\n    experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables\n  });\n  return buildASTSchema(document, {\n    commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}