{"ast":null,"code":"import isPromise from\"./isPromise.mjs\";/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */export default function promiseReduce(values,callback,initialValue){return values.reduce(function(previous,value){return isPromise(previous)?previous.then(function(resolved){return callback(resolved,value);}):callback(previous,value);},initialValue);}","map":{"version":3,"names":["isPromise","promiseReduce","values","callback","initialValue","reduce","previous","value","then","resolved"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/jsutils/promiseReduce.mjs"],"sourcesContent":["import isPromise from \"./isPromise.mjs\";\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\nexport default function promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return isPromise(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n}\n"],"mappings":"AAAA,MAAOA,UAAP,KAAsB,iBAAtB,CACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,cAAe,SAASC,cAAT,CAAuBC,MAAvB,CAA+BC,QAA/B,CAAyCC,YAAzC,CAAuD,CACpE,MAAOF,OAAM,CAACG,MAAP,CAAc,SAAUC,QAAV,CAAoBC,KAApB,CAA2B,CAC9C,MAAOP,UAAS,CAACM,QAAD,CAAT,CAAsBA,QAAQ,CAACE,IAAT,CAAc,SAAUC,QAAV,CAAoB,CAC7D,MAAON,SAAQ,CAACM,QAAD,CAAWF,KAAX,CAAf,CACD,CAF4B,CAAtB,CAEFJ,QAAQ,CAACG,QAAD,CAAWC,KAAX,CAFb,CAGD,CAJM,CAIJH,YAJI,CAAP,CAKD"},"metadata":{},"sourceType":"module"}