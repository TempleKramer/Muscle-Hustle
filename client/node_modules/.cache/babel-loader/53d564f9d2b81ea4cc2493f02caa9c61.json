{"ast":null,"code":"import{GraphQLError}from\"../error/GraphQLError.mjs\";/**\n * Extracts the root type of the operation from the schema.\n */export function getOperationRootType(schema,operation){if(operation.operation==='query'){var queryType=schema.getQueryType();if(!queryType){throw new GraphQLError('Schema does not define the required query root type.',operation);}return queryType;}if(operation.operation==='mutation'){var mutationType=schema.getMutationType();if(!mutationType){throw new GraphQLError('Schema is not configured for mutations.',operation);}return mutationType;}if(operation.operation==='subscription'){var subscriptionType=schema.getSubscriptionType();if(!subscriptionType){throw new GraphQLError('Schema is not configured for subscriptions.',operation);}return subscriptionType;}throw new GraphQLError('Can only have query, mutation and subscription operations.',operation);}","map":{"version":3,"names":["GraphQLError","getOperationRootType","schema","operation","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/getOperationRootType.mjs"],"sourcesContent":["import { GraphQLError } from \"../error/GraphQLError.mjs\";\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    var queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    var mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    var subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,2BAA7B,CAEA;AACA;AACA,GACA,MAAO,SAASC,qBAAT,CAA8BC,MAA9B,CAAsCC,SAAtC,CAAiD,CACtD,GAAIA,SAAS,CAACA,SAAV,GAAwB,OAA5B,CAAqC,CACnC,GAAIC,UAAS,CAAGF,MAAM,CAACG,YAAP,EAAhB,CAEA,GAAI,CAACD,SAAL,CAAgB,CACd,KAAM,IAAIJ,aAAJ,CAAiB,sDAAjB,CAAyEG,SAAzE,CAAN,CACD,CAED,MAAOC,UAAP,CACD,CAED,GAAID,SAAS,CAACA,SAAV,GAAwB,UAA5B,CAAwC,CACtC,GAAIG,aAAY,CAAGJ,MAAM,CAACK,eAAP,EAAnB,CAEA,GAAI,CAACD,YAAL,CAAmB,CACjB,KAAM,IAAIN,aAAJ,CAAiB,yCAAjB,CAA4DG,SAA5D,CAAN,CACD,CAED,MAAOG,aAAP,CACD,CAED,GAAIH,SAAS,CAACA,SAAV,GAAwB,cAA5B,CAA4C,CAC1C,GAAIK,iBAAgB,CAAGN,MAAM,CAACO,mBAAP,EAAvB,CAEA,GAAI,CAACD,gBAAL,CAAuB,CACrB,KAAM,IAAIR,aAAJ,CAAiB,6CAAjB,CAAgEG,SAAhE,CAAN,CACD,CAED,MAAOK,iBAAP,CACD,CAED,KAAM,IAAIR,aAAJ,CAAiB,4DAAjB,CAA+EG,SAA/E,CAAN,CACD"},"metadata":{},"sourceType":"module"}