{"ast":null,"code":"import{isAsyncIterableIterator,isBlob,isNodeResponse,isNodeReadableStream,isReadableStream,isStreamableBlob}from\"../../utilities/common/responseIterator.js\";import asyncIterator from\"./iterators/async.js\";import nodeStreamIterator from\"./iterators/nodeStream.js\";import promiseIterator from\"./iterators/promise.js\";import readerIterator from\"./iterators/reader.js\";export function responseIterator(response){var body=response;if(isNodeResponse(response))body=response.body;if(isAsyncIterableIterator(body))return asyncIterator(body);if(isReadableStream(body))return readerIterator(body.getReader());if(isStreamableBlob(body)){return readerIterator(body.stream().getReader());}if(isBlob(body))return promiseIterator(body.arrayBuffer());if(isNodeReadableStream(body))return nodeStreamIterator(body);throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");}","map":{"version":3,"mappings":"AAMA,OACEA,uBADF,CAEEC,MAFF,CAGEC,cAHF,CAIEC,oBAJF,CAKEC,gBALF,CAMEC,gBANF,KAOO,4CAPP,CASA,MAAOC,cAAP,KAA0B,sBAA1B,CACA,MAAOC,mBAAP,KAA+B,2BAA/B,CACA,MAAOC,gBAAP,KAA4B,wBAA5B,CACA,MAAOC,eAAP,KAA2B,uBAA3B,CAEA,MAAM,SAAUC,iBAAV,CACJC,QADI,CAC6B,CAEjC,GAAIC,KAAI,CAAYD,QAApB,CAEA,GAAIT,cAAc,CAACS,QAAD,CAAlB,CAA8BC,IAAI,CAAGD,QAAQ,CAACC,IAAhB,CAE9B,GAAIZ,uBAAuB,CAACY,IAAD,CAA3B,CAAmC,MAAON,cAAa,CAAIM,IAAJ,CAApB,CAEnC,GAAIR,gBAAgB,CAACQ,IAAD,CAApB,CAA4B,MAAOH,eAAc,CAAIG,IAAI,CAACC,SAAL,EAAJ,CAArB,CAI5B,GAAIR,gBAAgB,CAACO,IAAD,CAApB,CAA4B,CAC1B,MAAOH,eAAc,CAClBG,IAAI,CAACE,MAAL,GAA+CD,SAA/C,EADkB,CAArB,CAGD,CAED,GAAIZ,MAAM,CAACW,IAAD,CAAV,CAAkB,MAAOJ,gBAAe,CAAII,IAAI,CAACG,WAAL,EAAJ,CAAtB,CAElB,GAAIZ,oBAAoB,CAACS,IAAD,CAAxB,CAAgC,MAAOL,mBAAkB,CAAIK,IAAJ,CAAzB,CAEhC,KAAM,IAAII,MAAJ,CACJ,4EADI,CAAN,CAGD","names":["isAsyncIterableIterator","isBlob","isNodeResponse","isNodeReadableStream","isReadableStream","isStreamableBlob","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","responseIterator","response","body","getReader","stream","arrayBuffer","Error"],"sourceRoot":"","sources":["../../../src/link/http/responseIterator.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport { Response as NodeResponse } from \"node-fetch\";\nimport {\n  isAsyncIterableIterator,\n  isBlob,\n  isNodeResponse,\n  isNodeReadableStream,\n  isReadableStream,\n  isStreamableBlob,\n} from \"../../utilities/common/responseIterator\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"]},"metadata":{},"sourceType":"module"}