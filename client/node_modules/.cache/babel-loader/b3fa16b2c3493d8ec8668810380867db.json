{"ast":null,"code":"import{__assign,__spreadArray}from\"tslib\";import{print}from'graphql';;var defaultHttpOptions={includeQuery:true,includeExtensions:false,preserveHeaderCase:false};var defaultHeaders={accept:'*/*','content-type':'application/json'};var defaultOptions={method:'POST'};export var fallbackHttpConfig={http:defaultHttpOptions,headers:defaultHeaders,options:defaultOptions};export var defaultPrinter=function defaultPrinter(ast,printer){return printer(ast);};export function selectHttpOptionsAndBody(operation,fallbackConfig){var configs=[];for(var _i=2;_i<arguments.length;_i++){configs[_i-2]=arguments[_i];}configs.unshift(fallbackConfig);return selectHttpOptionsAndBodyInternal.apply(void 0,__spreadArray([operation,defaultPrinter],configs,false));}export function selectHttpOptionsAndBodyInternal(operation,printer){var configs=[];for(var _i=2;_i<arguments.length;_i++){configs[_i-2]=arguments[_i];}var options={};var http={};configs.forEach(function(config){options=__assign(__assign(__assign({},options),config.options),{headers:__assign(__assign({},options.headers),config.headers)});if(config.credentials){options.credentials=config.credentials;}http=__assign(__assign({},http),config.http);});options.headers=removeDuplicateHeaders(options.headers,http.preserveHeaderCase);var operationName=operation.operationName,extensions=operation.extensions,variables=operation.variables,query=operation.query;var body={operationName:operationName,variables:variables};if(http.includeExtensions)body.extensions=extensions;if(http.includeQuery)body.query=printer(query,print);return{options:options,body:body};};function removeDuplicateHeaders(headers,preserveHeaderCase){if(!preserveHeaderCase){var normalizedHeaders_1=Object.create(null);Object.keys(Object(headers)).forEach(function(name){normalizedHeaders_1[name.toLowerCase()]=headers[name];});return normalizedHeaders_1;}var headerData=Object.create(null);Object.keys(Object(headers)).forEach(function(name){headerData[name.toLowerCase()]={originalName:name,value:headers[name]};});var normalizedHeaders=Object.create(null);Object.keys(headerData).forEach(function(name){normalizedHeaders[headerData[name].originalName]=headerData[name].value;});return normalizedHeaders;}","map":{"version":3,"mappings":"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","names":["print","defaultHttpOptions","includeQuery","includeExtensions","preserveHeaderCase","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","defaultPrinter","ast","printer","selectHttpOptionsAndBody","operation","fallbackConfig","configs","unshift","selectHttpOptionsAndBodyInternal","__spreadArray","forEach","config","credentials","removeDuplicateHeaders","extensions","variables","query","body","operationName","normalizedHeaders_1","Object","create","keys","name","toLowerCase","headerData","originalName","value","normalizedHeaders"],"sourceRoot":"","sources":["../../../src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * If set to true, header names won't be automatically normalized to \n   * lowercase. This allows for non-http-spec-compliant servers that might \n   * expect capitalized header names.\n   */\n  preserveHeaderCase?: boolean;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n  preserveHeaderCase?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      }\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of \n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders; \n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally \n  // capitalized header names (See #6741).\n  const headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach(name => {\n    headerData[name.toLowerCase()] = { originalName: name, value: headers[name] }\n  });\n\n  const normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach(name => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n"]},"metadata":{},"sourceType":"module"}