{"ast":null,"code":"import inspect from\"../jsutils/inspect.mjs\";import invariant from\"../jsutils/invariant.mjs\";import keyValMap from\"../jsutils/keyValMap.mjs\";import{Kind}from\"../language/kinds.mjs\";/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */export function valueFromASTUntyped(valueNode,variables){switch(valueNode.kind){case Kind.NULL:return null;case Kind.INT:return parseInt(valueNode.value,10);case Kind.FLOAT:return parseFloat(valueNode.value);case Kind.STRING:case Kind.ENUM:case Kind.BOOLEAN:return valueNode.value;case Kind.LIST:return valueNode.values.map(function(node){return valueFromASTUntyped(node,variables);});case Kind.OBJECT:return keyValMap(valueNode.fields,function(field){return field.name.value;},function(field){return valueFromASTUntyped(field.value,variables);});case Kind.VARIABLE:return variables===null||variables===void 0?void 0:variables[valueNode.name.value];}// istanbul ignore next (Not reachable. All possible value nodes have been considered)\nfalse||invariant(0,'Unexpected value node: '+inspect(valueNode));}","map":{"version":3,"names":["inspect","invariant","keyValMap","Kind","valueFromASTUntyped","valueNode","variables","kind","NULL","INT","parseInt","value","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","map","node","OBJECT","fields","field","name","VARIABLE"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/valueFromASTUntyped.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];\n  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected value node: ' + inspect(valueNode));\n}\n"],"mappings":"AAAA,MAAOA,QAAP,KAAoB,wBAApB,CACA,MAAOC,UAAP,KAAsB,0BAAtB,CACA,MAAOC,UAAP,KAAsB,0BAAtB,CACA,OAASC,IAAT,KAAqB,uBAArB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,oBAAT,CAA6BC,SAA7B,CAAwCC,SAAxC,CAAmD,CACxD,OAAQD,SAAS,CAACE,IAAlB,EACE,IAAKJ,KAAI,CAACK,IAAV,CACE,MAAO,KAAP,CAEF,IAAKL,KAAI,CAACM,GAAV,CACE,MAAOC,SAAQ,CAACL,SAAS,CAACM,KAAX,CAAkB,EAAlB,CAAf,CAEF,IAAKR,KAAI,CAACS,KAAV,CACE,MAAOC,WAAU,CAACR,SAAS,CAACM,KAAX,CAAjB,CAEF,IAAKR,KAAI,CAACW,MAAV,CACA,IAAKX,KAAI,CAACY,IAAV,CACA,IAAKZ,KAAI,CAACa,OAAV,CACE,MAAOX,UAAS,CAACM,KAAjB,CAEF,IAAKR,KAAI,CAACc,IAAV,CACE,MAAOZ,UAAS,CAACa,MAAV,CAAiBC,GAAjB,CAAqB,SAAUC,IAAV,CAAgB,CAC1C,MAAOhB,oBAAmB,CAACgB,IAAD,CAAOd,SAAP,CAA1B,CACD,CAFM,CAAP,CAIF,IAAKH,KAAI,CAACkB,MAAV,CACE,MAAOnB,UAAS,CAACG,SAAS,CAACiB,MAAX,CAAmB,SAAUC,KAAV,CAAiB,CAClD,MAAOA,MAAK,CAACC,IAAN,CAAWb,KAAlB,CACD,CAFe,CAEb,SAAUY,KAAV,CAAiB,CAClB,MAAOnB,oBAAmB,CAACmB,KAAK,CAACZ,KAAP,CAAcL,SAAd,CAA1B,CACD,CAJe,CAAhB,CAMF,IAAKH,KAAI,CAACsB,QAAV,CACE,MAAOnB,UAAS,GAAK,IAAd,EAAsBA,SAAS,GAAK,IAAK,EAAzC,CAA6C,IAAK,EAAlD,CAAsDA,SAAS,CAACD,SAAS,CAACmB,IAAV,CAAeb,KAAhB,CAAtE,CA5BJ,CA6BE;AAGF,OAASV,SAAS,CAAC,CAAD,CAAI,0BAA4BD,OAAO,CAACK,SAAD,CAAvC,CAAlB,CACD"},"metadata":{},"sourceType":"module"}