{"ast":null,"code":"import{__assign,__rest}from\"tslib\";import{wrap}from'optimism';import{getFragmentQueryDocument}from\"../../utilities/index.js\";var ApolloCache=function(){function ApolloCache(){this.getFragmentDoc=wrap(getFragmentQueryDocument);}ApolloCache.prototype.batch=function(options){var _this=this;var optimisticId=typeof options.optimistic===\"string\"?options.optimistic:options.optimistic===false?null:void 0;var updateResult;this.performTransaction(function(){return updateResult=options.update(_this);},optimisticId);return updateResult;};ApolloCache.prototype.recordOptimisticTransaction=function(transaction,optimisticId){this.performTransaction(transaction,optimisticId);};ApolloCache.prototype.transformDocument=function(document){return document;};ApolloCache.prototype.transformForLink=function(document){return document;};ApolloCache.prototype.identify=function(object){return;};ApolloCache.prototype.gc=function(){return[];};ApolloCache.prototype.modify=function(options){return false;};ApolloCache.prototype.readQuery=function(options,optimistic){if(optimistic===void 0){optimistic=!!options.optimistic;}return this.read(__assign(__assign({},options),{rootId:options.id||'ROOT_QUERY',optimistic:optimistic}));};ApolloCache.prototype.readFragment=function(options,optimistic){if(optimistic===void 0){optimistic=!!options.optimistic;}return this.read(__assign(__assign({},options),{query:this.getFragmentDoc(options.fragment,options.fragmentName),rootId:options.id,optimistic:optimistic}));};ApolloCache.prototype.writeQuery=function(_a){var id=_a.id,data=_a.data,options=__rest(_a,[\"id\",\"data\"]);return this.write(Object.assign(options,{dataId:id||'ROOT_QUERY',result:data}));};ApolloCache.prototype.writeFragment=function(_a){var id=_a.id,data=_a.data,fragment=_a.fragment,fragmentName=_a.fragmentName,options=__rest(_a,[\"id\",\"data\",\"fragment\",\"fragmentName\"]);return this.write(Object.assign(options,{query:this.getFragmentDoc(fragment,fragmentName),dataId:id,result:data}));};ApolloCache.prototype.updateQuery=function(options,_update){return this.batch({update:function update(cache){var value=cache.readQuery(options);var data=_update(value);if(data===void 0||data===null)return value;cache.writeQuery(__assign(__assign({},options),{data:data}));return data;}});};ApolloCache.prototype.updateFragment=function(options,_update2){return this.batch({update:function update(cache){var value=cache.readFragment(options);var data=_update2(value);if(data===void 0||data===null)return value;cache.writeFragment(__assign(__assign({},options),{data:data}));return data;}});};return ApolloCache;}();export{ApolloCache};","map":{"version":3,"mappings":"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","names":["wrap","getFragmentQueryDocument","ApolloCache","options","optimisticId","optimistic","updateResult","performTransaction","update","_this","transaction","document","object","read","__assign","rootId","id","query","getFragmentDoc","fragment","fragmentName","_a","data","write","Object","assign","dataId","result","batch","cache","value","readQuery","writeQuery","readFragment","writeFragment"],"sourceRoot":"","sources":["../../../src/cache/core/cache.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>,\n  ): TData | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic :\n      options.optimistic === false ? null : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => updateResult = options.update(this),\n      optimisticId,\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data,\n    }));\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data,\n    }));\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}