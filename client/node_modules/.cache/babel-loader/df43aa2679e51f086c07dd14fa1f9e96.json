{"ast":null,"code":"/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */export function dedentBlockStringValue(rawString){// Expand a block string's raw value into independent lines.\nvar lines=rawString.split(/\\r\\n|[\\n\\r]/g);// Remove common indentation from all lines but first.\nvar commonIndent=getBlockStringIndentation(rawString);if(commonIndent!==0){for(var i=1;i<lines.length;i++){lines[i]=lines[i].slice(commonIndent);}}// Remove leading and trailing blank lines.\nvar startLine=0;while(startLine<lines.length&&isBlank(lines[startLine])){++startLine;}var endLine=lines.length;while(endLine>startLine&&isBlank(lines[endLine-1])){--endLine;}// Return a string of the lines joined with U+000A.\nreturn lines.slice(startLine,endLine).join('\\n');}function isBlank(str){for(var i=0;i<str.length;++i){if(str[i]!==' '&&str[i]!=='\\t'){return false;}}return true;}/**\n * @internal\n */export function getBlockStringIndentation(value){var _commonIndent;var isFirstLine=true;var isEmptyLine=true;var indent=0;var commonIndent=null;for(var i=0;i<value.length;++i){switch(value.charCodeAt(i)){case 13://  \\r\nif(value.charCodeAt(i+1)===10){++i;// skip \\r\\n as one symbol\n}// falls through\ncase 10://  \\n\nisFirstLine=false;isEmptyLine=true;indent=0;break;case 9://   \\t\ncase 32://  <space>\n++indent;break;default:if(isEmptyLine&&!isFirstLine&&(commonIndent===null||indent<commonIndent)){commonIndent=indent;}isEmptyLine=false;}}return(_commonIndent=commonIndent)!==null&&_commonIndent!==void 0?_commonIndent:0;}/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */export function printBlockString(value){var indentation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var preferMultipleLines=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var isSingleLine=value.indexOf('\\n')===-1;var hasLeadingSpace=value[0]===' '||value[0]==='\\t';var hasTrailingQuote=value[value.length-1]==='\"';var hasTrailingSlash=value[value.length-1]==='\\\\';var printAsMultipleLines=!isSingleLine||hasTrailingQuote||hasTrailingSlash||preferMultipleLines;var result='';// Format a multi-line block quote to account for leading space.\nif(printAsMultipleLines&&!(isSingleLine&&hasLeadingSpace)){result+='\\n'+indentation;}result+=indentation?value.replace(/\\n/g,'\\n'+indentation):value;if(printAsMultipleLines){result+='\\n';}return'\"\"\"'+result.replace(/\"\"\"/g,'\\\\\"\"\"')+'\"\"\"';}","map":{"version":3,"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","startLine","isBlank","endLine","join","str","value","_commonIndent","isFirstLine","isEmptyLine","indent","charCodeAt","printBlockString","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","result","replace"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/language/blockString.mjs"],"sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}