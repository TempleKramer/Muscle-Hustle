{"ast":null,"code":"import{__assign,__rest}from\"tslib\";import{useRef}from\"react\";import{equal}from\"@wry/equality\";import{mergeDeepArray}from\"../../utilities/index.js\";import{useApolloClient}from\"./useApolloClient.js\";import{useSyncExternalStore}from\"./useSyncExternalStore.js\";export function useFragment_experimental(options){var cache=useApolloClient().cache;var fragment=options.fragment,fragmentName=options.fragmentName,from=options.from,_a=options.optimistic,optimistic=_a===void 0?true:_a,rest=__rest(options,[\"fragment\",\"fragmentName\",\"from\",\"optimistic\"]);var diffOptions=__assign(__assign({},rest),{id:typeof from===\"string\"?from:cache.identify(from),query:cache[\"getFragmentDoc\"](fragment,fragmentName),optimistic:optimistic});var resultRef=useRef();var latestDiff=cache.diff(diffOptions);return useSyncExternalStore(function(forceUpdate){var immediate=true;return cache.watch(__assign(__assign({},diffOptions),{immediate:immediate,callback:function callback(diff){if(!immediate&&!equal(diff,latestDiff)){resultRef.current=diffToResult(latestDiff=diff);forceUpdate();}immediate=false;}}));},function(){var latestDiffToResult=diffToResult(latestDiff);return resultRef.current&&equal(resultRef.current.data,latestDiffToResult.data)?resultRef.current:resultRef.current=latestDiffToResult;});}function diffToResult(diff){var result={data:diff.result,complete:!!diff.complete};if(diff.missing){result.missing=mergeDeepArray(diff.missing.map(function(error){return error.missing;}));}return result;}","map":{"version":3,"mappings":"mCAAA,OAASA,MAAT,KAAuB,OAAvB,CACA,OAASC,KAAT,KAAsB,eAAtB,CAEA,OAASC,cAAT,KAA+B,0BAA/B,CAQA,OAASC,eAAT,KAAgC,sBAAhC,CACA,OAASC,oBAAT,KAAqC,2BAArC,CAsCA,MAAM,SAAUC,yBAAV,CACJC,OADI,CACqC,CAEjC,SAAK,CAAKH,eAAe,GAAEI,KAA3B,CAGN,YAAQ,CAKND,OAAO,SALT,CACAE,YAAY,CAIVF,OAAO,aALT,CAEAG,IAAI,CAGFH,OAAO,KALT,CAGAI,GAEEJ,OAAO,WALT,CAGAK,UAAU,aAAG,IAAH,CAAOD,EAHjB,CAIGE,IAAI,QACLN,OADK,CALH,+CAKG,CAJP,CAOF,GAAMO,YAAW,sBACZD,IADY,EACR,CACPE,EAAE,CAAE,MAAOL,KAAP,GAAgB,QAAhB,CAA2BA,IAA3B,CAAkCF,KAAK,CAACQ,QAAN,CAAeN,IAAf,CAD/B,CAEPO,KAAK,CAAET,KAAK,CAAC,gBAAD,CAAL,CAAwBU,QAAxB,CAAkCT,YAAlC,CAFA,CAGPG,UAAU,WAHH,CADQ,CAAjB,CAOA,GAAMO,UAAS,CAAGlB,MAAM,EAAxB,CACA,GAAImB,WAAU,CAAGZ,KAAK,CAACa,IAAN,CAAkBP,WAAlB,CAAjB,CAEA,MAAOT,qBAAoB,CACzB,qBAAW,CACT,GAAIiB,UAAS,CAAG,IAAhB,CACA,MAAOd,MAAK,CAACe,KAAN,CAAWC,qBACbV,WADa,EACF,CACdQ,SAAS,UADK,CAEdG,QAAQ,mBAACJ,IAAD,CAAK,CACX,GAAI,CAACC,SAAD,EAAc,CAACpB,KAAK,CAACmB,IAAD,CAAOD,UAAP,CAAxB,CAA4C,CAC1CD,SAAS,CAACO,OAAV,CAAoBC,YAAY,CAACP,UAAU,CAAGC,IAAd,CAAhC,CACAO,WAAW,GACZ,CACDN,SAAS,CAAG,KAAZ,CACD,CARa,CADE,CAAX,CAAP,CAWD,CAdwB,CAgBzB,WACE,GAAMO,mBAAkB,CAAGF,YAAY,CAACP,UAAD,CAAvC,CACA,MAAOD,UAAS,CAACO,OAAV,EACLxB,KAAK,CAACiB,SAAS,CAACO,OAAV,CAAkBI,IAAnB,CAAyBD,kBAAkB,CAACC,IAA5C,CADA,CAEHX,SAAS,CAACO,OAFP,CAGFP,SAAS,CAACO,OAAV,CAAoBG,kBAHzB,CAID,CAtBwB,CAA3B,CAwBD,CAED,QAASF,aAAT,CACEN,IADF,CAC+B,CAE7B,GAAMU,OAAM,CAA6B,CACvCD,IAAI,CAAET,IAAI,CAACU,MAD4B,CAEvCC,QAAQ,CAAE,CAAC,CAACX,IAAI,CAACW,QAFsB,CAAzC,CAKA,GAAIX,IAAI,CAACY,OAAT,CAAkB,CAChBF,MAAM,CAACE,OAAP,CAAiB9B,cAAc,CAC7BkB,IAAI,CAACY,OAAL,CAAaC,GAAb,CAAiB,eAAK,CAAI,YAAK,CAACD,OAAN,CAAa,CAAvC,CAD6B,CAA/B,CAGD,CAED,MAAOF,OAAP,CACD","names":["useRef","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useFragment_experimental","options","cache","fragmentName","from","_a","optimistic","rest","diffOptions","id","identify","query","fragment","resultRef","latestDiff","diff","immediate","watch","__assign","callback","current","diffToResult","forceUpdate","latestDiffToResult","data","result","complete","missing","map"],"sourceRoot":"","sources":["../../../src/react/hooks/useFragment.ts"],"sourcesContent":["import { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport { mergeDeepArray } from \"../../utilities\";\nimport {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache\";\n\nimport { useApolloClient } from \"./useApolloClient\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\n\nexport interface UseFragmentOptions<TData, TVars>\nextends Omit<\n  Cache.DiffOptions<TData, TVars>,\n  | \"id\"\n  | \"query\"\n  | \"optimistic\"\n  | \"previousResult\"\n>, Omit<\n  Cache.ReadFragmentOptions<TData, TVars>,\n  | \"id\"\n> {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\n// Since the above definition of UseFragmentOptions can be hard to parse without\n// help from TypeScript/VSCode, here are the intended fields and their types.\n// Uncomment this code to check that it's consistent with the definition above.\n//\n// export interface UseFragmentOptions<TData, TVars> {\n//   from: string | StoreObject | Reference;\n//   fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n//   fragmentName?: string;\n//   optimistic?: boolean;\n//   variables?: TVars;\n//   returnPartialData?: boolean;\n//   canonizeResults?: boolean;\n// }\n\nexport interface UseFragmentResult<TData> {\n  data: TData | undefined;\n  complete: boolean;\n  missing?: MissingTree;\n}\n\nexport function useFragment_experimental<TData, TVars>(\n  options: UseFragmentOptions<TData, TVars>,\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const {\n    fragment,\n    fragmentName,\n    from,\n    optimistic = true,\n    ...rest\n  } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  return useSyncExternalStore(\n    forceUpdate => {\n      let immediate = true;\n      return cache.watch({\n        ...diffOptions,\n        immediate,\n        callback(diff) {\n          if (!immediate && !equal(diff, latestDiff)) {\n            resultRef.current = diffToResult(latestDiff = diff);\n            forceUpdate();\n          }\n          immediate = false;\n        },\n      });\n    },\n\n    () => {\n      const latestDiffToResult = diffToResult(latestDiff);\n      return resultRef.current &&\n        equal(resultRef.current.data, latestDiffToResult.data)\n        ? resultRef.current\n        : (resultRef.current = latestDiffToResult);\n    },\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>,\n): UseFragmentResult<TData> {\n  const result: UseFragmentResult<TData> = {\n    data: diff.result,\n    complete: !!diff.complete,\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(\n      diff.missing.map(error => error.missing),\n    );\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}