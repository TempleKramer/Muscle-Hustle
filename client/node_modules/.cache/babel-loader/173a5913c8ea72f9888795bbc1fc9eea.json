{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{isObjectType,isInterfaceType,isInputObjectType}from\"../../type/definition.mjs\";/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */export function UniqueFieldDefinitionNamesRule(context){var schema=context.getSchema();var existingTypeMap=schema?schema.getTypeMap():Object.create(null);var knownFieldNames=Object.create(null);return{InputObjectTypeDefinition:checkFieldUniqueness,InputObjectTypeExtension:checkFieldUniqueness,InterfaceTypeDefinition:checkFieldUniqueness,InterfaceTypeExtension:checkFieldUniqueness,ObjectTypeDefinition:checkFieldUniqueness,ObjectTypeExtension:checkFieldUniqueness};function checkFieldUniqueness(node){var _node$fields;var typeName=node.name.value;if(!knownFieldNames[typeName]){knownFieldNames[typeName]=Object.create(null);}// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar fieldNodes=(_node$fields=node.fields)!==null&&_node$fields!==void 0?_node$fields:[];var fieldNames=knownFieldNames[typeName];for(var _i2=0;_i2<fieldNodes.length;_i2++){var fieldDef=fieldNodes[_i2];var fieldName=fieldDef.name.value;if(hasField(existingTypeMap[typeName],fieldName)){context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName,\".\").concat(fieldName,\"\\\" already exists in the schema. It cannot also be defined in this type extension.\"),fieldDef.name));}else if(fieldNames[fieldName]){context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName,\".\").concat(fieldName,\"\\\" can only be defined once.\"),[fieldNames[fieldName],fieldDef.name]));}else{fieldNames[fieldName]=fieldDef.name;}}return false;}}function hasField(type,fieldName){if(isObjectType(type)||isInterfaceType(type)||isInputObjectType(type)){return type.getFields()[fieldName]!=null;}return false;}","map":{"version":3,"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","_i2","length","fieldDef","fieldName","hasField","reportError","concat","type","getFields"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CACA,OAASC,YAAT,CAAuBC,eAAvB,CAAwCC,iBAAxC,KAAiE,2BAAjE,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,+BAAT,CAAwCC,OAAxC,CAAiD,CACtD,GAAIC,OAAM,CAAGD,OAAO,CAACE,SAAR,EAAb,CACA,GAAIC,gBAAe,CAAGF,MAAM,CAAGA,MAAM,CAACG,UAAP,EAAH,CAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArD,CACA,GAAIC,gBAAe,CAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB,CACA,MAAO,CACLE,yBAAyB,CAAEC,oBADtB,CAELC,wBAAwB,CAAED,oBAFrB,CAGLE,uBAAuB,CAAEF,oBAHpB,CAILG,sBAAsB,CAAEH,oBAJnB,CAKLI,oBAAoB,CAAEJ,oBALjB,CAMLK,mBAAmB,CAAEL,oBANhB,CAAP,CASA,QAASA,qBAAT,CAA8BM,IAA9B,CAAoC,CAClC,GAAIC,aAAJ,CAEA,GAAIC,SAAQ,CAAGF,IAAI,CAACG,IAAL,CAAUC,KAAzB,CAEA,GAAI,CAACZ,eAAe,CAACU,QAAD,CAApB,CAAgC,CAC9BV,eAAe,CAACU,QAAD,CAAf,CAA4BZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B,CACD,CAAC;AAGF,GAAIc,WAAU,CAAG,CAACJ,YAAY,CAAGD,IAAI,CAACM,MAArB,IAAiC,IAAjC,EAAyCL,YAAY,GAAK,IAAK,EAA/D,CAAmEA,YAAnE,CAAkF,EAAnG,CACA,GAAIM,WAAU,CAAGf,eAAe,CAACU,QAAD,CAAhC,CAEA,IAAK,GAAIM,IAAG,CAAG,CAAf,CAAkBA,GAAG,CAAGH,UAAU,CAACI,MAAnC,CAA2CD,GAAG,EAA9C,CAAkD,CAChD,GAAIE,SAAQ,CAAGL,UAAU,CAACG,GAAD,CAAzB,CACA,GAAIG,UAAS,CAAGD,QAAQ,CAACP,IAAT,CAAcC,KAA9B,CAEA,GAAIQ,QAAQ,CAACxB,eAAe,CAACc,QAAD,CAAhB,CAA4BS,SAA5B,CAAZ,CAAoD,CAClD1B,OAAO,CAAC4B,WAAR,CAAoB,GAAIjC,aAAJ,CAAiB,WAAWkC,MAAX,CAAkBZ,QAAlB,CAA4B,GAA5B,EAAiCY,MAAjC,CAAwCH,SAAxC,CAAmD,oFAAnD,CAAjB,CAA2JD,QAAQ,CAACP,IAApK,CAApB,EACD,CAFD,IAEO,IAAII,UAAU,CAACI,SAAD,CAAd,CAA2B,CAChC1B,OAAO,CAAC4B,WAAR,CAAoB,GAAIjC,aAAJ,CAAiB,WAAWkC,MAAX,CAAkBZ,QAAlB,CAA4B,GAA5B,EAAiCY,MAAjC,CAAwCH,SAAxC,CAAmD,8BAAnD,CAAjB,CAAqG,CAACJ,UAAU,CAACI,SAAD,CAAX,CAAwBD,QAAQ,CAACP,IAAjC,CAArG,CAApB,EACD,CAFM,IAEA,CACLI,UAAU,CAACI,SAAD,CAAV,CAAwBD,QAAQ,CAACP,IAAjC,CACD,CACF,CAED,MAAO,MAAP,CACD,CACF,CAED,QAASS,SAAT,CAAkBG,IAAlB,CAAwBJ,SAAxB,CAAmC,CACjC,GAAI9B,YAAY,CAACkC,IAAD,CAAZ,EAAsBjC,eAAe,CAACiC,IAAD,CAArC,EAA+ChC,iBAAiB,CAACgC,IAAD,CAApE,CAA4E,CAC1E,MAAOA,KAAI,CAACC,SAAL,GAAiBL,SAAjB,GAA+B,IAAtC,CACD,CAED,MAAO,MAAP,CACD"},"metadata":{},"sourceType":"module"}