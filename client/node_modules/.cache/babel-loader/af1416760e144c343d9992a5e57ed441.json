{"ast":null,"code":"import{Trie}from'@wry/trie';export{Trie as KeyTrie}from'@wry/trie';import{Slot}from'@wry/context';export{asyncFromGen,bind as bindContext,noContext,setTimeout}from'@wry/context';function defaultDispose(){}var Cache=/** @class */function(){function Cache(max,dispose){if(max===void 0){max=Infinity;}if(dispose===void 0){dispose=defaultDispose;}this.max=max;this.dispose=dispose;this.map=new Map();this.newest=null;this.oldest=null;}Cache.prototype.has=function(key){return this.map.has(key);};Cache.prototype.get=function(key){var node=this.getNode(key);return node&&node.value;};Cache.prototype.getNode=function(key){var node=this.map.get(key);if(node&&node!==this.newest){var older=node.older,newer=node.newer;if(newer){newer.older=older;}if(older){older.newer=newer;}node.older=this.newest;node.older.newer=node;node.newer=null;this.newest=node;if(node===this.oldest){this.oldest=newer;}}return node;};Cache.prototype.set=function(key,value){var node=this.getNode(key);if(node){return node.value=value;}node={key:key,value:value,newer:null,older:this.newest};if(this.newest){this.newest.newer=node;}this.newest=node;this.oldest=this.oldest||node;this.map.set(key,node);return node.value;};Cache.prototype.clean=function(){while(this.oldest&&this.map.size>this.max){this.delete(this.oldest.key);}};Cache.prototype.delete=function(key){var node=this.map.get(key);if(node){if(node===this.newest){this.newest=node.older;}if(node===this.oldest){this.oldest=node.newer;}if(node.newer){node.newer.older=node.older;}if(node.older){node.older.newer=node.newer;}this.map.delete(key);this.dispose(node.value,key);return true;}return false;};return Cache;}();var parentEntrySlot=new Slot();var _a;var hasOwnProperty=Object.prototype.hasOwnProperty;var// This Array.from polyfill is restricted to working with Set<any> for now,\n// but we can improve the polyfill and add other input types, as needed. Note\n// that this fallback implementation will only be used if the host environment\n// does not support a native Array.from function. In most modern JS runtimes,\n// the toArray function exported here will be === Array.from.\ntoArray=(_a=Array.from,_a===void 0?function(collection){var array=[];collection.forEach(function(item){return array.push(item);});return array;}:_a);function maybeUnsubscribe(entryOrDep){var unsubscribe=entryOrDep.unsubscribe;if(typeof unsubscribe===\"function\"){entryOrDep.unsubscribe=void 0;unsubscribe();}}var emptySetPool=[];var POOL_TARGET_SIZE=100;// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition,optionalMessage){if(!condition){throw new Error(optionalMessage||\"assertion failure\");}}function valueIs(a,b){var len=a.length;return(// Unknown values are not equal to each other.\nlen>0&&// Both values must be ordinary (or both exceptional) to be equal.\nlen===b.length&&// The underlying value or exception must be the same.\na[len-1]===b[len-1]);}function valueGet(value){switch(value.length){case 0:throw new Error(\"unknown value\");case 1:return value[0];case 2:throw value[1];}}function valueCopy(value){return value.slice(0);}var Entry=/** @class */function(){function Entry(fn){this.fn=fn;this.parents=new Set();this.childValues=new Map();// When this Entry has children that are dirty, this property becomes\n// a Set containing other Entry objects, borrowed from emptySetPool.\n// When the set becomes empty, it gets recycled back to emptySetPool.\nthis.dirtyChildren=null;this.dirty=true;this.recomputing=false;this.value=[];this.deps=null;++Entry.count;}Entry.prototype.peek=function(){if(this.value.length===1&&!mightBeDirty(this)){rememberParent(this);return this.value[0];}};// This is the most important method of the Entry API, because it\n// determines whether the cached this.value can be returned immediately,\n// or must be recomputed. The overall performance of the caching system\n// depends on the truth of the following observations: (1) this.dirty is\n// usually false, (2) this.dirtyChildren is usually null/empty, and thus\n// (3) valueGet(this.value) is usually returned without recomputation.\nEntry.prototype.recompute=function(args){assert(!this.recomputing,\"already recomputing\");rememberParent(this);return mightBeDirty(this)?reallyRecompute(this,args):valueGet(this.value);};Entry.prototype.setDirty=function(){if(this.dirty)return;this.dirty=true;this.value.length=0;reportDirty(this);// We can go ahead and unsubscribe here, since any further dirty\n// notifications we receive will be redundant, and unsubscribing may\n// free up some resources, e.g. file watchers.\nmaybeUnsubscribe(this);};Entry.prototype.dispose=function(){var _this=this;this.setDirty();// Sever any dependency relationships with our own children, so those\n// children don't retain this parent Entry in their child.parents sets,\n// thereby preventing it from being fully garbage collected.\nforgetChildren(this);// Because this entry has been kicked out of the cache (in index.js),\n// we've lost the ability to find out if/when this entry becomes dirty,\n// whether that happens through a subscription, because of a direct call\n// to entry.setDirty(), or because one of its children becomes dirty.\n// Because of this loss of future information, we have to assume the\n// worst (that this entry might have become dirty very soon), so we must\n// immediately mark this entry's parents as dirty. Normally we could\n// just call entry.setDirty() rather than calling parent.setDirty() for\n// each parent, but that would leave this entry in parent.childValues\n// and parent.dirtyChildren, which would prevent the child from being\n// truly forgotten.\neachParent(this,function(parent,child){parent.setDirty();forgetChild(parent,_this);});};Entry.prototype.forget=function(){// The code that creates Entry objects in index.ts will replace this method\n// with one that actually removes the Entry from the cache, which will also\n// trigger the entry.dispose method.\nthis.dispose();};Entry.prototype.dependOn=function(dep){dep.add(this);if(!this.deps){this.deps=emptySetPool.pop()||new Set();}this.deps.add(dep);};Entry.prototype.forgetDeps=function(){var _this=this;if(this.deps){toArray(this.deps).forEach(function(dep){return dep.delete(_this);});this.deps.clear();emptySetPool.push(this.deps);this.deps=null;}};Entry.count=0;return Entry;}();function rememberParent(child){var parent=parentEntrySlot.getValue();if(parent){child.parents.add(parent);if(!parent.childValues.has(child)){parent.childValues.set(child,[]);}if(mightBeDirty(child)){reportDirtyChild(parent,child);}else{reportCleanChild(parent,child);}return parent;}}function reallyRecompute(entry,args){forgetChildren(entry);// Set entry as the parent entry while calling recomputeNewValue(entry).\nparentEntrySlot.withValue(entry,recomputeNewValue,[entry,args]);if(maybeSubscribe(entry,args)){// If we successfully recomputed entry.value and did not fail to\n// (re)subscribe, then this Entry is no longer explicitly dirty.\nsetClean(entry);}return valueGet(entry.value);}function recomputeNewValue(entry,args){entry.recomputing=true;// Set entry.value as unknown.\nentry.value.length=0;try{// If entry.fn succeeds, entry.value will become a normal Value.\nentry.value[0]=entry.fn.apply(null,args);}catch(e){// If entry.fn throws, entry.value will become exceptional.\nentry.value[1]=e;}// Either way, this line is always reached.\nentry.recomputing=false;}function mightBeDirty(entry){return entry.dirty||!!(entry.dirtyChildren&&entry.dirtyChildren.size);}function setClean(entry){entry.dirty=false;if(mightBeDirty(entry)){// This Entry may still have dirty children, in which case we can't\n// let our parents know we're clean just yet.\nreturn;}reportClean(entry);}function reportDirty(child){eachParent(child,reportDirtyChild);}function reportClean(child){eachParent(child,reportCleanChild);}function eachParent(child,callback){var parentCount=child.parents.size;if(parentCount){var parents=toArray(child.parents);for(var i=0;i<parentCount;++i){callback(parents[i],child);}}}// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent,child){// Must have called rememberParent(child) before calling\n// reportDirtyChild(parent, child).\nassert(parent.childValues.has(child));assert(mightBeDirty(child));var parentWasClean=!mightBeDirty(parent);if(!parent.dirtyChildren){parent.dirtyChildren=emptySetPool.pop()||new Set();}else if(parent.dirtyChildren.has(child)){// If we already know this child is dirty, then we must have already\n// informed our own parents that we are dirty, so we can terminate\n// the recursion early.\nreturn;}parent.dirtyChildren.add(child);// If parent was clean before, it just became (possibly) dirty (according to\n// mightBeDirty), since we just added child to parent.dirtyChildren.\nif(parentWasClean){reportDirty(parent);}}// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent,child){// Must have called rememberChild(child) before calling\n// reportCleanChild(parent, child).\nassert(parent.childValues.has(child));assert(!mightBeDirty(child));var childValue=parent.childValues.get(child);if(childValue.length===0){parent.childValues.set(child,valueCopy(child.value));}else if(!valueIs(childValue,child.value)){parent.setDirty();}removeDirtyChild(parent,child);if(mightBeDirty(parent)){return;}reportClean(parent);}function removeDirtyChild(parent,child){var dc=parent.dirtyChildren;if(dc){dc.delete(child);if(dc.size===0){if(emptySetPool.length<POOL_TARGET_SIZE){emptySetPool.push(dc);}parent.dirtyChildren=null;}}}// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent){if(parent.childValues.size>0){parent.childValues.forEach(function(_value,child){forgetChild(parent,child);});}// Remove this parent Entry from any sets to which it was added by the\n// addToSet method.\nparent.forgetDeps();// After we forget all our children, this.dirtyChildren must be empty\n// and therefore must have been reset to null.\nassert(parent.dirtyChildren===null);}function forgetChild(parent,child){child.parents.delete(parent);parent.childValues.delete(child);removeDirtyChild(parent,child);}function maybeSubscribe(entry,args){if(typeof entry.subscribe===\"function\"){try{maybeUnsubscribe(entry);// Prevent double subscriptions.\nentry.unsubscribe=entry.subscribe.apply(null,args);}catch(e){// If this Entry has a subscribe function and it threw an exception\n// (or an unsubscribe function it previously returned now throws),\n// return false to indicate that we were not able to subscribe (or\n// unsubscribe), and this Entry should remain dirty.\nentry.setDirty();return false;}}// Returning true indicates either that there was no entry.subscribe\n// function or that it succeeded.\nreturn true;}var EntryMethods={setDirty:true,dispose:true,forget:true};function dep(options){var depsByKey=new Map();var subscribe=options&&options.subscribe;function depend(key){var parent=parentEntrySlot.getValue();if(parent){var dep_1=depsByKey.get(key);if(!dep_1){depsByKey.set(key,dep_1=new Set());}parent.dependOn(dep_1);if(typeof subscribe===\"function\"){maybeUnsubscribe(dep_1);dep_1.unsubscribe=subscribe(key);}}}depend.dirty=function dirty(key,entryMethodName){var dep=depsByKey.get(key);if(dep){var m_1=entryMethodName&&hasOwnProperty.call(EntryMethods,entryMethodName)?entryMethodName:\"setDirty\";// We have to use toArray(dep).forEach instead of dep.forEach, because\n// modifying a Set while iterating over it can cause elements in the Set\n// to be removed from the Set before they've been iterated over.\ntoArray(dep).forEach(function(entry){return entry[m_1]();});depsByKey.delete(key);maybeUnsubscribe(dep);}};return depend;}function makeDefaultMakeCacheKeyFunction(){var keyTrie=new Trie(typeof WeakMap===\"function\");return function(){return keyTrie.lookupArray(arguments);};}// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nvar defaultMakeCacheKey=makeDefaultMakeCacheKeyFunction();var caches=new Set();function wrap(originalFunction,options){if(options===void 0){options=Object.create(null);}var cache=new Cache(options.max||Math.pow(2,16),function(entry){return entry.dispose();});var keyArgs=options.keyArgs;var makeCacheKey=options.makeCacheKey||makeDefaultMakeCacheKeyFunction();var optimistic=function optimistic(){var key=makeCacheKey.apply(null,keyArgs?keyArgs.apply(null,arguments):arguments);if(key===void 0){return originalFunction.apply(null,arguments);}var entry=cache.get(key);if(!entry){cache.set(key,entry=new Entry(originalFunction));entry.subscribe=options.subscribe;// Give the Entry the ability to trigger cache.delete(key), even though\n// the Entry itself does not know about key or cache.\nentry.forget=function(){return cache.delete(key);};}var value=entry.recompute(Array.prototype.slice.call(arguments));// Move this entry to the front of the least-recently used queue,\n// since we just finished computing its value.\ncache.set(key,entry);caches.add(cache);// Clean up any excess entries in the cache, but only if there is no\n// active parent entry, meaning we're not in the middle of a larger\n// computation that might be flummoxed by the cleaning.\nif(!parentEntrySlot.hasValue()){caches.forEach(function(cache){return cache.clean();});caches.clear();}return value;};Object.defineProperty(optimistic,\"size\",{get:function get(){return cache[\"map\"].size;},configurable:false,enumerable:false});function dirtyKey(key){var entry=cache.get(key);if(entry){entry.setDirty();}}optimistic.dirtyKey=dirtyKey;optimistic.dirty=function dirty(){dirtyKey(makeCacheKey.apply(null,arguments));};function peekKey(key){var entry=cache.get(key);if(entry){return entry.peek();}}optimistic.peekKey=peekKey;optimistic.peek=function peek(){return peekKey(makeCacheKey.apply(null,arguments));};function forgetKey(key){return cache.delete(key);}optimistic.forgetKey=forgetKey;optimistic.forget=function forget(){return forgetKey(makeCacheKey.apply(null,arguments));};optimistic.makeCacheKey=makeCacheKey;optimistic.getKey=keyArgs?function getKey(){return makeCacheKey.apply(null,keyArgs.apply(null,arguments));}:makeCacheKey;return Object.freeze(optimistic);}export{defaultMakeCacheKey,dep,wrap};","map":{"version":3,"mappings":"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","names":["defaultDispose","max","dispose","Map","Cache","key","map","has","node","getNode","value","get","newest","newer","older","oldest","set","size","delete","parentEntrySlot","Slot","Object","prototype","hasOwnProperty","toArray","_a","Array","collection","array","forEach","push","item","maybeUnsubscribe","entryOrDep","unsubscribe","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","fn","Set","Entry","count","mightBeDirty","rememberParent","args","recomputing","reallyRecompute","dirty","reportDirty","setDirty","forgetChildren","eachParent","parent","child","forgetChild","_this","dep","add","deps","pop","clear","getValue","parents","childValues","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","dirtyChildren","reportClean","callback","parentCount","i","parentWasClean","childValue","removeDirtyChild","dc","_value","forgetDeps","subscribe","EntryMethods","forget","options","depsByKey","depend","dep_1","dependOn","entryMethodName","m_1","call","makeDefaultMakeCacheKeyFunction","keyTrie","Trie","WeakMap","lookupArray","arguments","defaultMakeCacheKey","caches","wrap","originalFunction","create","cache","Math","pow","keyArgs","makeCacheKey","optimistic","recompute","hasValue","clean","defineProperty","configurable","enumerable","dirtyKey","peekKey","peek","forgetKey","getKey","freeze"],"sources":["../src/cache.ts","../src/context.ts","../src/helpers.ts","../src/entry.ts","../src/dep.ts","../src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const {\n  // This Array.from polyfill is restricted to working with Set<any> for now,\n  // but we can improve the polyfill and add other input types, as needed. Note\n  // that this fallback implementation will only be used if the host environment\n  // does not support a native Array.from function. In most modern JS runtimes,\n  // the toArray function exported here will be === Array.from.\n  from: toArray = (collection: Set<any>) => {\n    const array: any[] = [];\n    collection.forEach(item => array.push(item));\n    return array;\n  },\n} = Array;\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, toArray, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      toArray(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = toArray(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { hasOwnProperty, Unsubscribable, maybeUnsubscribe, toArray } from \"./helpers\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\nfunction makeDefaultMakeCacheKeyFunction<\n  TKeyArgs extends any[],\n  TCacheKey = any,\n>(): (...args: TKeyArgs) => TCacheKey {\n  const keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nexport const defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey ||\n    makeDefaultMakeCacheKeyFunction<TKeyArgs, TCacheKey>();\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false,\n  });\n\n  function dirtyKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey;\n\n  return Object.freeze(optimistic);\n}\n"]},"metadata":{},"sourceType":"module"}