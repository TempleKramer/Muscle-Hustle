{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";export function NoFragmentCyclesRule(context){// Tracks already visited fragments to maintain O(N) and to ensure that cycles\n// are not redundantly reported.\nvar visitedFrags=Object.create(null);// Array of AST nodes used to produce meaningful errors\nvar spreadPath=[];// Position in the spread path\nvar spreadPathIndexByName=Object.create(null);return{OperationDefinition:function OperationDefinition(){return false;},FragmentDefinition:function FragmentDefinition(node){detectCycleRecursive(node);return false;}};// This does a straight-forward DFS to find cycles.\n// It does not terminate when a cycle was found but continues to explore\n// the graph to find all possible cycles.\nfunction detectCycleRecursive(fragment){if(visitedFrags[fragment.name.value]){return;}var fragmentName=fragment.name.value;visitedFrags[fragmentName]=true;var spreadNodes=context.getFragmentSpreads(fragment.selectionSet);if(spreadNodes.length===0){return;}spreadPathIndexByName[fragmentName]=spreadPath.length;for(var _i2=0;_i2<spreadNodes.length;_i2++){var spreadNode=spreadNodes[_i2];var spreadName=spreadNode.name.value;var cycleIndex=spreadPathIndexByName[spreadName];spreadPath.push(spreadNode);if(cycleIndex===undefined){var spreadFragment=context.getFragment(spreadName);if(spreadFragment){detectCycleRecursive(spreadFragment);}}else{var cyclePath=spreadPath.slice(cycleIndex);var viaPath=cyclePath.slice(0,-1).map(function(s){return'\"'+s.name.value+'\"';}).join(', ');context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName,\"\\\" within itself\")+(viaPath!==''?\" via \".concat(viaPath,\".\"):'.'),cyclePath));}spreadPath.pop();}spreadPathIndexByName[fragmentName]=undefined;}}","map":{"version":3,"names":["GraphQLError","NoFragmentCyclesRule","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","value","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","length","_i2","spreadNode","spreadName","cycleIndex","push","undefined","spreadFragment","getFragment","cyclePath","slice","viaPath","map","s","join","reportError","concat","pop"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CACA,MAAO,SAASC,qBAAT,CAA8BC,OAA9B,CAAuC,CAC5C;AACA;AACA,GAAIC,aAAY,CAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB,CAAwC;AAExC,GAAIC,WAAU,CAAG,EAAjB,CAAqB;AAErB,GAAIC,sBAAqB,CAAGH,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B,CACA,MAAO,CACLG,mBAAmB,CAAE,QAASA,oBAAT,EAA+B,CAClD,MAAO,MAAP,CACD,CAHI,CAILC,kBAAkB,CAAE,QAASA,mBAAT,CAA4BC,IAA5B,CAAkC,CACpDC,oBAAoB,CAACD,IAAD,CAApB,CACA,MAAO,MAAP,CACD,CAPI,CAAP,CAQG;AACH;AACA;AAEA,QAASC,qBAAT,CAA8BC,QAA9B,CAAwC,CACtC,GAAIT,YAAY,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,CAAuC,CACrC,OACD,CAED,GAAIC,aAAY,CAAGH,QAAQ,CAACC,IAAT,CAAcC,KAAjC,CACAX,YAAY,CAACY,YAAD,CAAZ,CAA6B,IAA7B,CACA,GAAIC,YAAW,CAAGd,OAAO,CAACe,kBAAR,CAA2BL,QAAQ,CAACM,YAApC,CAAlB,CAEA,GAAIF,WAAW,CAACG,MAAZ,GAAuB,CAA3B,CAA8B,CAC5B,OACD,CAEDZ,qBAAqB,CAACQ,YAAD,CAArB,CAAsCT,UAAU,CAACa,MAAjD,CAEA,IAAK,GAAIC,IAAG,CAAG,CAAf,CAAkBA,GAAG,CAAGJ,WAAW,CAACG,MAApC,CAA4CC,GAAG,EAA/C,CAAmD,CACjD,GAAIC,WAAU,CAAGL,WAAW,CAACI,GAAD,CAA5B,CACA,GAAIE,WAAU,CAAGD,UAAU,CAACR,IAAX,CAAgBC,KAAjC,CACA,GAAIS,WAAU,CAAGhB,qBAAqB,CAACe,UAAD,CAAtC,CACAhB,UAAU,CAACkB,IAAX,CAAgBH,UAAhB,EAEA,GAAIE,UAAU,GAAKE,SAAnB,CAA8B,CAC5B,GAAIC,eAAc,CAAGxB,OAAO,CAACyB,WAAR,CAAoBL,UAApB,CAArB,CAEA,GAAII,cAAJ,CAAoB,CAClBf,oBAAoB,CAACe,cAAD,CAApB,CACD,CACF,CAND,IAMO,CACL,GAAIE,UAAS,CAAGtB,UAAU,CAACuB,KAAX,CAAiBN,UAAjB,CAAhB,CACA,GAAIO,QAAO,CAAGF,SAAS,CAACC,KAAV,CAAgB,CAAhB,CAAmB,CAAC,CAApB,EAAuBE,GAAvB,CAA2B,SAAUC,CAAV,CAAa,CACpD,MAAO,IAAMA,CAAC,CAACnB,IAAF,CAAOC,KAAb,CAAqB,GAA5B,CACD,CAFa,EAEXmB,IAFW,CAEN,IAFM,CAAd,CAGA/B,OAAO,CAACgC,WAAR,CAAoB,GAAIlC,aAAJ,CAAiB,4BAA4BmC,MAA5B,CAAmCb,UAAnC,CAA+C,kBAA/C,GAAsEQ,OAAO,GAAK,EAAZ,CAAiB,QAAQK,MAAR,CAAeL,OAAf,CAAwB,GAAxB,CAAjB,CAAgD,GAAtH,CAAjB,CAA6IF,SAA7I,CAApB,EACD,CAEDtB,UAAU,CAAC8B,GAAX,GACD,CAED7B,qBAAqB,CAACQ,YAAD,CAArB,CAAsCU,SAAtC,CACD,CACF"},"metadata":{},"sourceType":"module"}