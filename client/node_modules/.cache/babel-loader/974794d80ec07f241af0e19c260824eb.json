{"ast":null,"code":"import didYouMean from\"../../jsutils/didYouMean.mjs\";import suggestionList from\"../../jsutils/suggestionList.mjs\";import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{isTypeDefinitionNode,isTypeSystemDefinitionNode,isTypeSystemExtensionNode}from\"../../language/predicates.mjs\";import{specifiedScalarTypes}from\"../../type/scalars.mjs\";import{introspectionTypes}from\"../../type/introspection.mjs\";/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */export function KnownTypeNamesRule(context){var schema=context.getSchema();var existingTypesMap=schema?schema.getTypeMap():Object.create(null);var definedTypes=Object.create(null);for(var _i2=0,_context$getDocument$2=context.getDocument().definitions;_i2<_context$getDocument$2.length;_i2++){var def=_context$getDocument$2[_i2];if(isTypeDefinitionNode(def)){definedTypes[def.name.value]=true;}}var typeNames=Object.keys(existingTypesMap).concat(Object.keys(definedTypes));return{NamedType:function NamedType(node,_1,parent,_2,ancestors){var typeName=node.name.value;if(!existingTypesMap[typeName]&&!definedTypes[typeName]){var _ancestors$;var definitionNode=(_ancestors$=ancestors[2])!==null&&_ancestors$!==void 0?_ancestors$:parent;var isSDL=definitionNode!=null&&isSDLNode(definitionNode);if(isSDL&&isStandardTypeName(typeName)){return;}var suggestedTypes=suggestionList(typeName,isSDL?standardTypeNames.concat(typeNames):typeNames);context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName,\"\\\".\")+didYouMean(suggestedTypes),node));}}};}var standardTypeNames=[].concat(specifiedScalarTypes,introspectionTypes).map(function(type){return type.name;});function isStandardTypeName(typeName){return standardTypeNames.indexOf(typeName)!==-1;}function isSDLNode(value){return!Array.isArray(value)&&(isTypeSystemDefinitionNode(value)||isTypeSystemExtensionNode(value));}","map":{"version":3,"names":["didYouMean","suggestionList","GraphQLError","isTypeDefinitionNode","isTypeSystemDefinitionNode","isTypeSystemExtensionNode","specifiedScalarTypes","introspectionTypes","KnownTypeNamesRule","context","schema","getSchema","existingTypesMap","getTypeMap","Object","create","definedTypes","_i2","_context$getDocument$2","getDocument","definitions","length","def","name","value","typeNames","keys","concat","NamedType","node","_1","parent","_2","ancestors","typeName","_ancestors$","definitionNode","isSDL","isSDLNode","isStandardTypeName","suggestedTypes","standardTypeNames","reportError","map","type","indexOf","Array","isArray"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"],"sourcesContent":["import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedScalarTypes } from \"../../type/scalars.mjs\";\nimport { introspectionTypes } from \"../../type/introspection.mjs\";\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nexport function KnownTypeNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        var isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && isStandardTypeName(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes), node));\n      }\n    }\n  };\n}\nvar standardTypeNames = [].concat(specifiedScalarTypes, introspectionTypes).map(function (type) {\n  return type.name;\n});\n\nfunction isStandardTypeName(typeName) {\n  return standardTypeNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}