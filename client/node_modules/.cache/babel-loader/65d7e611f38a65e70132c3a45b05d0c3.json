{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */export function UniqueTypeNamesRule(context){var knownTypeNames=Object.create(null);var schema=context.getSchema();return{ScalarTypeDefinition:checkTypeName,ObjectTypeDefinition:checkTypeName,InterfaceTypeDefinition:checkTypeName,UnionTypeDefinition:checkTypeName,EnumTypeDefinition:checkTypeName,InputObjectTypeDefinition:checkTypeName};function checkTypeName(node){var typeName=node.name.value;if(schema!==null&&schema!==void 0&&schema.getType(typeName)){context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName,\"\\\" already exists in the schema. It cannot also be defined in this type definition.\"),node.name));return;}if(knownTypeNames[typeName]){context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName,\"\\\".\"),[knownTypeNames[typeName],node.name]));}else{knownTypeNames[typeName]=node.name;}return false;}}","map":{"version":3,"names":["GraphQLError","UniqueTypeNamesRule","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","value","getType","reportError","concat"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,oBAAT,CAA6BC,OAA7B,CAAsC,CAC3C,GAAIC,eAAc,CAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB,CACA,GAAIC,OAAM,CAAGJ,OAAO,CAACK,SAAR,EAAb,CACA,MAAO,CACLC,oBAAoB,CAAEC,aADjB,CAELC,oBAAoB,CAAED,aAFjB,CAGLE,uBAAuB,CAAEF,aAHpB,CAILG,mBAAmB,CAAEH,aAJhB,CAKLI,kBAAkB,CAAEJ,aALf,CAMLK,yBAAyB,CAAEL,aANtB,CAAP,CASA,QAASA,cAAT,CAAuBM,IAAvB,CAA6B,CAC3B,GAAIC,SAAQ,CAAGD,IAAI,CAACE,IAAL,CAAUC,KAAzB,CAEA,GAAIZ,MAAM,GAAK,IAAX,EAAmBA,MAAM,GAAK,IAAK,EAAnC,EAAwCA,MAAM,CAACa,OAAP,CAAeH,QAAf,CAA5C,CAAsE,CACpEd,OAAO,CAACkB,WAAR,CAAoB,GAAIpB,aAAJ,CAAiB,UAAUqB,MAAV,CAAiBL,QAAjB,CAA2B,qFAA3B,CAAjB,CAAoID,IAAI,CAACE,IAAzI,CAApB,EACA,OACD,CAED,GAAId,cAAc,CAACa,QAAD,CAAlB,CAA8B,CAC5Bd,OAAO,CAACkB,WAAR,CAAoB,GAAIpB,aAAJ,CAAiB,sCAAsCqB,MAAtC,CAA6CL,QAA7C,CAAuD,KAAvD,CAAjB,CAAgF,CAACb,cAAc,CAACa,QAAD,CAAf,CAA2BD,IAAI,CAACE,IAAhC,CAAhF,CAApB,EACD,CAFD,IAEO,CACLd,cAAc,CAACa,QAAD,CAAd,CAA2BD,IAAI,CAACE,IAAhC,CACD,CAED,MAAO,MAAP,CACD,CACF"},"metadata":{},"sourceType":"module"}