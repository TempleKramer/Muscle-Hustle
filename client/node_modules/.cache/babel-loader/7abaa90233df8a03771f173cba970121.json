{"ast":null,"code":"import{GraphQLError}from\"../../../error/GraphQLError.mjs\";import{getNamedType}from\"../../../type/definition.mjs\";import{isIntrospectionType}from\"../../../type/introspection.mjs\";/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */export function NoSchemaIntrospectionCustomRule(context){return{Field:function Field(node){var type=getNamedType(context.getType());if(type&&isIntrospectionType(type)){context.reportError(new GraphQLError(\"GraphQL introspection has been disabled, but the requested query contained the field \\\"\".concat(node.name.value,\"\\\".\"),node));}}};}","map":{"version":3,"names":["GraphQLError","getNamedType","isIntrospectionType","NoSchemaIntrospectionCustomRule","context","Field","node","type","getType","reportError","concat","name","value"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType } from \"../../../type/definition.mjs\";\nimport { isIntrospectionType } from \"../../../type/introspection.mjs\";\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nexport function NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = getNamedType(context.getType());\n\n      if (type && isIntrospectionType(type)) {\n        context.reportError(new GraphQLError(\"GraphQL introspection has been disabled, but the requested query contained the field \\\"\".concat(node.name.value, \"\\\".\"), node));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,iCAA7B,CACA,OAASC,YAAT,KAA6B,8BAA7B,CACA,OAASC,mBAAT,KAAoC,iCAApC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,gCAAT,CAAyCC,OAAzC,CAAkD,CACvD,MAAO,CACLC,KAAK,CAAE,QAASA,MAAT,CAAeC,IAAf,CAAqB,CAC1B,GAAIC,KAAI,CAAGN,YAAY,CAACG,OAAO,CAACI,OAAR,EAAD,CAAvB,CAEA,GAAID,IAAI,EAAIL,mBAAmB,CAACK,IAAD,CAA/B,CAAuC,CACrCH,OAAO,CAACK,WAAR,CAAoB,GAAIT,aAAJ,CAAiB,0FAA0FU,MAA1F,CAAiGJ,IAAI,CAACK,IAAL,CAAUC,KAA3G,CAAkH,KAAlH,CAAjB,CAA2IN,IAA3I,CAApB,EACD,CACF,CAPI,CAAP,CASD"},"metadata":{},"sourceType":"module"}