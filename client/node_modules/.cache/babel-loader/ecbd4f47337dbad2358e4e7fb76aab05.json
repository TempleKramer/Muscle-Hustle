{"ast":null,"code":"import{useEffect,useRef}from'react';/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */export default function usePrevious(value){var ref=useRef(null);useEffect(function(){ref.current=value;});return ref.current;}","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/@restart/hooks/esm/usePrevious.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,MAApB,KAAkC,OAAlC,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,cAAe,SAASC,YAAT,CAAqBC,KAArB,CAA4B,CACzC,GAAIC,IAAG,CAAGH,MAAM,CAAC,IAAD,CAAhB,CACAD,SAAS,CAAC,UAAY,CACpBI,GAAG,CAACC,OAAJ,CAAcF,KAAd,CACD,CAFQ,CAAT,CAGA,MAAOC,IAAG,CAACC,OAAX,CACD"},"metadata":{},"sourceType":"module"}