{"ast":null,"code":"import inspect from\"../jsutils/inspect.mjs\";import{GraphQLError}from\"./GraphQLError.mjs\";/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */export function locatedError(rawOriginalError,nodes,path){var _nodes;// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\nvar originalError=rawOriginalError instanceof Error?rawOriginalError:new Error('Unexpected error value: '+inspect(rawOriginalError));// Note: this uses a brand-check to support GraphQL errors originating from other contexts.\nif(Array.isArray(originalError.path)){return originalError;}return new GraphQLError(originalError.message,(_nodes=originalError.nodes)!==null&&_nodes!==void 0?_nodes:nodes,originalError.source,originalError.positions,path,originalError);}","map":{"version":3,"names":["inspect","GraphQLError","locatedError","rawOriginalError","nodes","path","_nodes","originalError","Error","Array","isArray","message","source","positions"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/error/locatedError.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n  var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}\n"],"mappings":"AAAA,MAAOA,QAAP,KAAoB,wBAApB,CACA,OAASC,YAAT,KAA6B,oBAA7B,CACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,aAAT,CAAsBC,gBAAtB,CAAwCC,KAAxC,CAA+CC,IAA/C,CAAqD,CAC1D,GAAIC,OAAJ,CAEA;AACA,GAAIC,cAAa,CAAGJ,gBAAgB,WAAYK,MAA5B,CAAoCL,gBAApC,CAAuD,GAAIK,MAAJ,CAAU,2BAA6BR,OAAO,CAACG,gBAAD,CAA9C,CAA3E,CAA8I;AAE9I,GAAIM,KAAK,CAACC,OAAN,CAAcH,aAAa,CAACF,IAA5B,CAAJ,CAAuC,CACrC,MAAOE,cAAP,CACD,CAED,MAAO,IAAIN,aAAJ,CAAiBM,aAAa,CAACI,OAA/B,CAAwC,CAACL,MAAM,CAAGC,aAAa,CAACH,KAAxB,IAAmC,IAAnC,EAA2CE,MAAM,GAAK,IAAK,EAA3D,CAA+DA,MAA/D,CAAwEF,KAAhH,CAAuHG,aAAa,CAACK,MAArI,CAA6IL,aAAa,CAACM,SAA3J,CAAsKR,IAAtK,CAA4KE,aAA5K,CAAP,CACD"},"metadata":{},"sourceType":"module"}