{"ast":null,"code":"import inspect from\"../jsutils/inspect.mjs\";import invariant from\"../jsutils/invariant.mjs\";import{Kind}from\"../language/kinds.mjs\";import{GraphQLList,GraphQLNonNull}from\"../type/definition.mjs\";/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */ /* eslint-disable no-redeclare */export function typeFromAST(schema,typeNode){/* eslint-enable no-redeclare */var innerType;if(typeNode.kind===Kind.LIST_TYPE){innerType=typeFromAST(schema,typeNode.type);return innerType&&new GraphQLList(innerType);}if(typeNode.kind===Kind.NON_NULL_TYPE){innerType=typeFromAST(schema,typeNode.type);return innerType&&new GraphQLNonNull(innerType);}// istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\nif(typeNode.kind===Kind.NAMED_TYPE){return schema.getType(typeNode.name.value);}// istanbul ignore next (Not reachable. All possible type nodes have been considered)\nfalse||invariant(0,'Unexpected type node: '+inspect(typeNode));}","map":{"version":3,"names":["inspect","invariant","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/typeFromAST.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLNonNull(innerType);\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\n}\n"],"mappings":"AAAA,MAAOA,QAAP,KAAoB,wBAApB,CACA,MAAOC,UAAP,KAAsB,0BAAtB,CACA,OAASC,IAAT,KAAqB,uBAArB,CACA,OAASC,WAAT,CAAsBC,cAAtB,KAA4C,wBAA5C,CACA;AACA;AACA;AACA;AACA;AACA;AACA,G,CAEA,iCAEA,MAAO,SAASC,YAAT,CAAqBC,MAArB,CAA6BC,QAA7B,CAAuC,CAC5C,gCACA,GAAIC,UAAJ,CAEA,GAAID,QAAQ,CAACE,IAAT,GAAkBP,IAAI,CAACQ,SAA3B,CAAsC,CACpCF,SAAS,CAAGH,WAAW,CAACC,MAAD,CAASC,QAAQ,CAACI,IAAlB,CAAvB,CACA,MAAOH,UAAS,EAAI,GAAIL,YAAJ,CAAgBK,SAAhB,CAApB,CACD,CAED,GAAID,QAAQ,CAACE,IAAT,GAAkBP,IAAI,CAACU,aAA3B,CAA0C,CACxCJ,SAAS,CAAGH,WAAW,CAACC,MAAD,CAASC,QAAQ,CAACI,IAAlB,CAAvB,CACA,MAAOH,UAAS,EAAI,GAAIJ,eAAJ,CAAmBI,SAAnB,CAApB,CACD,CAAC;AAGF,GAAID,QAAQ,CAACE,IAAT,GAAkBP,IAAI,CAACW,UAA3B,CAAuC,CACrC,MAAOP,OAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP,CACD,CAAC;AAGF,OAASf,SAAS,CAAC,CAAD,CAAI,yBAA2BD,OAAO,CAACO,QAAD,CAAtC,CAAlB,CACD"},"metadata":{},"sourceType":"module"}