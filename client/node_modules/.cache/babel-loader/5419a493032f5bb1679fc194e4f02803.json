{"ast":null,"code":"import{canUseAsyncIteratorSymbol}from\"../../../utilities/index.js\";export default function promiseIterator(promise){var resolved=false;var iterator={next:function next(){if(resolved)return Promise.resolve({value:undefined,done:true});resolved=true;return new Promise(function(resolve,reject){promise.then(function(value){resolve({value:value,done:false});}).catch(reject);});}};if(canUseAsyncIteratorSymbol){iterator[Symbol.asyncIterator]=function(){return this;};}return iterator;}","map":{"version":3,"mappings":"AAKA,OAASA,yBAAT,KAA0C,6BAA1C,CAOA,cAAc,SAAUC,gBAAV,CACZC,OADY,CACiB,CAE7B,GAAIC,SAAQ,CAAG,KAAf,CAEA,GAAMC,SAAQ,CAAuB,CACnCC,IAAI,CAAJ,gBACE,GAAIF,QAAJ,CACE,MAAOG,QAAO,CAACC,OAAR,CAAgB,CACrBC,KAAK,CAAEC,SADc,CAErBC,IAAI,CAAE,IAFe,CAAhB,CAAP,CAIFP,QAAQ,CAAG,IAAX,CACA,MAAO,IAAIG,QAAJ,CAAY,SAAUC,OAAV,CAAmBI,MAAnB,CAAyB,CAC1CT,OAAO,CACJU,IADH,CACQ,SAAUJ,KAAV,CAAe,CACnBD,OAAO,CAAC,CAAEC,KAAK,CAAEA,KAAT,CAAgCE,IAAI,CAAE,KAAtC,CAAD,CAAP,CACD,CAHH,EAIGG,KAJH,CAISF,MAJT,EAKD,CANM,CAAP,CAOD,CAfkC,CAArC,CAkBA,GAAIX,yBAAJ,CAA+B,CAC7BI,QAAQ,CAACU,MAAM,CAACC,aAAR,CAAR,CAAiC,WAC/B,MAAO,KAAP,CACD,CAFD,CAGD,CAED,MAAOX,SAAP,CACD","names":["canUseAsyncIteratorSymbol","promiseIterator","promise","resolved","iterator","next","Promise","resolve","value","undefined","done","reject","then","catch","Symbol","asyncIterator"],"sourceRoot":"","sources":["../../../../src/link/http/iterators/promise.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities\";\n\ninterface PromiseIterator<T> {\n  next(): Promise<IteratorResult<T, ArrayBuffer | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function promiseIterator<T = ArrayBuffer>(\n  promise: Promise<ArrayBuffer>\n): AsyncIterableIterator<T> {\n  let resolved = false;\n\n  const iterator: PromiseIterator<T> = {\n    next(): Promise<IteratorResult<T, ArrayBuffer | undefined>> {\n      if (resolved)\n        return Promise.resolve({\n          value: undefined,\n          done: true,\n        });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value: value as unknown as T, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n"]},"metadata":{},"sourceType":"module"}