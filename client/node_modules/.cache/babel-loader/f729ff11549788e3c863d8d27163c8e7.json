{"ast":null,"code":"import{InvariantError}from\"../globals/index.js\";import{isNonNullObject}from\"../common/objects.js\";import{getFragmentFromSelection}from\"./fragments.js\";export function makeReference(id){return{__ref:String(id)};}export function isReference(obj){return Boolean(obj&&typeof obj==='object'&&typeof obj.__ref==='string');}export function isDocumentNode(value){return isNonNullObject(value)&&value.kind===\"Document\"&&Array.isArray(value.definitions);}function isStringValue(value){return value.kind==='StringValue';}function isBooleanValue(value){return value.kind==='BooleanValue';}function isIntValue(value){return value.kind==='IntValue';}function isFloatValue(value){return value.kind==='FloatValue';}function isVariable(value){return value.kind==='Variable';}function isObjectValue(value){return value.kind==='ObjectValue';}function isListValue(value){return value.kind==='ListValue';}function isEnumValue(value){return value.kind==='EnumValue';}function isNullValue(value){return value.kind==='NullValue';}export function valueToObjectRepresentation(argObj,name,value,variables){if(isIntValue(value)||isFloatValue(value)){argObj[name.value]=Number(value.value);}else if(isBooleanValue(value)||isStringValue(value)){argObj[name.value]=value.value;}else if(isObjectValue(value)){var nestedArgObj_1={};value.fields.map(function(obj){return valueToObjectRepresentation(nestedArgObj_1,obj.name,obj.value,variables);});argObj[name.value]=nestedArgObj_1;}else if(isVariable(value)){var variableValue=(variables||{})[value.name.value];argObj[name.value]=variableValue;}else if(isListValue(value)){argObj[name.value]=value.values.map(function(listValue){var nestedArgArrayObj={};valueToObjectRepresentation(nestedArgArrayObj,name,listValue,variables);return nestedArgArrayObj[name.value];});}else if(isEnumValue(value)){argObj[name.value]=value.value;}else if(isNullValue(value)){argObj[name.value]=null;}else{throw __DEV__?new InvariantError(\"The inline argument \\\"\".concat(name.value,\"\\\" of kind \\\"\").concat(value.kind,\"\\\"\")+'is not supported. Use variables instead of inline arguments to '+'overcome this limitation.'):new InvariantError(54);}}export function storeKeyNameFromField(field,variables){var directivesObj=null;if(field.directives){directivesObj={};field.directives.forEach(function(directive){directivesObj[directive.name.value]={};if(directive.arguments){directive.arguments.forEach(function(_a){var name=_a.name,value=_a.value;return valueToObjectRepresentation(directivesObj[directive.name.value],name,value,variables);});}});}var argObj=null;if(field.arguments&&field.arguments.length){argObj={};field.arguments.forEach(function(_a){var name=_a.name,value=_a.value;return valueToObjectRepresentation(argObj,name,value,variables);});}return getStoreKeyName(field.name.value,argObj,directivesObj);}var KNOWN_DIRECTIVES=['connection','include','skip','client','rest','export'];export var getStoreKeyName=Object.assign(function(fieldName,args,directives){if(args&&directives&&directives['connection']&&directives['connection']['key']){if(directives['connection']['filter']&&directives['connection']['filter'].length>0){var filterKeys=directives['connection']['filter']?directives['connection']['filter']:[];filterKeys.sort();var filteredArgs_1={};filterKeys.forEach(function(key){filteredArgs_1[key]=args[key];});return\"\".concat(directives['connection']['key'],\"(\").concat(stringify(filteredArgs_1),\")\");}else{return directives['connection']['key'];}}var completeFieldName=fieldName;if(args){var stringifiedArgs=stringify(args);completeFieldName+=\"(\".concat(stringifiedArgs,\")\");}if(directives){Object.keys(directives).forEach(function(key){if(KNOWN_DIRECTIVES.indexOf(key)!==-1)return;if(directives[key]&&Object.keys(directives[key]).length){completeFieldName+=\"@\".concat(key,\"(\").concat(stringify(directives[key]),\")\");}else{completeFieldName+=\"@\".concat(key);}});}return completeFieldName;},{setStringify:function setStringify(s){var previous=stringify;stringify=s;return previous;}});var stringify=function defaultStringify(value){return JSON.stringify(value,stringifyReplacer);};function stringifyReplacer(_key,value){if(isNonNullObject(value)&&!Array.isArray(value)){value=Object.keys(value).sort().reduce(function(copy,key){copy[key]=value[key];return copy;},{});}return value;}export function argumentsObjectFromField(field,variables){if(field.arguments&&field.arguments.length){var argObj_1={};field.arguments.forEach(function(_a){var name=_a.name,value=_a.value;return valueToObjectRepresentation(argObj_1,name,value,variables);});return argObj_1;}return null;}export function resultKeyNameFromField(field){return field.alias?field.alias.value:field.name.value;}export function getTypenameFromResult(result,selectionSet,fragmentMap){if(typeof result.__typename==='string'){return result.__typename;}for(var _i=0,_a=selectionSet.selections;_i<_a.length;_i++){var selection=_a[_i];if(isField(selection)){if(selection.name.value==='__typename'){return result[resultKeyNameFromField(selection)];}}else{var typename=getTypenameFromResult(result,getFragmentFromSelection(selection,fragmentMap).selectionSet,fragmentMap);if(typeof typename==='string'){return typename;}}}}export function isField(selection){return selection.kind==='Field';}export function isInlineFragment(selection){return selection.kind==='InlineFragment';}","map":{"version":3,"mappings":"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","names":["InvariantError","isNonNullObject","getFragmentFromSelection","makeReference","id","__ref","String","isReference","obj","Boolean","isDocumentNode","value","kind","Array","isArray","definitions","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","variableValue","values","nestedArgArrayObj","listValue","__DEV__","concat","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","Object","assign","fieldName","args","filterKeys","sort","filteredArgs_1","key","stringify","completeFieldName","stringifiedArgs","keys","indexOf","setStringify","s","previous","defaultStringify","JSON","stringifyReplacer","_key","reduce","copy","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","getTypenameFromResult","result","selectionSet","fragmentMap","__typename","selections","_i","selection","isField","typename","isInlineFragment"],"sourceRoot":"","sources":["../../../src/utilities/graphql/storeUtils.ts"],"sourcesContent":["import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"]},"metadata":{},"sourceType":"module"}