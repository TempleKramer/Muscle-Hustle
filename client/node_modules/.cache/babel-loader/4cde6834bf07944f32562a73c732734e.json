{"ast":null,"code":"import{__assign,__awaiter,__generator}from\"tslib\";import{invariant}from\"../utilities/globals/index.js\";import{visit,BREAK}from'graphql';import{argumentsObjectFromField,buildQueryFromSelectionSet,createFragmentMap,getFragmentDefinitions,getMainDefinition,hasDirectives,isField,isInlineFragment,mergeDeep,mergeDeepArray,removeClientSetsFromDocument,resultKeyNameFromField,shouldInclude}from\"../utilities/index.js\";import{cacheSlot}from\"../cache/index.js\";var LocalState=function(){function LocalState(_a){var cache=_a.cache,client=_a.client,resolvers=_a.resolvers,fragmentMatcher=_a.fragmentMatcher;this.cache=cache;if(client){this.client=client;}if(resolvers){this.addResolvers(resolvers);}if(fragmentMatcher){this.setFragmentMatcher(fragmentMatcher);}}LocalState.prototype.addResolvers=function(resolvers){var _this=this;this.resolvers=this.resolvers||{};if(Array.isArray(resolvers)){resolvers.forEach(function(resolverGroup){_this.resolvers=mergeDeep(_this.resolvers,resolverGroup);});}else{this.resolvers=mergeDeep(this.resolvers,resolvers);}};LocalState.prototype.setResolvers=function(resolvers){this.resolvers={};this.addResolvers(resolvers);};LocalState.prototype.getResolvers=function(){return this.resolvers||{};};LocalState.prototype.runResolvers=function(_a){var document=_a.document,remoteResult=_a.remoteResult,context=_a.context,variables=_a.variables,_b=_a.onlyRunForcedResolvers,onlyRunForcedResolvers=_b===void 0?false:_b;return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_c){if(document){return[2,this.resolveDocument(document,remoteResult.data,context,variables,this.fragmentMatcher,onlyRunForcedResolvers).then(function(localResult){return __assign(__assign({},remoteResult),{data:localResult.result});})];}return[2,remoteResult];});});};LocalState.prototype.setFragmentMatcher=function(fragmentMatcher){this.fragmentMatcher=fragmentMatcher;};LocalState.prototype.getFragmentMatcher=function(){return this.fragmentMatcher;};LocalState.prototype.clientQuery=function(document){if(hasDirectives(['client'],document)){if(this.resolvers){return document;}}return null;};LocalState.prototype.serverQuery=function(document){return removeClientSetsFromDocument(document);};LocalState.prototype.prepareContext=function(context){var cache=this.cache;return __assign(__assign({},context),{cache:cache,getCacheKey:function getCacheKey(obj){return cache.identify(obj);}});};LocalState.prototype.addExportedVariables=function(document,variables,context){if(variables===void 0){variables={};}if(context===void 0){context={};}return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(document){return[2,this.resolveDocument(document,this.buildRootValueFromCache(document,variables)||{},this.prepareContext(context),variables).then(function(data){return __assign(__assign({},variables),data.exportedVariables);})];}return[2,__assign({},variables)];});});};LocalState.prototype.shouldForceResolvers=function(document){var forceResolvers=false;visit(document,{Directive:{enter:function enter(node){if(node.name.value==='client'&&node.arguments){forceResolvers=node.arguments.some(function(arg){return arg.name.value==='always'&&arg.value.kind==='BooleanValue'&&arg.value.value===true;});if(forceResolvers){return BREAK;}}}}});return forceResolvers;};LocalState.prototype.buildRootValueFromCache=function(document,variables){return this.cache.diff({query:buildQueryFromSelectionSet(document),variables:variables,returnPartialData:true,optimistic:false}).result;};LocalState.prototype.resolveDocument=function(document,rootValue,context,variables,fragmentMatcher,onlyRunForcedResolvers){if(context===void 0){context={};}if(variables===void 0){variables={};}if(fragmentMatcher===void 0){fragmentMatcher=function fragmentMatcher(){return true;};}if(onlyRunForcedResolvers===void 0){onlyRunForcedResolvers=false;}return __awaiter(this,void 0,void 0,function(){var mainDefinition,fragments,fragmentMap,definitionOperation,defaultOperationType,_a,cache,client,execContext;return __generator(this,function(_b){mainDefinition=getMainDefinition(document);fragments=getFragmentDefinitions(document);fragmentMap=createFragmentMap(fragments);definitionOperation=mainDefinition.operation;defaultOperationType=definitionOperation?definitionOperation.charAt(0).toUpperCase()+definitionOperation.slice(1):'Query';_a=this,cache=_a.cache,client=_a.client;execContext={fragmentMap:fragmentMap,context:__assign(__assign({},context),{cache:cache,client:client}),variables:variables,fragmentMatcher:fragmentMatcher,defaultOperationType:defaultOperationType,exportedVariables:{},onlyRunForcedResolvers:onlyRunForcedResolvers};return[2,this.resolveSelectionSet(mainDefinition.selectionSet,rootValue,execContext).then(function(result){return{result:result,exportedVariables:execContext.exportedVariables};})];});});};LocalState.prototype.resolveSelectionSet=function(selectionSet,rootValue,execContext){return __awaiter(this,void 0,void 0,function(){var fragmentMap,context,variables,resultsToMerge,execute;var _this=this;return __generator(this,function(_a){fragmentMap=execContext.fragmentMap,context=execContext.context,variables=execContext.variables;resultsToMerge=[rootValue];execute=function execute(selection){return __awaiter(_this,void 0,void 0,function(){var fragment,typeCondition;return __generator(this,function(_a){if(!shouldInclude(selection,variables)){return[2];}if(isField(selection)){return[2,this.resolveField(selection,rootValue,execContext).then(function(fieldResult){var _a;if(typeof fieldResult!=='undefined'){resultsToMerge.push((_a={},_a[resultKeyNameFromField(selection)]=fieldResult,_a));}})];}if(isInlineFragment(selection)){fragment=selection;}else{fragment=fragmentMap[selection.name.value];__DEV__?invariant(fragment,\"No fragment named \".concat(selection.name.value)):invariant(fragment,11);}if(fragment&&fragment.typeCondition){typeCondition=fragment.typeCondition.name.value;if(execContext.fragmentMatcher(rootValue,typeCondition,context)){return[2,this.resolveSelectionSet(fragment.selectionSet,rootValue,execContext).then(function(fragmentResult){resultsToMerge.push(fragmentResult);})];}}return[2];});});};return[2,Promise.all(selectionSet.selections.map(execute)).then(function(){return mergeDeepArray(resultsToMerge);})];});});};LocalState.prototype.resolveField=function(field,rootValue,execContext){return __awaiter(this,void 0,void 0,function(){var variables,fieldName,aliasedFieldName,aliasUsed,defaultResult,resultPromise,resolverType,resolverMap,resolve;var _this=this;return __generator(this,function(_a){variables=execContext.variables;fieldName=field.name.value;aliasedFieldName=resultKeyNameFromField(field);aliasUsed=fieldName!==aliasedFieldName;defaultResult=rootValue[aliasedFieldName]||rootValue[fieldName];resultPromise=Promise.resolve(defaultResult);if(!execContext.onlyRunForcedResolvers||this.shouldForceResolvers(field)){resolverType=rootValue.__typename||execContext.defaultOperationType;resolverMap=this.resolvers&&this.resolvers[resolverType];if(resolverMap){resolve=resolverMap[aliasUsed?fieldName:aliasedFieldName];if(resolve){resultPromise=Promise.resolve(cacheSlot.withValue(this.cache,resolve,[rootValue,argumentsObjectFromField(field,variables),execContext.context,{field:field,fragmentMap:execContext.fragmentMap}]));}}}return[2,resultPromise.then(function(result){if(result===void 0){result=defaultResult;}if(field.directives){field.directives.forEach(function(directive){if(directive.name.value==='export'&&directive.arguments){directive.arguments.forEach(function(arg){if(arg.name.value==='as'&&arg.value.kind==='StringValue'){execContext.exportedVariables[arg.value.value]=result;}});}});}if(!field.selectionSet){return result;}if(result==null){return result;}if(Array.isArray(result)){return _this.resolveSubSelectedArray(field,result,execContext);}if(field.selectionSet){return _this.resolveSelectionSet(field.selectionSet,result,execContext);}})];});});};LocalState.prototype.resolveSubSelectedArray=function(field,result,execContext){var _this=this;return Promise.all(result.map(function(item){if(item===null){return null;}if(Array.isArray(item)){return _this.resolveSubSelectedArray(field,item,execContext);}if(field.selectionSet){return _this.resolveSelectionSet(field.selectionSet,item,execContext);}}));};return LocalState;}();export{LocalState};","map":{"version":3,"mappings":"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","names":["invariant","visit","BREAK","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","_a","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","LocalState","Array","isArray","forEach","_this","resolverGroup","document","remoteResult","context","variables","_b","resolveDocument","data","onlyRunForcedResolvers","then","localResult","result","getCacheKey","obj","identify","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","operation","defaultOperationType","charAt","toUpperCase","slice","execContext","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","resolveField","fieldResult","push","fragment","__DEV__","concat","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolve","shouldForceResolvers","resolverType","__typename","resolverMap","withValue","directives","directive","resolveSubSelectedArray","item"],"sourceRoot":"","sources":["../../src/core/LocalState.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}