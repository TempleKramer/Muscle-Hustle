{"ast":null,"code":"import inspect from\"../../jsutils/inspect.mjs\";import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{getNamedType,isLeafType}from\"../../type/definition.mjs\";/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */export function ScalarLeafsRule(context){return{Field:function Field(node){var type=context.getType();var selectionSet=node.selectionSet;if(type){if(isLeafType(getNamedType(type))){if(selectionSet){var fieldName=node.name.value;var typeStr=inspect(type);context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName,\"\\\" must not have a selection since type \\\"\").concat(typeStr,\"\\\" has no subfields.\"),selectionSet));}}else if(!selectionSet){var _fieldName=node.name.value;var _typeStr=inspect(type);context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName,\"\\\" of type \\\"\").concat(_typeStr,\"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName,\" { ... }\\\"?\"),node));}}}};}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","concat","_fieldName","_typeStr"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,MAAOA,QAAP,KAAoB,2BAApB,CACA,OAASC,YAAT,KAA6B,8BAA7B,CACA,OAASC,YAAT,CAAuBC,UAAvB,KAAyC,2BAAzC,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,gBAAT,CAAyBC,OAAzB,CAAkC,CACvC,MAAO,CACLC,KAAK,CAAE,QAASA,MAAT,CAAeC,IAAf,CAAqB,CAC1B,GAAIC,KAAI,CAAGH,OAAO,CAACI,OAAR,EAAX,CACA,GAAIC,aAAY,CAAGH,IAAI,CAACG,YAAxB,CAEA,GAAIF,IAAJ,CAAU,CACR,GAAIL,UAAU,CAACD,YAAY,CAACM,IAAD,CAAb,CAAd,CAAoC,CAClC,GAAIE,YAAJ,CAAkB,CAChB,GAAIC,UAAS,CAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA1B,CACA,GAAIC,QAAO,CAAGd,OAAO,CAACQ,IAAD,CAArB,CACAH,OAAO,CAACU,WAAR,CAAoB,GAAId,aAAJ,CAAiB,WAAWe,MAAX,CAAkBL,SAAlB,CAA6B,4CAA7B,EAA2EK,MAA3E,CAAkFF,OAAlF,CAA2F,sBAA3F,CAAjB,CAAqIJ,YAArI,CAApB,EACD,CACF,CAND,IAMO,IAAI,CAACA,YAAL,CAAmB,CACxB,GAAIO,WAAU,CAAGV,IAAI,CAACK,IAAL,CAAUC,KAA3B,CAEA,GAAIK,SAAQ,CAAGlB,OAAO,CAACQ,IAAD,CAAtB,CAEAH,OAAO,CAACU,WAAR,CAAoB,GAAId,aAAJ,CAAiB,WAAWe,MAAX,CAAkBC,UAAlB,CAA8B,eAA9B,EAA+CD,MAA/C,CAAsDE,QAAtD,CAAgE,wDAAhE,EAA0HF,MAA1H,CAAiIC,UAAjI,CAA6I,aAA7I,CAAjB,CAA8KV,IAA9K,CAApB,EACD,CACF,CACF,CApBI,CAAP,CAsBD"},"metadata":{},"sourceType":"module"}