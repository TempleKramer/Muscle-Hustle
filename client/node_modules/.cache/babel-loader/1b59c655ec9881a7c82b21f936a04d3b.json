{"ast":null,"code":"import{canUseAsyncIteratorSymbol}from\"./canUse.js\";export function isNodeResponse(value){return!!value.body;}export function isReadableStream(value){return!!value.getReader;}export function isAsyncIterableIterator(value){return!!(canUseAsyncIteratorSymbol&&value[Symbol.asyncIterator]);}export function isStreamableBlob(value){return!!value.stream;}export function isBlob(value){return!!value.arrayBuffer;}export function isNodeReadableStream(value){return!!value.pipe;}","map":{"version":3,"mappings":"AAEA,OAASA,yBAAT,KAA0C,aAA1C,CAEA,MAAM,SAAUC,eAAV,CAAyBC,KAAzB,CAAmC,CACvC,MAAO,CAAC,CAAEA,KAAsB,CAACC,IAAjC,CACD,CAED,MAAM,SAAUC,iBAAV,CAA2BF,KAA3B,CAAqC,CACzC,MAAO,CAAC,CAAEA,KAA6B,CAACG,SAAxC,CACD,CAED,MAAM,SAAUC,wBAAV,CACJJ,KADI,CACM,CAEV,MAAO,CAAC,EACNF,yBAAyB,EACxBE,KAAoC,CAACK,MAAM,CAACC,aAAR,CAF/B,CAAR,CAID,CAED,MAAM,SAAUC,iBAAV,CAA2BP,KAA3B,CAAqC,CACzC,MAAO,CAAC,CAAEA,KAAc,CAACQ,MAAzB,CACD,CAED,MAAM,SAAUC,OAAV,CAAiBT,KAAjB,CAA2B,CAC/B,MAAO,CAAC,CAAEA,KAAc,CAACU,WAAzB,CACD,CAED,MAAM,SAAUC,qBAAV,CAA+BX,KAA/B,CAAyC,CAC7C,MAAO,CAAC,CAAEA,KAA4B,CAACY,IAAvC,CACD","names":["canUseAsyncIteratorSymbol","isNodeResponse","value","body","isReadableStream","getReader","isAsyncIterableIterator","Symbol","asyncIterator","isStreamableBlob","stream","isBlob","arrayBuffer","isNodeReadableStream","pipe"],"sourceRoot":"","sources":["../../../src/utilities/common/responseIterator.ts"],"sourcesContent":["import { Response as NodeResponse } from \"node-fetch\";\nimport { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"./canUse\";\n\nexport function isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nexport function isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nexport function isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nexport function isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nexport function isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nexport function isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n"]},"metadata":{},"sourceType":"module"}