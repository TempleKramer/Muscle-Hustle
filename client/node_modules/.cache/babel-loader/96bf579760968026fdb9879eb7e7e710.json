{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{isEnumType}from\"../../type/definition.mjs\";/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */export function UniqueEnumValueNamesRule(context){var schema=context.getSchema();var existingTypeMap=schema?schema.getTypeMap():Object.create(null);var knownValueNames=Object.create(null);return{EnumTypeDefinition:checkValueUniqueness,EnumTypeExtension:checkValueUniqueness};function checkValueUniqueness(node){var _node$values;var typeName=node.name.value;if(!knownValueNames[typeName]){knownValueNames[typeName]=Object.create(null);}// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\nvar valueNodes=(_node$values=node.values)!==null&&_node$values!==void 0?_node$values:[];var valueNames=knownValueNames[typeName];for(var _i2=0;_i2<valueNodes.length;_i2++){var valueDef=valueNodes[_i2];var valueName=valueDef.name.value;var existingType=existingTypeMap[typeName];if(isEnumType(existingType)&&existingType.getValue(valueName)){context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName,\".\").concat(valueName,\"\\\" already exists in the schema. It cannot also be defined in this type extension.\"),valueDef.name));}else if(valueNames[valueName]){context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName,\".\").concat(valueName,\"\\\" can only be defined once.\"),[valueNames[valueName],valueDef.name]));}else{valueNames[valueName]=valueDef.name;}}return false;}}","map":{"version":3,"names":["GraphQLError","isEnumType","UniqueEnumValueNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","_node$values","typeName","name","value","valueNodes","values","valueNames","_i2","length","valueDef","valueName","existingType","getValue","reportError","concat"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n\n    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {\n      var valueDef = valueNodes[_i2];\n      var valueName = valueDef.name.value;\n      var existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CACA,OAASC,UAAT,KAA2B,2BAA3B,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,yBAAT,CAAkCC,OAAlC,CAA2C,CAChD,GAAIC,OAAM,CAAGD,OAAO,CAACE,SAAR,EAAb,CACA,GAAIC,gBAAe,CAAGF,MAAM,CAAGA,MAAM,CAACG,UAAP,EAAH,CAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArD,CACA,GAAIC,gBAAe,CAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB,CACA,MAAO,CACLE,kBAAkB,CAAEC,oBADf,CAELC,iBAAiB,CAAED,oBAFd,CAAP,CAKA,QAASA,qBAAT,CAA8BE,IAA9B,CAAoC,CAClC,GAAIC,aAAJ,CAEA,GAAIC,SAAQ,CAAGF,IAAI,CAACG,IAAL,CAAUC,KAAzB,CAEA,GAAI,CAACR,eAAe,CAACM,QAAD,CAApB,CAAgC,CAC9BN,eAAe,CAACM,QAAD,CAAf,CAA4BR,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B,CACD,CAAC;AAGF,GAAIU,WAAU,CAAG,CAACJ,YAAY,CAAGD,IAAI,CAACM,MAArB,IAAiC,IAAjC,EAAyCL,YAAY,GAAK,IAAK,EAA/D,CAAmEA,YAAnE,CAAkF,EAAnG,CACA,GAAIM,WAAU,CAAGX,eAAe,CAACM,QAAD,CAAhC,CAEA,IAAK,GAAIM,IAAG,CAAG,CAAf,CAAkBA,GAAG,CAAGH,UAAU,CAACI,MAAnC,CAA2CD,GAAG,EAA9C,CAAkD,CAChD,GAAIE,SAAQ,CAAGL,UAAU,CAACG,GAAD,CAAzB,CACA,GAAIG,UAAS,CAAGD,QAAQ,CAACP,IAAT,CAAcC,KAA9B,CACA,GAAIQ,aAAY,CAAGpB,eAAe,CAACU,QAAD,CAAlC,CAEA,GAAIf,UAAU,CAACyB,YAAD,CAAV,EAA4BA,YAAY,CAACC,QAAb,CAAsBF,SAAtB,CAAhC,CAAkE,CAChEtB,OAAO,CAACyB,WAAR,CAAoB,GAAI5B,aAAJ,CAAiB,gBAAgB6B,MAAhB,CAAuBb,QAAvB,CAAiC,GAAjC,EAAsCa,MAAtC,CAA6CJ,SAA7C,CAAwD,oFAAxD,CAAjB,CAAgKD,QAAQ,CAACP,IAAzK,CAApB,EACD,CAFD,IAEO,IAAII,UAAU,CAACI,SAAD,CAAd,CAA2B,CAChCtB,OAAO,CAACyB,WAAR,CAAoB,GAAI5B,aAAJ,CAAiB,gBAAgB6B,MAAhB,CAAuBb,QAAvB,CAAiC,GAAjC,EAAsCa,MAAtC,CAA6CJ,SAA7C,CAAwD,8BAAxD,CAAjB,CAA0G,CAACJ,UAAU,CAACI,SAAD,CAAX,CAAwBD,QAAQ,CAACP,IAAjC,CAA1G,CAApB,EACD,CAFM,IAEA,CACLI,UAAU,CAACI,SAAD,CAAV,CAAwBD,QAAQ,CAACP,IAAjC,CACD,CACF,CAED,MAAO,MAAP,CACD,CACF"},"metadata":{},"sourceType":"module"}