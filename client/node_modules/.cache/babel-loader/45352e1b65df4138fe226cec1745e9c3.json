{"ast":null,"code":"import{__assign}from\"tslib\";import\"../../utilities/globals/index.js\";import{Trie}from\"@wry/trie\";import{canUseWeakMap,canUseWeakSet,isNonNullObject as isObjectOrArray}from\"../../utilities/index.js\";import{isArray}from\"./helpers.js\";function shallowCopy(value){if(isObjectOrArray(value)){return isArray(value)?value.slice(0):__assign({__proto__:Object.getPrototypeOf(value)},value);}return value;}var ObjectCanon=function(){function ObjectCanon(){this.known=new(canUseWeakSet?WeakSet:Set)();this.pool=new Trie(canUseWeakMap);this.passes=new WeakMap();this.keysByJSON=new Map();this.empty=this.admit({});}ObjectCanon.prototype.isKnown=function(value){return isObjectOrArray(value)&&this.known.has(value);};ObjectCanon.prototype.pass=function(value){if(isObjectOrArray(value)){var copy=shallowCopy(value);this.passes.set(copy,value);return copy;}return value;};ObjectCanon.prototype.admit=function(value){var _this=this;if(isObjectOrArray(value)){var original=this.passes.get(value);if(original)return original;var proto=Object.getPrototypeOf(value);switch(proto){case Array.prototype:{if(this.known.has(value))return value;var array=value.map(this.admit,this);var node=this.pool.lookupArray(array);if(!node.array){this.known.add(node.array=array);if(__DEV__){Object.freeze(array);}}return node.array;}case null:case Object.prototype:{if(this.known.has(value))return value;var proto_1=Object.getPrototypeOf(value);var array_1=[proto_1];var keys=this.sortedKeys(value);array_1.push(keys.json);var firstValueIndex_1=array_1.length;keys.sorted.forEach(function(key){array_1.push(_this.admit(value[key]));});var node=this.pool.lookupArray(array_1);if(!node.object){var obj_1=node.object=Object.create(proto_1);this.known.add(obj_1);keys.sorted.forEach(function(key,i){obj_1[key]=array_1[firstValueIndex_1+i];});if(__DEV__){Object.freeze(obj_1);}}return node.object;}}}return value;};ObjectCanon.prototype.sortedKeys=function(obj){var keys=Object.keys(obj);var node=this.pool.lookupArray(keys);if(!node.keys){keys.sort();var json=JSON.stringify(keys);if(!(node.keys=this.keysByJSON.get(json))){this.keysByJSON.set(json,node.keys={sorted:keys,json:json});}}return node.keys;};return ObjectCanon;}();export{ObjectCanon};export var canonicalStringify=Object.assign(function(value){if(isObjectOrArray(value)){if(stringifyCanon===void 0){resetCanonicalStringify();}var canonical=stringifyCanon.admit(value);var json=stringifyCache.get(canonical);if(json===void 0){stringifyCache.set(canonical,json=JSON.stringify(canonical));}return json;}return JSON.stringify(value);},{reset:resetCanonicalStringify});var stringifyCanon;var stringifyCache;function resetCanonicalStringify(){stringifyCanon=new ObjectCanon();stringifyCache=new(canUseWeakMap?WeakMap:Map)();}","map":{"version":3,"mappings":"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","names":["Trie","canUseWeakMap","canUseWeakSet","isNonNullObject","isObjectOrArray","isArray","shallowCopy","value","slice","__assign","__proto__","Object","getPrototypeOf","WeakSet","Set","WeakMap","Map","admit","ObjectCanon","known","has","copy","passes","set","original","get","proto","Array","prototype","array","map","node","pool","lookupArray","add","__DEV__","freeze","proto_1","array_1","keys","sortedKeys","push","json","firstValueIndex_1","length","sorted","forEach","_this","key","object","obj_1","create","i","obj","sort","JSON","stringify","keysByJSON","canonicalStringify","assign","stringifyCanon","resetCanonicalStringify","canonical","stringifyCache","reset"],"sourceRoot":"","sources":["../../../src/cache/inmemory/object-canon.ts"],"sourcesContent":["import \"../../utilities/globals\";\n\nimport { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities\";\nimport { isArray } from \"./helpers\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return isArray(value)\n      ? value.slice(0) as any as T\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add(node.array = array);\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach(key => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = node.object = Object.create(proto);\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n\n// Since the keys of canonical objects are always created in lexicographically\n// sorted order, we can use the ObjectCanon to implement a fast and stable\n// version of JSON.stringify, which automatically sorts object keys.\nexport const canonicalStringify = Object.assign(function (value: any): string {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    const canonical = stringifyCanon.admit(value);\n    let json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(\n        canonical,\n        json = JSON.stringify(canonical),\n      );\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify,\n});\n\n// Can be reset by calling canonicalStringify.reset().\nlet stringifyCanon: ObjectCanon;\nlet stringifyCache: WeakMap<object, string>;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon;\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n"]},"metadata":{},"sourceType":"module"}