{"ast":null,"code":"var prefixCounts=new Map();export function makeUniqueId(prefix){var count=prefixCounts.get(prefix)||1;prefixCounts.set(prefix,count+1);return\"\".concat(prefix,\":\").concat(count,\":\").concat(Math.random().toString(36).slice(2));}","map":{"version":3,"mappings":"AAAA,GAAMA,aAAY,CAAG,GAAIC,IAAJ,EAArB,CAIA,MAAM,SAAUC,aAAV,CAAuBC,MAAvB,CAAqC,CACzC,GAAMC,MAAK,CAAGJ,YAAY,CAACK,GAAb,CAAiBF,MAAjB,GAA4B,CAA1C,CACAH,YAAY,CAACM,GAAb,CAAiBH,MAAjB,CAAyBC,KAAK,CAAG,CAAjC,EACA,MAAO,UAAGD,MAAH,CAAS,GAAT,EAASI,MAAT,CAAaH,KAAb,CAAkB,GAAlB,EAAkBG,MAAlB,CAAsBC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAtB,CAAP,CACD","names":["prefixCounts","Map","makeUniqueId","prefix","count","get","set","concat","Math","random","toString","slice"],"sourceRoot":"","sources":["../../../src/utilities/common/makeUniqueId.ts"],"sourcesContent":["const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"]},"metadata":{},"sourceType":"module"}