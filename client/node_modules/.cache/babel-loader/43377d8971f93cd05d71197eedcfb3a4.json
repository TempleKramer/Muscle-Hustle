{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{print}from\"../../language/printer.mjs\";import{isInputType}from\"../../type/definition.mjs\";import{typeFromAST}from\"../../utilities/typeFromAST.mjs\";/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */export function VariablesAreInputTypesRule(context){return{VariableDefinition:function VariableDefinition(node){var type=typeFromAST(context.getSchema(),node.type);if(type&&!isInputType(type)){var variableName=node.variable.name.value;var typeName=print(node.type);context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName,\"\\\" cannot be non-input type \\\"\").concat(typeName,\"\\\".\"),node.type));}}};}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","VariablesAreInputTypesRule","context","VariableDefinition","node","type","getSchema","variableName","variable","name","value","typeName","reportError","concat"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CACA,OAASC,KAAT,KAAsB,4BAAtB,CACA,OAASC,WAAT,KAA4B,2BAA5B,CACA,OAASC,WAAT,KAA4B,iCAA5B,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,2BAAT,CAAoCC,OAApC,CAA6C,CAClD,MAAO,CACLC,kBAAkB,CAAE,QAASA,mBAAT,CAA4BC,IAA5B,CAAkC,CACpD,GAAIC,KAAI,CAAGL,WAAW,CAACE,OAAO,CAACI,SAAR,EAAD,CAAsBF,IAAI,CAACC,IAA3B,CAAtB,CAEA,GAAIA,IAAI,EAAI,CAACN,WAAW,CAACM,IAAD,CAAxB,CAAgC,CAC9B,GAAIE,aAAY,CAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBC,KAAtC,CACA,GAAIC,SAAQ,CAAGb,KAAK,CAACM,IAAI,CAACC,IAAN,CAApB,CACAH,OAAO,CAACU,WAAR,CAAoB,GAAIf,aAAJ,CAAiB,eAAegB,MAAf,CAAsBN,YAAtB,CAAoC,gCAApC,EAAsEM,MAAtE,CAA6EF,QAA7E,CAAuF,KAAvF,CAAjB,CAAgHP,IAAI,CAACC,IAArH,CAApB,EACD,CACF,CATI,CAAP,CAWD"},"metadata":{},"sourceType":"module"}