{"ast":null,"code":"import{__extends}from\"tslib\";import\"../utilities/globals/index.js\";import{isNonEmptyArray}from\"../utilities/index.js\";export function isApolloError(err){return err.hasOwnProperty('graphQLErrors');}var generateErrorMessage=function generateErrorMessage(err){var message='';if(isNonEmptyArray(err.graphQLErrors)||isNonEmptyArray(err.clientErrors)){var errors=(err.graphQLErrors||[]).concat(err.clientErrors||[]);errors.forEach(function(error){var errorMessage=error?error.message:'Error message not found.';message+=\"\".concat(errorMessage,\"\\n\");});}if(err.networkError){message+=\"\".concat(err.networkError.message,\"\\n\");}message=message.replace(/\\n$/,'');return message;};var ApolloError=function(_super){__extends(ApolloError,_super);function ApolloError(_a){var graphQLErrors=_a.graphQLErrors,clientErrors=_a.clientErrors,networkError=_a.networkError,errorMessage=_a.errorMessage,extraInfo=_a.extraInfo;var _this=_super.call(this,errorMessage)||this;_this.graphQLErrors=graphQLErrors||[];_this.clientErrors=clientErrors||[];_this.networkError=networkError||null;_this.message=errorMessage||generateErrorMessage(_this);_this.extraInfo=extraInfo;_this.__proto__=ApolloError.prototype;return _this;}return ApolloError;}(Error);export{ApolloError};","map":{"version":3,"mappings":"6BAAA,MAAO,+BAAP,CAIA,OAASA,eAAT,KAAgC,uBAAhC,CAIA,MAAM,SAAUC,cAAV,CAAwBC,GAAxB,CAAkC,CACtC,MAAOA,IAAG,CAACC,cAAJ,CAAmB,eAAnB,CAAP,CACD,CAMD,GAAMC,qBAAoB,CAAG,QAAvBA,qBAAuB,CAACF,GAAD,CAAiB,CAC5C,GAAIG,QAAO,CAAG,EAAd,CAEA,GAAIL,eAAe,CAACE,GAAG,CAACI,aAAL,CAAf,EAAsCN,eAAe,CAACE,GAAG,CAACK,YAAL,CAAzD,CAA6E,CAC3E,GAAMC,OAAM,CAAI,CAACN,GAAG,CAACI,aAAJ,EAAqB,EAAtB,EACbG,MADa,CACNP,GAAG,CAACK,YAAJ,EAAoB,EADd,CAAhB,CAEAC,MAAM,CAACE,OAAP,CAAe,SAACC,KAAD,CAAa,CAC1B,GAAMC,aAAY,CAAGD,KAAK,CACtBA,KAAK,CAACN,OADgB,CAEtB,0BAFJ,CAGAA,OAAO,EAAI,UAAGO,YAAH,CAAe,IAAf,CAAX,CACD,CALD,EAMD,CAED,GAAIV,GAAG,CAACW,YAAR,CAAsB,CACpBR,OAAO,EAAI,UAAGH,GAAG,CAACW,YAAJ,CAAiBR,OAApB,CAA2B,IAA3B,CAAX,CACD,CAGDA,OAAO,CAAGA,OAAO,CAACS,OAAR,CAAgB,KAAhB,CAAuB,EAAvB,CAAV,CACA,MAAOT,QAAP,CACD,CArBD,CA2BA,iCAAiCU,8BAc/B,qBAAYC,EAAZ,CAYC,IAXCV,cAAa,kBACbC,YAAY,iBACZM,YAAY,iBACZD,YAAY,iBACZK,SAAS,cALX,UAaEC,iBAAMN,YAAN,GAAmB,IAbrB,CAcEO,KAAI,CAACb,aAAL,CAAqBA,aAAa,EAAI,EAAtC,CACAa,KAAI,CAACZ,YAAL,CAAoBA,YAAY,EAAI,EAApC,CACAY,KAAI,CAACN,YAAL,CAAoBA,YAAY,EAAI,IAApC,CACAM,KAAI,CAACd,OAAL,CAAeO,YAAY,EAAIR,oBAAoB,CAACe,KAAD,CAAnD,CACAA,KAAI,CAACF,SAAL,CAAiBA,SAAjB,CAICE,KAAY,CAACC,SAAb,CAAyBC,WAAW,CAACC,SAArC,cACF,CACH,mBAAC,CAtCD,CAAiCC,KAAjC","names":["isNonEmptyArray","isApolloError","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","clientErrors","errors","concat","forEach","error","errorMessage","networkError","replace","__extends","_a","extraInfo","_super","_this","__proto__","ApolloError","prototype","Error"],"sourceRoot":"","sources":["../../src/errors/index.ts"],"sourcesContent":["import '../utilities/globals';\n\nimport { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    const errors = ((err.graphQLErrors || []) as readonly Error[])\n      .concat(err.clientErrors || []);\n    errors.forEach((error: Error) => {\n      const errorMessage = error\n        ? error.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    clientErrors?: ReadonlyArray<Error>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}