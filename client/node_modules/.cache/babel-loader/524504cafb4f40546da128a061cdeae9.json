{"ast":null,"code":"import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{print}from\"../../language/printer.mjs\";import{isCompositeType}from\"../../type/definition.mjs\";import{typeFromAST}from\"../../utilities/typeFromAST.mjs\";/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */export function FragmentsOnCompositeTypesRule(context){return{InlineFragment:function InlineFragment(node){var typeCondition=node.typeCondition;if(typeCondition){var type=typeFromAST(context.getSchema(),typeCondition);if(type&&!isCompositeType(type)){var typeStr=print(typeCondition);context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr,\"\\\".\"),typeCondition));}}},FragmentDefinition:function FragmentDefinition(node){var type=typeFromAST(context.getSchema(),node.typeCondition);if(type&&!isCompositeType(type)){var typeStr=print(node.typeCondition);context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value,\"\\\" cannot condition on non composite type \\\"\").concat(typeStr,\"\\\".\"),node.typeCondition));}}};}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","concat","FragmentDefinition","name","value"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,YAAT,KAA6B,8BAA7B,CACA,OAASC,KAAT,KAAsB,4BAAtB,CACA,OAASC,eAAT,KAAgC,2BAAhC,CACA,OAASC,WAAT,KAA4B,iCAA5B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,8BAAT,CAAuCC,OAAvC,CAAgD,CACrD,MAAO,CACLC,cAAc,CAAE,QAASA,eAAT,CAAwBC,IAAxB,CAA8B,CAC5C,GAAIC,cAAa,CAAGD,IAAI,CAACC,aAAzB,CAEA,GAAIA,aAAJ,CAAmB,CACjB,GAAIC,KAAI,CAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,CAAsBF,aAAtB,CAAtB,CAEA,GAAIC,IAAI,EAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,CAAoC,CAClC,GAAIE,QAAO,CAAGV,KAAK,CAACO,aAAD,CAAnB,CACAH,OAAO,CAACO,WAAR,CAAoB,GAAIZ,aAAJ,CAAiB,qDAAqDa,MAArD,CAA4DF,OAA5D,CAAqE,KAArE,CAAjB,CAA8FH,aAA9F,CAApB,EACD,CACF,CACF,CAZI,CAaLM,kBAAkB,CAAE,QAASA,mBAAT,CAA4BP,IAA5B,CAAkC,CACpD,GAAIE,KAAI,CAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,CAAsBH,IAAI,CAACC,aAA3B,CAAtB,CAEA,GAAIC,IAAI,EAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,CAAoC,CAClC,GAAIE,QAAO,CAAGV,KAAK,CAACM,IAAI,CAACC,aAAN,CAAnB,CACAH,OAAO,CAACO,WAAR,CAAoB,GAAIZ,aAAJ,CAAiB,cAAca,MAAd,CAAqBN,IAAI,CAACQ,IAAL,CAAUC,KAA/B,CAAsC,8CAAtC,EAAsFH,MAAtF,CAA6FF,OAA7F,CAAsG,KAAtG,CAAjB,CAA+HJ,IAAI,CAACC,aAApI,CAApB,EACD,CACF,CApBI,CAAP,CAsBD"},"metadata":{},"sourceType":"module"}