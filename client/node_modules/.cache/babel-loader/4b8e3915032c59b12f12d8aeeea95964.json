{"ast":null,"code":"import{__extends}from\"tslib\";var MissingFieldError=function(_super){__extends(MissingFieldError,_super);function MissingFieldError(message,path,query,variables){var _a;var _this=_super.call(this,message)||this;_this.message=message;_this.path=path;_this.query=query;_this.variables=variables;if(Array.isArray(_this.path)){_this.missing=_this.message;for(var i=_this.path.length-1;i>=0;--i){_this.missing=(_a={},_a[_this.path[i]]=_this.missing,_a);}}else{_this.missing=_this.path;}_this.__proto__=MissingFieldError.prototype;return _this;}return MissingFieldError;}(Error);export{MissingFieldError};","map":{"version":3,"mappings":"6BAwBA,uCAAuCA,oCACrC,2BACkBC,OADlB,CAEkBC,IAFlB,CAGkBC,KAHlB,CAIkBC,SAJlB,CAIiD,QAJjD,UAOEC,iBAAMJ,OAAN,GAAc,IAPhB,CACkBK,sBACAA,gBACAA,kBACAA,0BAKhB,GAAIC,KAAK,CAACC,OAAN,CAAcF,KAAI,CAACJ,IAAnB,CAAJ,CAA8B,CAC5BI,KAAI,CAACG,OAAL,CAAeH,KAAI,CAACL,OAApB,CACA,IAAK,GAAIS,EAAC,CAAGJ,KAAI,CAACJ,IAAL,CAAUS,MAAV,CAAmB,CAAhC,CAAmCD,CAAC,EAAI,CAAxC,CAA2C,EAAEA,CAA7C,CAAgD,CAC9CJ,KAAI,CAACG,OAAL,EAAYG,MAAKA,GAACN,KAAI,CAACJ,IAAL,CAAUQ,CAAV,CAAD,EAAgBJ,KAAI,CAACG,OAA1B,CAAiCG,EAA7C,EACD,CACF,CALD,IAKO,CACLN,KAAI,CAACG,OAAL,CAAeH,KAAI,CAACJ,IAApB,CACD,CAIAI,KAAY,CAACO,SAAb,CAAyBC,iBAAiB,CAACC,SAA3C,cACF,CAGH,yBAAC,CAzBD,CAAuCC,KAAvC","names":["__extends","message","path","query","variables","_super","_this","Array","isArray","missing","i","length","_a","__proto__","MissingFieldError","prototype","Error"],"sourceRoot":"","sources":["../../../../src/cache/core/types/common.ts"],"sourcesContent":["import { DocumentNode, FieldNode } from 'graphql';\n\nimport {\n  Reference,\n  StoreObject,\n  StoreValue,\n  isReference,\n} from '../../../utilities';\n\nimport { StorageType } from '../../inmemory/policies';\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport type MissingTree = string | {\n  readonly [key: string]: MissingTree;\n};\n\nexport class MissingFieldError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly path: MissingTree | Array<string | number>,\n    public readonly query: DocumentNode,\n    public readonly variables?: Record<string, any>,\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    if (Array.isArray(this.path)) {\n      this.missing = this.message;\n      for (let i = this.path.length - 1; i >= 0; --i) {\n        this.missing = { [this.path[i]]: this.missing };\n      }\n    } else {\n      this.missing = this.path;\n    }\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n    // on Android (see issue #3236).\n    (this as any).__proto__ = MissingFieldError.prototype;\n  }\n\n  public readonly missing: MissingTree;\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference,\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean,\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\nexport type Modifier<T> = (value: T, details: {\n  DELETE: any;\n  INVALIDATE: any;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n}) => T;\n\nexport type Modifiers = {\n  [fieldName: string]: Modifier<any>;\n};\n"]},"metadata":{},"sourceType":"module"}