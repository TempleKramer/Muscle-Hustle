{"ast":null,"code":"import{__assign,__spreadArray}from\"tslib\";import{isNonNullObject}from\"./objects.js\";var hasOwnProperty=Object.prototype.hasOwnProperty;export function mergeDeep(){var sources=[];for(var _i=0;_i<arguments.length;_i++){sources[_i]=arguments[_i];}return mergeDeepArray(sources);}export function mergeDeepArray(sources){var target=sources[0]||{};var count=sources.length;if(count>1){var merger=new DeepMerger();for(var i=1;i<count;++i){target=merger.merge(target,sources[i]);}}return target;}var defaultReconciler=function defaultReconciler(target,source,property){return this.merge(target[property],source[property]);};var DeepMerger=function(){function DeepMerger(reconciler){if(reconciler===void 0){reconciler=defaultReconciler;}this.reconciler=reconciler;this.isObject=isNonNullObject;this.pastCopies=new Set();}DeepMerger.prototype.merge=function(target,source){var _this=this;var context=[];for(var _i=2;_i<arguments.length;_i++){context[_i-2]=arguments[_i];}if(isNonNullObject(source)&&isNonNullObject(target)){Object.keys(source).forEach(function(sourceKey){if(hasOwnProperty.call(target,sourceKey)){var targetValue=target[sourceKey];if(source[sourceKey]!==targetValue){var result=_this.reconciler.apply(_this,__spreadArray([target,source,sourceKey],context,false));if(result!==targetValue){target=_this.shallowCopyForMerge(target);target[sourceKey]=result;}}}else{target=_this.shallowCopyForMerge(target);target[sourceKey]=source[sourceKey];}});return target;}return source;};DeepMerger.prototype.shallowCopyForMerge=function(value){if(isNonNullObject(value)){if(!this.pastCopies.has(value)){if(Array.isArray(value)){value=value.slice(0);}else{value=__assign({__proto__:Object.getPrototypeOf(value)},value);}this.pastCopies.add(value);}}return value;};return DeepMerger;}();export{DeepMerger};","map":{"version":3,"mappings":"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","names":["isNonNullObject","Object","prototype","hasOwnProperty","mergeDeep","sources","mergeDeepArray","target","count","length","merger","DeepMerger","i","merge","defaultReconciler","source","property","reconciler","Set","context","keys","forEach","call","sourceKey","targetValue","result","_this","apply","__spreadArray","shallowCopyForMerge","value","pastCopies","has","Array","isArray","slice","__proto__","getPrototypeOf","add"],"sourceRoot":"","sources":["../../../src/utilities/common/mergeDeep.ts"],"sourcesContent":["import { isNonNullObject } from \"./objects\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}