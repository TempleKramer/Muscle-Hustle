{"ast":null,"code":"import devAssert from\"../jsutils/devAssert.mjs\";import{GraphQLError}from\"../error/GraphQLError.mjs\";import{visit,visitInParallel}from\"../language/visitor.mjs\";import{assertValidSchema}from\"../type/validate.mjs\";import{TypeInfo,visitWithTypeInfo}from\"../utilities/TypeInfo.mjs\";import{specifiedRules,specifiedSDLRules}from\"./specifiedRules.mjs\";import{SDLValidationContext,ValidationContext}from\"./ValidationContext.mjs\";/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */export function validate(schema,documentAST){var rules=arguments.length>2&&arguments[2]!==undefined?arguments[2]:specifiedRules;var typeInfo=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new TypeInfo(schema);var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{maxErrors:undefined};documentAST||devAssert(0,'Must provide document.');// If the schema used for validation is invalid, throw an error.\nassertValidSchema(schema);var abortObj=Object.freeze({});var errors=[];var context=new ValidationContext(schema,documentAST,typeInfo,function(error){if(options.maxErrors!=null&&errors.length>=options.maxErrors){errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));throw abortObj;}errors.push(error);});// This uses a specialized visitor which runs multiple visitors in parallel,\n// while maintaining the visitor skip and break API.\nvar visitor=visitInParallel(rules.map(function(rule){return rule(context);}));// Visit the whole document with each instance of all provided rules.\ntry{visit(documentAST,visitWithTypeInfo(typeInfo,visitor));}catch(e){if(e!==abortObj){throw e;}}return errors;}/**\n * @internal\n */export function validateSDL(documentAST,schemaToExtend){var rules=arguments.length>2&&arguments[2]!==undefined?arguments[2]:specifiedSDLRules;var errors=[];var context=new SDLValidationContext(documentAST,schemaToExtend,function(error){errors.push(error);});var visitors=rules.map(function(rule){return rule(context);});visit(documentAST,visitInParallel(visitors));return errors;}/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */export function assertValidSDL(documentAST){var errors=validateSDL(documentAST);if(errors.length!==0){throw new Error(errors.map(function(error){return error.message;}).join('\\n\\n'));}}/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */export function assertValidSDLExtension(documentAST,schema){var errors=validateSDL(documentAST,schema);if(errors.length!==0){throw new Error(errors.map(function(error){return error.message;}).join('\\n\\n'));}}","map":{"version":3,"names":["devAssert","GraphQLError","visit","visitInParallel","assertValidSchema","TypeInfo","visitWithTypeInfo","specifiedRules","specifiedSDLRules","SDLValidationContext","ValidationContext","validate","schema","documentAST","rules","arguments","length","undefined","typeInfo","options","maxErrors","abortObj","Object","freeze","errors","context","error","push","visitor","map","rule","e","validateSDL","schemaToExtend","visitors","assertValidSDL","Error","message","join","assertValidSDLExtension"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/validate.mjs"],"sourcesContent":["import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    maxErrors: undefined\n  };\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}