{"ast":null,"code":"import{__assign,__extends}from\"tslib\";import{invariant}from\"../utilities/globals/index.js\";import{equal}from'@wry/equality';import{NetworkStatus,isNetworkRequestInFlight}from\"./networkStatus.js\";import{cloneDeep,compact,getOperationDefinition,Observable,iterateObserversSafely,isNonEmptyArray,fixObservableSubclass,getQueryDefinition}from\"../utilities/index.js\";var assign=Object.assign,hasOwnProperty=Object.hasOwnProperty;var ObservableQuery=function(_super){__extends(ObservableQuery,_super);function ObservableQuery(_a){var queryManager=_a.queryManager,queryInfo=_a.queryInfo,options=_a.options;var _this=_super.call(this,function(observer){try{var subObserver=observer._subscription._observer;if(subObserver&&!subObserver.error){subObserver.error=defaultSubscriptionObserverErrorCallback;}}catch(_a){}var first=!_this.observers.size;_this.observers.add(observer);var last=_this.last;if(last&&last.error){observer.error&&observer.error(last.error);}else if(last&&last.result){observer.next&&observer.next(last.result);}if(first){_this.reobserve().catch(function(){});}return function(){if(_this.observers.delete(observer)&&!_this.observers.size){_this.tearDownQuery();}};})||this;_this.observers=new Set();_this.subscriptions=new Set();_this.queryInfo=queryInfo;_this.queryManager=queryManager;_this.isTornDown=false;var _b=queryManager.defaultOptions.watchQuery,_c=_b===void 0?{}:_b,_d=_c.fetchPolicy,defaultFetchPolicy=_d===void 0?\"cache-first\":_d;var _e=options.fetchPolicy,fetchPolicy=_e===void 0?defaultFetchPolicy:_e,_f=options.initialFetchPolicy,initialFetchPolicy=_f===void 0?fetchPolicy===\"standby\"?defaultFetchPolicy:fetchPolicy:_f;_this.options=__assign(__assign({},options),{initialFetchPolicy:initialFetchPolicy,fetchPolicy:fetchPolicy});_this.queryId=queryInfo.queryId||queryManager.generateQueryId();var opDef=getOperationDefinition(_this.query);_this.queryName=opDef&&opDef.name&&opDef.name.value;return _this;}Object.defineProperty(ObservableQuery.prototype,\"query\",{get:function get(){return this.queryManager.transform(this.options.query).document;},enumerable:false,configurable:true});Object.defineProperty(ObservableQuery.prototype,\"variables\",{get:function get(){return this.options.variables;},enumerable:false,configurable:true});ObservableQuery.prototype.result=function(){var _this=this;return new Promise(function(resolve,reject){var observer={next:function next(result){resolve(result);_this.observers.delete(observer);if(!_this.observers.size){_this.queryManager.removeQuery(_this.queryId);}setTimeout(function(){subscription.unsubscribe();},0);},error:reject};var subscription=_this.subscribe(observer);});};ObservableQuery.prototype.getCurrentResult=function(saveAsLastResult){if(saveAsLastResult===void 0){saveAsLastResult=true;}var lastResult=this.getLastResult(true);var networkStatus=this.queryInfo.networkStatus||lastResult&&lastResult.networkStatus||NetworkStatus.ready;var result=__assign(__assign({},lastResult),{loading:isNetworkRequestInFlight(networkStatus),networkStatus:networkStatus});var _a=this.options.fetchPolicy,fetchPolicy=_a===void 0?\"cache-first\":_a;if(fetchPolicy==='network-only'||fetchPolicy==='no-cache'||fetchPolicy==='standby'||this.queryManager.transform(this.options.query).hasForcedResolvers){}else{var diff=this.queryInfo.getDiff();if(diff.complete||this.options.returnPartialData){result.data=diff.result;}if(equal(result.data,{})){result.data=void 0;}if(diff.complete){delete result.partial;if(diff.complete&&result.networkStatus===NetworkStatus.loading&&(fetchPolicy==='cache-first'||fetchPolicy==='cache-only')){result.networkStatus=NetworkStatus.ready;result.loading=false;}}else{result.partial=true;}if(__DEV__&&!diff.complete&&!this.options.partialRefetch&&!result.loading&&!result.data&&!result.error){logMissingFieldErrors(diff.missing);}}if(saveAsLastResult){this.updateLastResult(result);}return result;};ObservableQuery.prototype.isDifferentFromLastResult=function(newResult){return!this.last||!equal(this.last.result,newResult);};ObservableQuery.prototype.getLast=function(key,variablesMustMatch){var last=this.last;if(last&&last[key]&&(!variablesMustMatch||equal(last.variables,this.variables))){return last[key];}};ObservableQuery.prototype.getLastResult=function(variablesMustMatch){return this.getLast(\"result\",variablesMustMatch);};ObservableQuery.prototype.getLastError=function(variablesMustMatch){return this.getLast(\"error\",variablesMustMatch);};ObservableQuery.prototype.resetLastResults=function(){delete this.last;this.isTornDown=false;};ObservableQuery.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId);};ObservableQuery.prototype.refetch=function(variables){var _a;var reobserveOptions={pollInterval:0};var fetchPolicy=this.options.fetchPolicy;if(fetchPolicy==='cache-and-network'){reobserveOptions.fetchPolicy=fetchPolicy;}else if(fetchPolicy==='no-cache'){reobserveOptions.fetchPolicy='no-cache';}else{reobserveOptions.fetchPolicy='network-only';}if(__DEV__&&variables&&hasOwnProperty.call(variables,\"variables\")){var queryDef=getQueryDefinition(this.query);var vars=queryDef.variableDefinitions;if(!vars||!vars.some(function(v){return v.variable.name.value===\"variables\";})){__DEV__&&invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables),\") for query \").concat(((_a=queryDef.name)===null||_a===void 0?void 0:_a.value)||JSON.stringify(queryDef),\", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));}}if(variables&&!equal(this.options.variables,variables)){reobserveOptions.variables=this.options.variables=__assign(__assign({},this.options.variables),variables);}this.queryInfo.resetLastWrite();return this.reobserve(reobserveOptions,NetworkStatus.refetch);};ObservableQuery.prototype.fetchMore=function(fetchMoreOptions){var _this=this;var combinedOptions=__assign(__assign({},fetchMoreOptions.query?fetchMoreOptions:__assign(__assign(__assign(__assign({},this.options),{query:this.query}),fetchMoreOptions),{variables:__assign(__assign({},this.options.variables),fetchMoreOptions.variables)})),{fetchPolicy:\"no-cache\"});var qid=this.queryManager.generateQueryId();var queryInfo=this.queryInfo;var originalNetworkStatus=queryInfo.networkStatus;queryInfo.networkStatus=NetworkStatus.fetchMore;if(combinedOptions.notifyOnNetworkStatusChange){this.observe();}var updatedQuerySet=new Set();return this.queryManager.fetchQuery(qid,combinedOptions,NetworkStatus.fetchMore).then(function(fetchMoreResult){_this.queryManager.removeQuery(qid);if(queryInfo.networkStatus===NetworkStatus.fetchMore){queryInfo.networkStatus=originalNetworkStatus;}_this.queryManager.cache.batch({update:function update(cache){var updateQuery=fetchMoreOptions.updateQuery;if(updateQuery){cache.updateQuery({query:_this.query,variables:_this.variables,returnPartialData:true,optimistic:false},function(previous){return updateQuery(previous,{fetchMoreResult:fetchMoreResult.data,variables:combinedOptions.variables});});}else{cache.writeQuery({query:combinedOptions.query,variables:combinedOptions.variables,data:fetchMoreResult.data});}},onWatchUpdated:function onWatchUpdated(watch){updatedQuerySet.add(watch.query);}});return fetchMoreResult;}).finally(function(){if(!updatedQuerySet.has(_this.query)){reobserveCacheFirst(_this);}});};ObservableQuery.prototype.subscribeToMore=function(options){var _this=this;var subscription=this.queryManager.startGraphQLSubscription({query:options.document,variables:options.variables,context:options.context}).subscribe({next:function next(subscriptionData){var updateQuery=options.updateQuery;if(updateQuery){_this.updateQuery(function(previous,_a){var variables=_a.variables;return updateQuery(previous,{subscriptionData:subscriptionData,variables:variables});});}},error:function error(err){if(options.onError){options.onError(err);return;}__DEV__&&invariant.error('Unhandled GraphQL subscription error',err);}});this.subscriptions.add(subscription);return function(){if(_this.subscriptions.delete(subscription)){subscription.unsubscribe();}};};ObservableQuery.prototype.setOptions=function(newOptions){return this.reobserve(newOptions);};ObservableQuery.prototype.setVariables=function(variables){if(equal(this.variables,variables)){return this.observers.size?this.result():Promise.resolve();}this.options.variables=variables;if(!this.observers.size){return Promise.resolve();}return this.reobserve({fetchPolicy:this.options.initialFetchPolicy,variables:variables},NetworkStatus.setVariables);};ObservableQuery.prototype.updateQuery=function(mapFn){var queryManager=this.queryManager;var result=queryManager.cache.diff({query:this.options.query,variables:this.variables,returnPartialData:true,optimistic:false}).result;var newResult=mapFn(result,{variables:this.variables});if(newResult){queryManager.cache.writeQuery({query:this.options.query,data:newResult,variables:this.variables});queryManager.broadcastQueries();}};ObservableQuery.prototype.startPolling=function(pollInterval){this.options.pollInterval=pollInterval;this.updatePolling();};ObservableQuery.prototype.stopPolling=function(){this.options.pollInterval=0;this.updatePolling();};ObservableQuery.prototype.applyNextFetchPolicy=function(reason,options){if(options.nextFetchPolicy){var _a=options.fetchPolicy,fetchPolicy=_a===void 0?\"cache-first\":_a,_b=options.initialFetchPolicy,initialFetchPolicy=_b===void 0?fetchPolicy:_b;if(fetchPolicy===\"standby\"){}else if(typeof options.nextFetchPolicy===\"function\"){options.fetchPolicy=options.nextFetchPolicy(fetchPolicy,{reason:reason,options:options,observable:this,initialFetchPolicy:initialFetchPolicy});}else if(reason===\"variables-changed\"){options.fetchPolicy=initialFetchPolicy;}else{options.fetchPolicy=options.nextFetchPolicy;}}return options.fetchPolicy;};ObservableQuery.prototype.fetch=function(options,newNetworkStatus){this.queryManager.setObservableQuery(this);return this.queryManager.fetchQueryObservable(this.queryId,options,newNetworkStatus);};ObservableQuery.prototype.updatePolling=function(){var _this=this;if(this.queryManager.ssrMode){return;}var _a=this,pollingInfo=_a.pollingInfo,pollInterval=_a.options.pollInterval;if(!pollInterval){if(pollingInfo){clearTimeout(pollingInfo.timeout);delete this.pollingInfo;}return;}if(pollingInfo&&pollingInfo.interval===pollInterval){return;}__DEV__?invariant(pollInterval,'Attempted to start a polling query without a polling interval.'):invariant(pollInterval,12);var info=pollingInfo||(this.pollingInfo={});info.interval=pollInterval;var maybeFetch=function maybeFetch(){if(_this.pollingInfo){if(!isNetworkRequestInFlight(_this.queryInfo.networkStatus)){_this.reobserve({fetchPolicy:_this.options.initialFetchPolicy==='no-cache'?'no-cache':'network-only'},NetworkStatus.poll).then(poll,poll);}else{poll();}};};var poll=function poll(){var info=_this.pollingInfo;if(info){clearTimeout(info.timeout);info.timeout=setTimeout(maybeFetch,info.interval);}};poll();};ObservableQuery.prototype.updateLastResult=function(newResult,variables){if(variables===void 0){variables=this.variables;}this.last=__assign(__assign({},this.last),{result:this.queryManager.assumeImmutableResults?newResult:cloneDeep(newResult),variables:variables});if(!isNonEmptyArray(newResult.errors)){delete this.last.error;}return this.last;};ObservableQuery.prototype.reobserve=function(newOptions,newNetworkStatus){var _this=this;this.isTornDown=false;var useDisposableConcast=newNetworkStatus===NetworkStatus.refetch||newNetworkStatus===NetworkStatus.fetchMore||newNetworkStatus===NetworkStatus.poll;var oldVariables=this.options.variables;var oldFetchPolicy=this.options.fetchPolicy;var mergedOptions=compact(this.options,newOptions||{});var options=useDisposableConcast?mergedOptions:assign(this.options,mergedOptions);if(!useDisposableConcast){this.updatePolling();if(newOptions&&newOptions.variables&&!equal(newOptions.variables,oldVariables)&&options.fetchPolicy!==\"standby\"&&options.fetchPolicy===oldFetchPolicy){this.applyNextFetchPolicy(\"variables-changed\",options);if(newNetworkStatus===void 0){newNetworkStatus=NetworkStatus.setVariables;}}}var variables=options.variables&&__assign({},options.variables);var concast=this.fetch(options,newNetworkStatus);var observer={next:function next(result){_this.reportResult(result,variables);},error:function error(_error){_this.reportError(_error,variables);}};if(!useDisposableConcast){if(this.concast&&this.observer){this.concast.removeObserver(this.observer);}this.concast=concast;this.observer=observer;}concast.addObserver(observer);return concast.promise;};ObservableQuery.prototype.observe=function(){this.reportResult(this.getCurrentResult(false),this.variables);};ObservableQuery.prototype.reportResult=function(result,variables){var lastError=this.getLastError();if(lastError||this.isDifferentFromLastResult(result)){if(lastError||!result.partial||this.options.returnPartialData){this.updateLastResult(result,variables);}iterateObserversSafely(this.observers,'next',result);}};ObservableQuery.prototype.reportError=function(error,variables){var errorResult=__assign(__assign({},this.getLastResult()),{error:error,errors:error.graphQLErrors,networkStatus:NetworkStatus.error,loading:false});this.updateLastResult(errorResult,variables);iterateObserversSafely(this.observers,'error',this.last.error=error);};ObservableQuery.prototype.hasObservers=function(){return this.observers.size>0;};ObservableQuery.prototype.tearDownQuery=function(){if(this.isTornDown)return;if(this.concast&&this.observer){this.concast.removeObserver(this.observer);delete this.concast;delete this.observer;}this.stopPolling();this.subscriptions.forEach(function(sub){return sub.unsubscribe();});this.subscriptions.clear();this.queryManager.stopQuery(this.queryId);this.observers.clear();this.isTornDown=true;};return ObservableQuery;}(Observable);export{ObservableQuery};fixObservableSubclass(ObservableQuery);export function reobserveCacheFirst(obsQuery){var _a=obsQuery.options,fetchPolicy=_a.fetchPolicy,_nextFetchPolicy=_a.nextFetchPolicy;if(fetchPolicy===\"cache-and-network\"||fetchPolicy===\"network-only\"){return obsQuery.reobserve({fetchPolicy:\"cache-first\",nextFetchPolicy:function nextFetchPolicy(){this.nextFetchPolicy=_nextFetchPolicy;if(typeof _nextFetchPolicy===\"function\"){return _nextFetchPolicy.apply(this,arguments);}return fetchPolicy;}});}return obsQuery.reobserve();}function defaultSubscriptionObserverErrorCallback(error){__DEV__&&invariant.error('Unhandled error',error.message,error.stack);}export function logMissingFieldErrors(missing){if(__DEV__&&missing){__DEV__&&invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)),missing);}}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","isNonEmptyArray","fixObservableSubclass","getQueryDefinition","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","_super","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","isTornDown","defaultOptions","watchQuery","_b","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","fetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","transform","document","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","call","queryDef","vars","variableDefinitions","some","variable","concat","JSON","resetLastWrite","refetch","fetchMoreOptions","combinedOptions","qid","originalNetworkStatus","fetchMore","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","cache","batch","update","updateQuery","optimistic","previous","fetchMoreResult","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","startGraphQLSubscription","context","subscriptionData","err","onError","subscriptions","newOptions","setVariables","mapFn","broadcastQueries","updatePolling","reason","nextFetchPolicy","observable","newNetworkStatus","setObservableQuery","fetchQueryObservable","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","errors","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","assign","applyNextFetchPolicy","concast","fetch","reportResult","reportError","removeObserver","addObserver","promise","getCurrentResult","lastError","getLastError","isDifferentFromLastResult","errorResult","graphQLErrors","stopPolling","forEach","clear","stopQuery","obsQuery","apply","arguments"],"sourceRoot":"","sources":["../../src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    return !this.last || !equal(this.last.result, newResult);\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}