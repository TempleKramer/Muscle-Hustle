{"ast":null,"code":"import{__assign,__rest}from\"tslib\";import\"../../utilities/globals/index.js\";import{visit}from'graphql';import{ApolloLink}from\"../core/index.js\";import{Observable,hasDirectives}from\"../../utilities/index.js\";import{serializeFetchParameter}from\"./serializeFetchParameter.js\";import{selectURI}from\"./selectURI.js\";import{handleError,readMultipartBody,readJsonBody}from\"./parseAndCheckHttpResponse.js\";import{checkFetcher}from\"./checkFetcher.js\";import{selectHttpOptionsAndBodyInternal,defaultPrinter,fallbackHttpConfig}from\"./selectHttpOptionsAndBody.js\";import{createSignalIfSupported}from\"./createSignalIfSupported.js\";import{rewriteURIForGET}from\"./rewriteURIForGET.js\";import{fromError}from\"../utils/index.js\";import{maybe}from\"../../utilities/index.js\";var backupFetch=maybe(function(){return fetch;});export var createHttpLink=function createHttpLink(linkOptions){if(linkOptions===void 0){linkOptions={};}var _a=linkOptions.uri,uri=_a===void 0?'/graphql':_a,preferredFetch=linkOptions.fetch,_b=linkOptions.print,print=_b===void 0?defaultPrinter:_b,includeExtensions=linkOptions.includeExtensions,preserveHeaderCase=linkOptions.preserveHeaderCase,useGETForQueries=linkOptions.useGETForQueries,_c=linkOptions.includeUnusedVariables,includeUnusedVariables=_c===void 0?false:_c,requestOptions=__rest(linkOptions,[\"uri\",\"fetch\",\"print\",\"includeExtensions\",\"preserveHeaderCase\",\"useGETForQueries\",\"includeUnusedVariables\"]);if(__DEV__){checkFetcher(preferredFetch||backupFetch);}var linkConfig={http:{includeExtensions:includeExtensions,preserveHeaderCase:preserveHeaderCase},options:requestOptions.fetchOptions,credentials:requestOptions.credentials,headers:requestOptions.headers};return new ApolloLink(function(operation){var chosenURI=selectURI(operation,uri);var context=operation.getContext();var clientAwarenessHeaders={};if(context.clientAwareness){var _a=context.clientAwareness,name_1=_a.name,version=_a.version;if(name_1){clientAwarenessHeaders['apollographql-client-name']=name_1;}if(version){clientAwarenessHeaders['apollographql-client-version']=version;}}var contextHeaders=__assign(__assign({},clientAwarenessHeaders),context.headers);var contextConfig={http:context.http,options:context.fetchOptions,credentials:context.credentials,headers:contextHeaders};var _b=selectHttpOptionsAndBodyInternal(operation,print,fallbackHttpConfig,linkConfig,contextConfig),options=_b.options,body=_b.body;if(body.variables&&!includeUnusedVariables){var unusedNames_1=new Set(Object.keys(body.variables));visit(operation.query,{Variable:function Variable(node,_key,parent){if(parent&&parent.kind!=='VariableDefinition'){unusedNames_1.delete(node.name.value);}}});if(unusedNames_1.size){body.variables=__assign({},body.variables);unusedNames_1.forEach(function(name){delete body.variables[name];});}}var controller;if(!options.signal){var _c=createSignalIfSupported(),_controller=_c.controller,signal=_c.signal;controller=_controller;if(controller)options.signal=signal;}var definitionIsMutation=function definitionIsMutation(d){return d.kind==='OperationDefinition'&&d.operation==='mutation';};if(useGETForQueries&&!operation.query.definitions.some(definitionIsMutation)){options.method='GET';}if(hasDirectives(['defer'],operation.query)){options.headers.accept=\"multipart/mixed; deferSpec=20220824, application/json\";}if(options.method==='GET'){var _d=rewriteURIForGET(chosenURI,body),newURI=_d.newURI,parseError=_d.parseError;if(parseError){return fromError(parseError);}chosenURI=newURI;}else{try{options.body=serializeFetchParameter(body,'Payload');}catch(parseError){return fromError(parseError);}}return new Observable(function(observer){var currentFetch=preferredFetch||maybe(function(){return fetch;})||backupFetch;currentFetch(chosenURI,options).then(function(response){var _a;operation.setContext({response:response});var ctype=(_a=response.headers)===null||_a===void 0?void 0:_a.get('content-type');if(ctype!==null&&/^multipart\\/mixed/i.test(ctype)){return readMultipartBody(response,observer);}else{return readJsonBody(response,operation,observer);}}).catch(function(err){return handleError(err,observer);});return function(){if(controller)controller.abort();};});});};","map":{"version":3,"mappings":"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","names":["visit","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","readJsonBody","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","createHttpLink","linkOptions","_a","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","chosenURI","operation","uri","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","name","value","size","__assign","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","accept","newURI","parseError","currentFetch","then","setContext","response","ctype","get","test","observer","catch","err","abort"],"sourceRoot":"","sources":["../../../src/link/http/createHttpLink.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    // does not match custom directives beginning with @defer\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}