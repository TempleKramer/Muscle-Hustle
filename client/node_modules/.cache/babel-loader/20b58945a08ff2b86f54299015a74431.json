{"ast":null,"code":"import{__extends}from\"tslib\";import{Observable}from\"./Observable.js\";import{iterateObserversSafely}from\"./iteration.js\";import{fixObservableSubclass}from\"./subclassing.js\";function isPromiseLike(value){return value&&typeof value.then===\"function\";}var Concast=function(_super){__extends(Concast,_super);function Concast(sources){var _this=_super.call(this,function(observer){_this.addObserver(observer);return function(){return _this.removeObserver(observer);};})||this;_this.observers=new Set();_this.promise=new Promise(function(resolve,reject){_this.resolve=resolve;_this.reject=reject;});_this.handlers={next:function next(result){if(_this.sub!==null){_this.latest=[\"next\",result];_this.notify(\"next\",result);iterateObserversSafely(_this.observers,\"next\",result);}},error:function error(_error){var sub=_this.sub;if(sub!==null){if(sub)setTimeout(function(){return sub.unsubscribe();});_this.sub=null;_this.latest=[\"error\",_error];_this.reject(_error);_this.notify(\"error\",_error);iterateObserversSafely(_this.observers,\"error\",_error);}},complete:function complete(){var sub=_this.sub;if(sub!==null){var value=_this.sources.shift();if(!value){if(sub)setTimeout(function(){return sub.unsubscribe();});_this.sub=null;if(_this.latest&&_this.latest[0]===\"next\"){_this.resolve(_this.latest[1]);}else{_this.resolve();}_this.notify(\"complete\");iterateObserversSafely(_this.observers,\"complete\");}else if(isPromiseLike(value)){value.then(function(obs){return _this.sub=obs.subscribe(_this.handlers);});}else{_this.sub=value.subscribe(_this.handlers);}}}};_this.nextResultListeners=new Set();_this.cancel=function(reason){_this.reject(reason);_this.sources=[];_this.handlers.complete();};_this.promise.catch(function(_){});if(typeof sources===\"function\"){sources=[new Observable(sources)];}if(isPromiseLike(sources)){sources.then(function(iterable){return _this.start(iterable);},_this.handlers.error);}else{_this.start(sources);}return _this;}Concast.prototype.start=function(sources){if(this.sub!==void 0)return;this.sources=Array.from(sources);this.handlers.complete();};Concast.prototype.deliverLastMessage=function(observer){if(this.latest){var nextOrError=this.latest[0];var method=observer[nextOrError];if(method){method.call(observer,this.latest[1]);}if(this.sub===null&&nextOrError===\"next\"&&observer.complete){observer.complete();}}};Concast.prototype.addObserver=function(observer){if(!this.observers.has(observer)){this.deliverLastMessage(observer);this.observers.add(observer);}};Concast.prototype.removeObserver=function(observer){if(this.observers.delete(observer)&&this.observers.size<1){this.handlers.complete();}};Concast.prototype.notify=function(method,arg){var nextResultListeners=this.nextResultListeners;if(nextResultListeners.size){this.nextResultListeners=new Set();nextResultListeners.forEach(function(listener){return listener(method,arg);});}};Concast.prototype.beforeNext=function(callback){var called=false;this.nextResultListeners.add(function(method,arg){if(!called){called=true;callback(method,arg);}});};return Concast;}(Observable);export{Concast};fixObservableSubclass(Concast);","map":{"version":3,"mappings":"6BAAA,OAASA,UAAT,KAAyE,iBAAzE,CACA,OAASC,sBAAT,KAAuC,gBAAvC,CACA,OAASC,qBAAT,KAAsC,kBAAtC,CAIA,QAASC,cAAT,CAA0BC,KAA1B,CAA8C,CAC5C,MAAOA,MAAK,EAAI,MAAQA,MAAa,CAACC,IAAtB,GAA+B,UAA/C,CACD,CAqCD,6BAAgCC,0BAc9B,iBAAYC,OAAZ,CAA0E,CAA1E,UACEC,iBAAM,kBAAQ,CACZC,KAAI,CAACC,WAAL,CAAiBC,QAAjB,EACA,MAAO,YAAM,YAAI,CAACC,cAAL,CAAoBD,QAApB,EAA6B,CAA1C,CACD,CAHD,GAGE,IAJJ,CAVQF,gBAAY,GAAII,IAAJ,EAAZ,CAsGQJ,cAAU,GAAIK,QAAJ,CAAe,SAACC,OAAD,CAAUC,MAAV,CAAgB,CACvDP,KAAI,CAACM,OAAL,CAAeA,OAAf,CACAN,KAAI,CAACO,MAAL,CAAcA,MAAd,CACD,CAHyB,CAAV,CAWRP,eAAW,CACjBQ,IAAI,CAAE,cAACC,MAAD,CAAU,CACd,GAAIT,KAAI,CAACU,GAAL,GAAa,IAAjB,CAAuB,CACrBV,KAAI,CAACW,MAAL,CAAc,CAAC,MAAD,CAASF,MAAT,CAAd,CACAT,KAAI,CAACY,MAAL,CAAY,MAAZ,CAAoBH,MAApB,EACAjB,sBAAsB,CAACQ,KAAI,CAACa,SAAN,CAAiB,MAAjB,CAAyBJ,MAAzB,CAAtB,CACD,CACF,CAPgB,CASjBK,KAAK,CAAE,eAACA,MAAD,CAAW,CACR,OAAG,CAAKd,KAAI,IAAZ,CACR,GAAIU,GAAG,GAAK,IAAZ,CAAkB,CAIhB,GAAIA,GAAJ,CAASK,UAAU,CAAC,WAAM,UAAG,CAACC,WAAJ,GAAiB,CAAxB,CAAV,CACThB,KAAI,CAACU,GAAL,CAAW,IAAX,CACAV,KAAI,CAACW,MAAL,CAAc,CAAC,OAAD,CAAUG,MAAV,CAAd,CACAd,KAAI,CAACO,MAAL,CAAYO,MAAZ,EACAd,KAAI,CAACY,MAAL,CAAY,OAAZ,CAAqBE,MAArB,EACAtB,sBAAsB,CAACQ,KAAI,CAACa,SAAN,CAAiB,OAAjB,CAA0BC,MAA1B,CAAtB,CACD,CACF,CAtBgB,CAwBjBG,QAAQ,CAAE,oBACA,OAAG,CAAKjB,KAAI,IAAZ,CACR,GAAIU,GAAG,GAAK,IAAZ,CAAkB,CAChB,GAAMf,MAAK,CAAGK,KAAI,CAACF,OAAL,CAAaoB,KAAb,EAAd,CACA,GAAI,CAACvB,KAAL,CAAY,CACV,GAAIe,GAAJ,CAASK,UAAU,CAAC,WAAM,UAAG,CAACC,WAAJ,GAAiB,CAAxB,CAAV,CACThB,KAAI,CAACU,GAAL,CAAW,IAAX,CACA,GAAIV,KAAI,CAACW,MAAL,EACAX,KAAI,CAACW,MAAL,CAAY,CAAZ,IAAmB,MADvB,CAC+B,CAC7BX,KAAI,CAACM,OAAL,CAAaN,KAAI,CAACW,MAAL,CAAY,CAAZ,CAAb,EACD,CAHD,IAGO,CACLX,KAAI,CAACM,OAAL,GACD,CACDN,KAAI,CAACY,MAAL,CAAY,UAAZ,EAOApB,sBAAsB,CAACQ,KAAI,CAACa,SAAN,CAAiB,UAAjB,CAAtB,CACD,CAjBD,IAiBO,IAAInB,aAAa,CAACC,KAAD,CAAjB,CAA0B,CAC/BA,KAAK,CAACC,IAAN,CAAW,aAAG,CAAI,YAAI,CAACc,GAAL,CAAWS,GAAG,CAACC,SAAJ,CAAcpB,KAAI,CAACqB,QAAnB,CAAX,CAAuC,CAAzD,EACD,CAFM,IAEA,CACLrB,KAAI,CAACU,GAAL,CAAWf,KAAK,CAACyB,SAAN,CAAgBpB,KAAI,CAACqB,QAArB,CAAX,CACD,CACF,CACF,CAnDgB,CAAX,CAsDArB,0BAAsB,GAAII,IAAJ,EAAtB,CAgCDJ,aAAS,SAACsB,MAAD,CAAY,CAC1BtB,KAAI,CAACO,MAAL,CAAYe,MAAZ,EACAtB,KAAI,CAACF,OAAL,CAAe,EAAf,CACAE,KAAI,CAACqB,QAAL,CAAcJ,QAAd,GACD,CAJM,CApLLjB,KAAI,CAACuB,OAAL,CAAaC,KAAb,CAAmB,WAAC,CAAM,CAA1B,EAKA,GAAI,MAAO1B,QAAP,GAAmB,UAAvB,CAAmC,CACjCA,OAAO,CAAG,CAAC,GAAIP,WAAJ,CAAeO,OAAf,CAAD,CAAV,CACD,CAED,GAAIJ,aAAa,CAACI,OAAD,CAAjB,CAA4B,CAC1BA,OAAO,CAACF,IAAR,CACE,kBAAQ,CAAI,YAAI,CAAC6B,KAAL,CAAWC,QAAX,EAAoB,CADlC,CAEE1B,KAAI,CAACqB,QAAL,CAAcP,KAFhB,EAID,CALD,IAKO,CACLd,KAAI,CAACyB,KAAL,CAAW3B,OAAX,EACD,cACF,CAMO6B,wBAAR,SAAc7B,OAAd,CAAgD,CAC9C,GAAI,KAAKY,GAAL,GAAa,IAAK,EAAtB,CAAyB,OAKzB,KAAKZ,OAAL,CAAe8B,KAAK,CAACC,IAAN,CAAW/B,OAAX,CAAf,CAMA,KAAKuB,QAAL,CAAcJ,QAAd,GACD,CAbO,CAeAU,qCAAR,SAA2BzB,QAA3B,CAAgD,CAC9C,GAAI,KAAKS,MAAT,CAAiB,CACf,GAAMmB,YAAW,CAAG,KAAKnB,MAAL,CAAY,CAAZ,CAApB,CACA,GAAMoB,OAAM,CAAG7B,QAAQ,CAAC4B,WAAD,CAAvB,CACA,GAAIC,MAAJ,CAAY,CACVA,MAAM,CAACC,IAAP,CAAY9B,QAAZ,CAAsB,KAAKS,MAAL,CAAY,CAAZ,CAAtB,EACD,CAID,GAAI,KAAKD,GAAL,GAAa,IAAb,EACAoB,WAAW,GAAK,MADhB,EAEA5B,QAAQ,CAACe,QAFb,CAEuB,CACrBf,QAAQ,CAACe,QAAT,GACD,CACF,CACF,CAhBO,CAkBDU,8BAAP,SAAmBzB,QAAnB,CAAwC,CACtC,GAAI,CAAC,KAAKW,SAAL,CAAeoB,GAAf,CAAmB/B,QAAnB,CAAL,CAAmC,CAGjC,KAAKgC,kBAAL,CAAwBhC,QAAxB,EACA,KAAKW,SAAL,CAAesB,GAAf,CAAmBjC,QAAnB,EACD,CACF,CAPM,CASAyB,iCAAP,SAAsBzB,QAAtB,CAA2C,CACzC,GACE,KAAKW,SAAL,CAAeuB,MAAf,CAAsBlC,QAAtB,GACA,KAAKW,SAAL,CAAewB,IAAf,CAAsB,CAFxB,CAGE,CAKA,KAAKhB,QAAL,CAAcJ,QAAd,GACD,CACF,CAXM,CAqFCU,yBAAR,SACEI,MADF,CAEEO,GAFF,CAEyC,CAE/B,uBAAmB,CAAK,KAAIC,mBAA5B,CACR,GAAIA,mBAAmB,CAACF,IAAxB,CAA8B,CAG5B,KAAKE,mBAAL,CAA2B,GAAInC,IAAJ,EAA3B,CACAmC,mBAAmB,CAACC,OAApB,CAA4B,kBAAQ,CAAI,eAAQ,CAACT,MAAD,CAASO,GAAT,CAAR,CAAqB,CAA7D,EACD,CACF,CAXO,CAmBRX,sCAAWc,QAAX,CAAuC,CACrC,GAAIC,OAAM,CAAG,KAAb,CACA,KAAKH,mBAAL,CAAyBJ,GAAzB,CAA6B,SAACJ,MAAD,CAASO,GAAT,CAAY,CACvC,GAAI,CAACI,MAAL,CAAa,CACXA,MAAM,CAAG,IAAT,CACAD,QAAQ,CAACV,MAAD,CAASO,GAAT,CAAR,CACD,CACF,CALD,EAMD,CARD,CAgBF,eAAC,CAhND,CAAgC/C,UAAhC,kBAyNAE,qBAAqB,CAACkC,OAAD,CAArB","names":["Observable","iterateObserversSafely","fixObservableSubclass","isPromiseLike","value","then","__extends","sources","_super","_this","addObserver","observer","removeObserver","Set","Promise","resolve","reject","next","result","sub","latest","notify","observers","error","setTimeout","unsubscribe","complete","shift","obs","subscribe","handlers","reason","promise","catch","start","iterable","Concast","Array","from","nextOrError","method","call","has","deliverLastMessage","add","delete","size","arg","nextResultListeners","forEach","callback","called"],"sourceRoot":"","sources":["../../../src/utilities/observables/Concast.ts"],"sourcesContent":["import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\nexport type ConcastSourcesArray<T> = Array<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n    }\n  }\n\n  public removeObserver(observer: Observer<T>) {\n    if (\n      this.observers.delete(observer) &&\n      this.observers.size < 1\n    ) {\n      // In case there are still any listeners in this.nextResultListeners, and\n      // no error or completion has been broadcast yet, make sure those\n      // observers have a chance to run and then remove themselves from\n      // this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\", T] | [\"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        this.notify(\"next\", result);\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        this.notify(\"error\", error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub } = this;\n      if (sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          this.notify(\"complete\");\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  private nextResultListeners = new Set<NextResultListener>();\n\n  private notify(\n    method: Parameters<NextResultListener>[0],\n    arg?: Parameters<NextResultListener>[1],\n  ) {\n    const { nextResultListeners } = this;\n    if (nextResultListeners.size) {\n      // Replacing this.nextResultListeners first ensures it does not grow while\n      // we are iterating over it, potentially leading to infinite loops.\n      this.nextResultListeners = new Set;\n      nextResultListeners.forEach(listener => listener(method, arg));\n    }\n  }\n\n  // We need a way to run callbacks just *before* the next result (or error or\n  // completion) is delivered by this Concast, so we can be sure any code that\n  // runs as a result of delivering that result/error observes the effects of\n  // running the callback(s). It was tempting to reuse the Observer type instead\n  // of introducing NextResultListener, but that messes with the sizing and\n  // maintenance of this.observers, and ends up being more code overall.\n  beforeNext(callback: NextResultListener) {\n    let called = false;\n    this.nextResultListeners.add((method, arg) => {\n      if (!called) {\n        called = true;\n        callback(method, arg);\n      }\n    });\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\ntype NextResultListener = (\n  method: \"next\" | \"error\" | \"complete\",\n  arg?: any,\n) => any;\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n"]},"metadata":{},"sourceType":"module"}