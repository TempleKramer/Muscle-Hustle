{"ast":null,"code":"import{SYMBOL_ITERATOR}from\"./symbols.mjs\";/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound]\nvar arrayFrom=Array.from||function(obj,mapFn,thisArg){if(obj==null){throw new TypeError('Array.from requires an array-like object - not null or undefined');}// Is Iterable?\nvar iteratorMethod=obj[SYMBOL_ITERATOR];if(typeof iteratorMethod==='function'){var iterator=iteratorMethod.call(obj);var result=[];var step;for(var i=0;!(step=iterator.next()).done;++i){result.push(mapFn.call(thisArg,step.value,i));// Infinite Iterators could cause forEach to run forever.\n// After a very large number of iterations, produce an error.\n// istanbul ignore if (Too big to actually test)\nif(i>9999999){throw new TypeError('Near-infinite iteration.');}}return result;}// Is Array like?\nvar length=obj.length;if(typeof length==='number'&&length>=0&&length%1===0){var _result=[];for(var _i=0;_i<length;++_i){if(Object.prototype.hasOwnProperty.call(obj,_i)){_result.push(mapFn.call(thisArg,obj[_i],_i));}}return _result;}return[];};export default arrayFrom;","map":{"version":3,"names":["SYMBOL_ITERATOR","arrayFrom","Array","from","obj","mapFn","thisArg","TypeError","iteratorMethod","iterator","call","result","step","i","next","done","push","value","length","_result","_i","Object","prototype","hasOwnProperty"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/polyfills/arrayFrom.mjs"],"sourcesContent":["import { SYMBOL_ITERATOR } from \"./symbols.mjs\";\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe[name-already-bound]\nvar arrayFrom = Array.from || function (obj, mapFn, thisArg) {\n  if (obj == null) {\n    throw new TypeError('Array.from requires an array-like object - not null or undefined');\n  } // Is Iterable?\n\n\n  var iteratorMethod = obj[SYMBOL_ITERATOR];\n\n  if (typeof iteratorMethod === 'function') {\n    var iterator = iteratorMethod.call(obj);\n    var result = [];\n    var step;\n\n    for (var i = 0; !(step = iterator.next()).done; ++i) {\n      result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.\n      // After a very large number of iterations, produce an error.\n      // istanbul ignore if (Too big to actually test)\n\n      if (i > 9999999) {\n        throw new TypeError('Near-infinite iteration.');\n      }\n    }\n\n    return result;\n  } // Is Array like?\n\n\n  var length = obj.length;\n\n  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {\n    var _result = [];\n\n    for (var _i = 0; _i < length; ++_i) {\n      if (Object.prototype.hasOwnProperty.call(obj, _i)) {\n        _result.push(mapFn.call(thisArg, obj[_i], _i));\n      }\n    }\n\n    return _result;\n  }\n\n  return [];\n};\n\nexport default arrayFrom;\n"],"mappings":"AAAA,OAASA,eAAT,KAAgC,eAAhC,CAEA,iC,CACA;AACA,GAAIC,UAAS,CAAGC,KAAK,CAACC,IAAN,EAAc,SAAUC,GAAV,CAAeC,KAAf,CAAsBC,OAAtB,CAA+B,CAC3D,GAAIF,GAAG,EAAI,IAAX,CAAiB,CACf,KAAM,IAAIG,UAAJ,CAAc,kEAAd,CAAN,CACD,CAAC;AAGF,GAAIC,eAAc,CAAGJ,GAAG,CAACJ,eAAD,CAAxB,CAEA,GAAI,MAAOQ,eAAP,GAA0B,UAA9B,CAA0C,CACxC,GAAIC,SAAQ,CAAGD,cAAc,CAACE,IAAf,CAAoBN,GAApB,CAAf,CACA,GAAIO,OAAM,CAAG,EAAb,CACA,GAAIC,KAAJ,CAEA,IAAK,GAAIC,EAAC,CAAG,CAAb,CAAgB,CAAC,CAACD,IAAI,CAAGH,QAAQ,CAACK,IAAT,EAAR,EAAyBC,IAA1C,CAAgD,EAAEF,CAAlD,CAAqD,CACnDF,MAAM,CAACK,IAAP,CAAYX,KAAK,CAACK,IAAN,CAAWJ,OAAX,CAAoBM,IAAI,CAACK,KAAzB,CAAgCJ,CAAhC,CAAZ,EAAiD;AACjD;AACA;AAEA,GAAIA,CAAC,CAAG,OAAR,CAAiB,CACf,KAAM,IAAIN,UAAJ,CAAc,0BAAd,CAAN,CACD,CACF,CAED,MAAOI,OAAP,CACD,CAAC;AAGF,GAAIO,OAAM,CAAGd,GAAG,CAACc,MAAjB,CAEA,GAAI,MAAOA,OAAP,GAAkB,QAAlB,EAA8BA,MAAM,EAAI,CAAxC,EAA6CA,MAAM,CAAG,CAAT,GAAe,CAAhE,CAAmE,CACjE,GAAIC,QAAO,CAAG,EAAd,CAEA,IAAK,GAAIC,GAAE,CAAG,CAAd,CAAiBA,EAAE,CAAGF,MAAtB,CAA8B,EAAEE,EAAhC,CAAoC,CAClC,GAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCb,IAAhC,CAAqCN,GAArC,CAA0CgB,EAA1C,CAAJ,CAAmD,CACjDD,OAAO,CAACH,IAAR,CAAaX,KAAK,CAACK,IAAN,CAAWJ,OAAX,CAAoBF,GAAG,CAACgB,EAAD,CAAvB,CAA6BA,EAA7B,CAAb,EACD,CACF,CAED,MAAOD,QAAP,CACD,CAED,MAAO,EAAP,CACD,CA1CD,CA4CA,cAAelB,UAAf"},"metadata":{},"sourceType":"module"}