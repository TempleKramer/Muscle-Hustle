{"ast":null,"code":"import objectValues from\"../polyfills/objectValues.mjs\";import inspect from\"../jsutils/inspect.mjs\";import devAssert from\"../jsutils/devAssert.mjs\";import keyValMap from\"../jsutils/keyValMap.mjs\";import isObjectLike from\"../jsutils/isObjectLike.mjs\";import{parseValue}from\"../language/parser.mjs\";import{GraphQLSchema}from\"../type/schema.mjs\";import{GraphQLDirective}from\"../type/directives.mjs\";import{specifiedScalarTypes}from\"../type/scalars.mjs\";import{introspectionTypes,TypeKind}from\"../type/introspection.mjs\";import{isInputType,isOutputType,GraphQLList,GraphQLNonNull,GraphQLScalarType,GraphQLObjectType,GraphQLInterfaceType,GraphQLUnionType,GraphQLEnumType,GraphQLInputObjectType,assertNullableType,assertObjectType,assertInterfaceType}from\"../type/definition.mjs\";import{valueFromAST}from\"./valueFromAST.mjs\";/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */export function buildClientSchema(introspection,options){isObjectLike(introspection)&&isObjectLike(introspection.__schema)||devAssert(0,\"Invalid or incomplete introspection result. Ensure that you are passing \\\"data\\\" property of introspection response and no \\\"errors\\\" was returned alongside: \".concat(inspect(introspection),\".\"));// Get the schema from the introspection result.\nvar schemaIntrospection=introspection.__schema;// Iterate through all types, getting the type definition for each.\nvar typeMap=keyValMap(schemaIntrospection.types,function(typeIntrospection){return typeIntrospection.name;},function(typeIntrospection){return buildType(typeIntrospection);});// Include standard types only if they are used.\nfor(var _i2=0,_ref2=[].concat(specifiedScalarTypes,introspectionTypes);_i2<_ref2.length;_i2++){var stdType=_ref2[_i2];if(typeMap[stdType.name]){typeMap[stdType.name]=stdType;}}// Get the root Query, Mutation, and Subscription types.\nvar queryType=schemaIntrospection.queryType?getObjectType(schemaIntrospection.queryType):null;var mutationType=schemaIntrospection.mutationType?getObjectType(schemaIntrospection.mutationType):null;var subscriptionType=schemaIntrospection.subscriptionType?getObjectType(schemaIntrospection.subscriptionType):null;// Get the directives supported by Introspection, assuming empty-set if\n// directives were not queried for.\nvar directives=schemaIntrospection.directives?schemaIntrospection.directives.map(buildDirective):[];// Then produce and return a Schema with these types.\nreturn new GraphQLSchema({description:schemaIntrospection.description,query:queryType,mutation:mutationType,subscription:subscriptionType,types:objectValues(typeMap),directives:directives,assumeValid:options===null||options===void 0?void 0:options.assumeValid});// Given a type reference in introspection, return the GraphQLType instance.\n// preferring cached instances before building new instances.\nfunction getType(typeRef){if(typeRef.kind===TypeKind.LIST){var itemRef=typeRef.ofType;if(!itemRef){throw new Error('Decorated type deeper than introspection query.');}return new GraphQLList(getType(itemRef));}if(typeRef.kind===TypeKind.NON_NULL){var nullableRef=typeRef.ofType;if(!nullableRef){throw new Error('Decorated type deeper than introspection query.');}var nullableType=getType(nullableRef);return new GraphQLNonNull(assertNullableType(nullableType));}return getNamedType(typeRef);}function getNamedType(typeRef){var typeName=typeRef.name;if(!typeName){throw new Error(\"Unknown type reference: \".concat(inspect(typeRef),\".\"));}var type=typeMap[typeName];if(!type){throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName,\". Ensure that a full introspection query is used in order to build a client schema.\"));}return type;}function getObjectType(typeRef){return assertObjectType(getNamedType(typeRef));}function getInterfaceType(typeRef){return assertInterfaceType(getNamedType(typeRef));}// Given a type's introspection result, construct the correct\n// GraphQLType instance.\nfunction buildType(type){if(type!=null&&type.name!=null&&type.kind!=null){switch(type.kind){case TypeKind.SCALAR:return buildScalarDef(type);case TypeKind.OBJECT:return buildObjectDef(type);case TypeKind.INTERFACE:return buildInterfaceDef(type);case TypeKind.UNION:return buildUnionDef(type);case TypeKind.ENUM:return buildEnumDef(type);case TypeKind.INPUT_OBJECT:return buildInputObjectDef(type);}}var typeStr=inspect(type);throw new Error(\"Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: \".concat(typeStr,\".\"));}function buildScalarDef(scalarIntrospection){return new GraphQLScalarType({name:scalarIntrospection.name,description:scalarIntrospection.description,specifiedByUrl:scalarIntrospection.specifiedByUrl});}function buildImplementationsList(implementingIntrospection){// TODO: Temporary workaround until GraphQL ecosystem will fully support\n// 'interfaces' on interface types.\nif(implementingIntrospection.interfaces===null&&implementingIntrospection.kind===TypeKind.INTERFACE){return[];}if(!implementingIntrospection.interfaces){var implementingIntrospectionStr=inspect(implementingIntrospection);throw new Error(\"Introspection result missing interfaces: \".concat(implementingIntrospectionStr,\".\"));}return implementingIntrospection.interfaces.map(getInterfaceType);}function buildObjectDef(objectIntrospection){return new GraphQLObjectType({name:objectIntrospection.name,description:objectIntrospection.description,interfaces:function interfaces(){return buildImplementationsList(objectIntrospection);},fields:function fields(){return buildFieldDefMap(objectIntrospection);}});}function buildInterfaceDef(interfaceIntrospection){return new GraphQLInterfaceType({name:interfaceIntrospection.name,description:interfaceIntrospection.description,interfaces:function interfaces(){return buildImplementationsList(interfaceIntrospection);},fields:function fields(){return buildFieldDefMap(interfaceIntrospection);}});}function buildUnionDef(unionIntrospection){if(!unionIntrospection.possibleTypes){var unionIntrospectionStr=inspect(unionIntrospection);throw new Error(\"Introspection result missing possibleTypes: \".concat(unionIntrospectionStr,\".\"));}return new GraphQLUnionType({name:unionIntrospection.name,description:unionIntrospection.description,types:function types(){return unionIntrospection.possibleTypes.map(getObjectType);}});}function buildEnumDef(enumIntrospection){if(!enumIntrospection.enumValues){var enumIntrospectionStr=inspect(enumIntrospection);throw new Error(\"Introspection result missing enumValues: \".concat(enumIntrospectionStr,\".\"));}return new GraphQLEnumType({name:enumIntrospection.name,description:enumIntrospection.description,values:keyValMap(enumIntrospection.enumValues,function(valueIntrospection){return valueIntrospection.name;},function(valueIntrospection){return{description:valueIntrospection.description,deprecationReason:valueIntrospection.deprecationReason};})});}function buildInputObjectDef(inputObjectIntrospection){if(!inputObjectIntrospection.inputFields){var inputObjectIntrospectionStr=inspect(inputObjectIntrospection);throw new Error(\"Introspection result missing inputFields: \".concat(inputObjectIntrospectionStr,\".\"));}return new GraphQLInputObjectType({name:inputObjectIntrospection.name,description:inputObjectIntrospection.description,fields:function fields(){return buildInputValueDefMap(inputObjectIntrospection.inputFields);}});}function buildFieldDefMap(typeIntrospection){if(!typeIntrospection.fields){throw new Error(\"Introspection result missing fields: \".concat(inspect(typeIntrospection),\".\"));}return keyValMap(typeIntrospection.fields,function(fieldIntrospection){return fieldIntrospection.name;},buildField);}function buildField(fieldIntrospection){var type=getType(fieldIntrospection.type);if(!isOutputType(type)){var typeStr=inspect(type);throw new Error(\"Introspection must provide output type for fields, but received: \".concat(typeStr,\".\"));}if(!fieldIntrospection.args){var fieldIntrospectionStr=inspect(fieldIntrospection);throw new Error(\"Introspection result missing field args: \".concat(fieldIntrospectionStr,\".\"));}return{description:fieldIntrospection.description,deprecationReason:fieldIntrospection.deprecationReason,type:type,args:buildInputValueDefMap(fieldIntrospection.args)};}function buildInputValueDefMap(inputValueIntrospections){return keyValMap(inputValueIntrospections,function(inputValue){return inputValue.name;},buildInputValue);}function buildInputValue(inputValueIntrospection){var type=getType(inputValueIntrospection.type);if(!isInputType(type)){var typeStr=inspect(type);throw new Error(\"Introspection must provide input type for arguments, but received: \".concat(typeStr,\".\"));}var defaultValue=inputValueIntrospection.defaultValue!=null?valueFromAST(parseValue(inputValueIntrospection.defaultValue),type):undefined;return{description:inputValueIntrospection.description,type:type,defaultValue:defaultValue,deprecationReason:inputValueIntrospection.deprecationReason};}function buildDirective(directiveIntrospection){if(!directiveIntrospection.args){var directiveIntrospectionStr=inspect(directiveIntrospection);throw new Error(\"Introspection result missing directive args: \".concat(directiveIntrospectionStr,\".\"));}if(!directiveIntrospection.locations){var _directiveIntrospectionStr=inspect(directiveIntrospection);throw new Error(\"Introspection result missing directive locations: \".concat(_directiveIntrospectionStr,\".\"));}return new GraphQLDirective({name:directiveIntrospection.name,description:directiveIntrospection.description,isRepeatable:directiveIntrospection.isRepeatable,locations:directiveIntrospection.locations.slice(),args:buildInputValueDefMap(directiveIntrospection.args)});}}","map":{"version":3,"names":["objectValues","inspect","devAssert","keyValMap","isObjectLike","parseValue","GraphQLSchema","GraphQLDirective","specifiedScalarTypes","introspectionTypes","TypeKind","isInputType","isOutputType","GraphQLList","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","assertNullableType","assertObjectType","assertInterfaceType","valueFromAST","buildClientSchema","introspection","options","__schema","concat","schemaIntrospection","typeMap","types","typeIntrospection","name","buildType","_i2","_ref2","length","stdType","queryType","getObjectType","mutationType","subscriptionType","directives","map","buildDirective","description","query","mutation","subscription","assumeValid","getType","typeRef","kind","LIST","itemRef","ofType","Error","NON_NULL","nullableRef","nullableType","getNamedType","typeName","type","getInterfaceType","SCALAR","buildScalarDef","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","buildUnionDef","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","typeStr","scalarIntrospection","specifiedByUrl","buildImplementationsList","implementingIntrospection","interfaces","implementingIntrospectionStr","objectIntrospection","fields","buildFieldDefMap","interfaceIntrospection","unionIntrospection","possibleTypes","unionIntrospectionStr","enumIntrospection","enumValues","enumIntrospectionStr","values","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","inputObjectIntrospectionStr","buildInputValueDefMap","fieldIntrospection","buildField","args","fieldIntrospectionStr","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","defaultValue","undefined","directiveIntrospection","directiveIntrospectionStr","locations","_directiveIntrospectionStr","isRepeatable","slice"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/utilities/buildClientSchema.mjs"],"sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { parseValue } from \"../language/parser.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { specifiedScalarTypes } from \"../type/scalars.mjs\";\nimport { introspectionTypes, TypeKind } from \"../type/introspection.mjs\";\nimport { isInputType, isOutputType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, assertNullableType, assertObjectType, assertInterfaceType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, \"Invalid or incomplete introspection result. Ensure that you are passing \\\"data\\\" property of introspection response and no \\\"errors\\\" was returned alongside: \".concat(inspect(introspection), \".\")); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  }); // Include standard types only if they are used.\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    var typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(\"Unknown type reference: \".concat(inspect(typeRef), \".\"));\n    }\n\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type != null && type.name != null && type.kind != null) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    var typeStr = inspect(type);\n    throw new Error(\"Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: \".concat(typeStr, \".\"));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByUrl: scalarIntrospection.specifiedByUrl\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === TypeKind.INTERFACE) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      var implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(\"Introspection result missing interfaces: \".concat(implementingIntrospectionStr, \".\"));\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(objectIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(interfaceIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      var unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(\"Introspection result missing possibleTypes: \".concat(unionIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      var enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(\"Introspection result missing enumValues: \".concat(enumIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      var inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(\"Introspection result missing inputFields: \".concat(inputObjectIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\"Introspection result missing fields: \".concat(inspect(typeIntrospection), \".\"));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, buildField);\n  }\n\n  function buildField(fieldIntrospection) {\n    var type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide output type for fields, but received: \".concat(typeStr, \".\"));\n    }\n\n    if (!fieldIntrospection.args) {\n      var fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(\"Introspection result missing field args: \".concat(fieldIntrospectionStr, \".\"));\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type: type,\n      args: buildInputValueDefMap(fieldIntrospection.args)\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide input type for arguments, but received: \".concat(typeStr, \".\"));\n    }\n\n    var defaultValue = inputValueIntrospection.defaultValue != null ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      var directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\"Introspection result missing directive args: \".concat(directiveIntrospectionStr, \".\"));\n    }\n\n    if (!directiveIntrospection.locations) {\n      var _directiveIntrospectionStr = inspect(directiveIntrospection);\n\n      throw new Error(\"Introspection result missing directive locations: \".concat(_directiveIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}