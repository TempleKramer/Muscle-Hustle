{"ast":null,"code":"import*as React from'react';import{canUseSymbol}from\"../../utilities/index.js\";var contextKey=canUseSymbol?Symbol.for('__APOLLO_CONTEXT__'):'__APOLLO_CONTEXT__';export function getApolloContext(){var context=React.createContext[contextKey];if(!context){Object.defineProperty(React.createContext,contextKey,{value:context=React.createContext({}),enumerable:false,writable:false,configurable:true});context.displayName='ApolloContext';}return context;}export{getApolloContext as resetApolloContext};","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,OAASC,YAAT,KAA6B,0BAA7B,CAYA,GAAMC,WAAU,CAAGD,YAAY,CAC3BE,MAAM,CAACC,GAAP,CAAW,oBAAX,CAD2B,CAE3B,oBAFJ,CAIA,MAAM,SAAUC,iBAAV,EAA0B,CAC9B,GAAIC,QAAO,CAAIN,KAAK,CAACO,aAAN,CAA4BL,UAA5B,CAAf,CACA,GAAI,CAACI,OAAL,CAAc,CACZE,MAAM,CAACC,cAAP,CAAsBT,KAAK,CAACO,aAA5B,CAA2CL,UAA3C,CAAuD,CACrDQ,KAAK,CAAEJ,OAAO,CAAGN,KAAK,CAACO,aAAN,CAAwC,EAAxC,CADoC,CAErDI,UAAU,CAAE,KAFyC,CAGrDC,QAAQ,CAAE,KAH2C,CAIrDC,YAAY,CAAE,IAJuC,CAAvD,EAMAP,OAAO,CAACQ,WAAR,CAAsB,eAAtB,CACD,CACD,MAAOR,QAAP,CACD,CAED,OAASD,gBAAgB,GAAIU,mBAA7B","names":["React","canUseSymbol","contextKey","Symbol","for","getApolloContext","context","createContext","Object","defineProperty","value","enumerable","writable","configurable","displayName","resetApolloContext"],"sourceRoot":"","sources":["../../../src/react/context/ApolloContext.ts"],"sourcesContent":["import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n"]},"metadata":{},"sourceType":"module"}