{"ast":null,"code":"import objectValues from\"../../polyfills/objectValues.mjs\";import keyMap from\"../../jsutils/keyMap.mjs\";import inspect from\"../../jsutils/inspect.mjs\";import didYouMean from\"../../jsutils/didYouMean.mjs\";import suggestionList from\"../../jsutils/suggestionList.mjs\";import{GraphQLError}from\"../../error/GraphQLError.mjs\";import{print}from\"../../language/printer.mjs\";import{isLeafType,isInputObjectType,isListType,isNonNullType,isRequiredInputField,getNullableType,getNamedType}from\"../../type/definition.mjs\";/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */export function ValuesOfCorrectTypeRule(context){return{ListValue:function ListValue(node){// Note: TypeInfo will traverse into a list's item type, so look to the\n// parent input type to check if it is a list.\nvar type=getNullableType(context.getParentInputType());if(!isListType(type)){isValidValueNode(context,node);return false;// Don't traverse further.\n}},ObjectValue:function ObjectValue(node){var type=getNamedType(context.getInputType());if(!isInputObjectType(type)){isValidValueNode(context,node);return false;// Don't traverse further.\n}// Ensure every required field exists.\nvar fieldNodeMap=keyMap(node.fields,function(field){return field.name.value;});for(var _i2=0,_objectValues2=objectValues(type.getFields());_i2<_objectValues2.length;_i2++){var fieldDef=_objectValues2[_i2];var fieldNode=fieldNodeMap[fieldDef.name];if(!fieldNode&&isRequiredInputField(fieldDef)){var typeStr=inspect(fieldDef.type);context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name,\".\").concat(fieldDef.name,\"\\\" of required type \\\"\").concat(typeStr,\"\\\" was not provided.\"),node));}}},ObjectField:function ObjectField(node){var parentType=getNamedType(context.getParentInputType());var fieldType=context.getInputType();if(!fieldType&&isInputObjectType(parentType)){var suggestions=suggestionList(node.name.value,Object.keys(parentType.getFields()));context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value,\"\\\" is not defined by type \\\"\").concat(parentType.name,\"\\\".\")+didYouMean(suggestions),node));}},NullValue:function NullValue(node){var type=context.getInputType();if(isNonNullType(type)){context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type),\"\\\", found \").concat(print(node),\".\"),node));}},EnumValue:function EnumValue(node){return isValidValueNode(context,node);},IntValue:function IntValue(node){return isValidValueNode(context,node);},FloatValue:function FloatValue(node){return isValidValueNode(context,node);},StringValue:function StringValue(node){return isValidValueNode(context,node);},BooleanValue:function BooleanValue(node){return isValidValueNode(context,node);}};}/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */function isValidValueNode(context,node){// Report any error at the full type expected by the location.\nvar locationType=context.getInputType();if(!locationType){return;}var type=getNamedType(locationType);if(!isLeafType(type)){var typeStr=inspect(locationType);context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr,\"\\\", found \").concat(print(node),\".\"),node));return;}// Scalars and Enums determine if a literal value is valid via parseLiteral(),\n// which may throw or return an invalid value to indicate failure.\ntry{var parseResult=type.parseLiteral(node,undefined/* variables */);if(parseResult===undefined){var _typeStr=inspect(locationType);context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr,\"\\\", found \").concat(print(node),\".\"),node));}}catch(error){var _typeStr2=inspect(locationType);if(error instanceof GraphQLError){context.reportError(error);}else{context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2,\"\\\", found \").concat(print(node),\"; \")+error.message,node,undefined,undefined,undefined,error));}}}","map":{"version":3,"names":["objectValues","keyMap","inspect","didYouMean","suggestionList","GraphQLError","print","isLeafType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","ValuesOfCorrectTypeRule","context","ListValue","node","type","getParentInputType","isValidValueNode","ObjectValue","getInputType","fieldNodeMap","fields","field","name","value","_i2","_objectValues2","getFields","length","fieldDef","fieldNode","typeStr","reportError","concat","ObjectField","parentType","fieldType","suggestions","Object","keys","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","_typeStr","error","_typeStr2","message"],"sources":["C:/Users/jarma/school/challenges/Project3_Final/client/src/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"sourcesContent":["import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}